{
  "openapi": "3.0.3",
  "info": {
    "title": "Kroger API Reference",
    "description": "# Introduction\nPartner APIs enable official partners to access strategic functionality and data. Since the needs of our partners determine our Partner APIs, they are not open for public consumption.\n<br><br>\nAll Partner APIs provide access to the following Kroger subsidiaries:\n<ul>\n<li>Kroger</li>\n<li>Bakers</li>\n<li>City Market</li>\n<li>Dillons</li>\n<li>Food 4 Less</li>\n<li>Foods Co</li>\n<li>Fred Meyer</li>\n<li>Fry's</li>\n<li>Gerbes</li>\n<li>JayC</li>\n<li>King Soopers</li>\n<li>Metro Market</li>\n<li>Owen's</li>\n<li>Pay Less</li>\n<li>Pick 'n Save</li>\n<li>QFC</li>\n<li>Ralphs</li>\n<li>Smith's</li>\n</ul>\n<br><br>\nTo begin using our Public APIs, see the <a href=\"https://developer.kroger.com/documentation/partner\">Getting Started</a> documentation.  \n\n# Environments \n\nDuring registration, we require apps to be registered for environments individually. Use one of the following paths based on the environment you selected for your application during the registration process.\n\n| Environment | Path |\n|-------------|------|\n|Production | https://api.kroger.com/v1/ |\n|Certification | https://api-ce.kroger.com/v1/ |\n\n# Authentication \nFor API authentication, Kroger uses the OAuth2 protocol ([RFC6749](https://tools.ietf.org/html/rfc6749)), \nsupporting the Authorization Code, Client Credentials, and Refresh Token grant types. If you're unfamiliar \nwith OAuth2, see our [Understanding OAuth2](https://developer.kroger.com/documentation/partner/guides/guides-oauth)\n documentation.\n\n\n<!-- ReDoc-Inject: <security-definitions> -->\n",
    "termsOfService": "https://developer.kroger.com/terms",
    "contact": {
      "name": "API Support",
      "email": "APISupport@kroger.com"
    },
    "version": "1.2.1"
  },
  "servers": [
    {
      "url": "https://api.kroger.com/v1",
      "description": "Production Environment"
    },
    {
      "url": "https://api-ce.kroger.com/v1",
      "description": "Certification Environment"
    }
  ],
  "security": [
    {
      "CustomerContext": [
        "profile.name",
        "profile.basic",
        "profile.full",
        "profile.loyalty",
        "product.basic",
        "product.personalized",
        "cart.basic",
        "cart.basic:rw",
        "urn:com:kroger:partner:catalog:products:read",
        "urn:com:kroger:partner:unattended-pickup:order-events:write"
      ]
    },
    {
      "ClientContext": [
        "profile.exists",
        "product.basic",
        "delivery.basic",
        "delivery.basic:rw",
        "urn:com:kroger:partner:catalog:products:read",
        "urn:com:kroger:partner:order:checkout:write",
        "urn:com:kroger:partner:unattended-pickup:order-events:write"
      ]
    }
  ],
  "tags": [
    {
      "name": "Identity",
      "description": "The Identity API provides access to the profile information of an authenticated\nKroger customer. <br><br>The Identity API supports the following operations: <br>\n<table>\n<tr>\n  <th>Name</th>\n  <th>Method</th>\n  <th>Description</th>\n</tr>\n<tr>\n  <td>Profile information</td>\n  <td>GET</td>\n  <td>Returns a customer's full profile.</td>\n</tr>\n<tr>\n  <td>Profile query</td>\n  <td>GET</td>\n  <td>Determines if a customer's profile exist by email address.</td>\n</tr>\n<tr>\n  <td>Profile query</td>\n  <td>HEAD</td>\n  <td>Determines if a customer's profile exist by email address.</td>\n</tr>\n<tr>\n  <td>Profile loyalty information</td>\n  <td>GET</td>\n  <td>Returns a customer's loyalty card number.</td>\n</tr>\n</table>\n"
    },
    {
      "name": "Products",
      "description": "The Products API allows you to search the Kroger product catalog. \n\n### Pagination\n\nThe Product Search operation supports pagination with a default value of 10 results per page. Using the following parameters, you can extend and skip results in the response:\n\n`filter.limit` - Sets a limit on the number of products returned.<br>\n`filter.start` - Sets a number of results to skip in the response. \n\n**Note**: Since searching by a term acts as a fuzzy search, the order of the results can change with each new request.  \n\n### API Operations\n\nThe Products API supports the following operations: <br>\n<table>\n<tr>\n    <th>Name</th>\n    <th>Method</th>\n    <th>Description</th>\n</tr>\n<tr>\n    <td>Product search</td>\n    <td>GET</td>\n    <td>Allows you to find products by passing in either a search term or product Id.</td>\n</tr>\n<tr>\n    <td>Product details</td>\n    <td>GET</td>\n    <td>Returns product details for a specific product.</td>\n</tr>\n</table><br><br>\n\n### Additional Response Data \n\nTo return the following data from the `/products` endpoint, you must include a <code>locationId</code> in the request. All operations for the products endpoint accept the <code>filter.locationId</code> query parameter.<br><br>\n<ul>\n<li>Price<br><br>Returns the following price objects:<br><br><code>price</code> - Includes both the <code>regular</code> price of the item and the <code>promo</code> price of the item.<br><code>nationalPrice</code> - Includes both the <code>regular</code> national price of the item and the national <code>promo</code> price of the item.<br><br><b>Note</b>: Seasonal products only return a price when available. Some items may not have a national prices available.</li><br>\n\n<li>Fulfillment Type<br><br>Returns the following boolean objects to indicate an item's fulfillment availability:<br><br><code>instore</code> - The item is sold in store at the given location.<br><code>shiptohome</code> - The item is available to be shipped to home.<br><code>delivery</code> - The item is available for delivery from the given location.<br><code>curbside</code> - The item is available for curbside pickup from the given location.<br><br> <b>Note</b>: The <code>instore</code> fulfillment type only indicated that the item is sold by the given location, not that it is in stock.</li><br>\n\n<li>Aisle Locations<br><br>Returns the aisle locations of the item for the given location.</li><br>\n\n<li>Inventory<br><br>Returns the <code>stockLevel</code> of the item. This property is omitted when unavailable:<br><br><code>HIGH</code> - The stock level is high.<br><code>LOW</code> - The stock level is low.<br><code>TEMPORARILY_OUT_OF_STOCK</code> - The item is temporarily out of stock.</li>\n</ul>\n"
    },
    {
      "name": "Locations",
      "description": "The Locations API provides access to all locations, chains, and departments \nthat are owned by The Kroger Co. <br><br>The Locations API \nsupports the following operations: <br>\n<table>\n<tr>\n  <th>Name</th>\n  <th>Method</th>\n  <th>Description</th>\n</tr>\n<tr>\n  <td>Location list</td>\n  <td>GET</td>\n  <td>Returns a list of locations matching a given criteria.</td>\n</tr>\n<tr>\n  <td>Location details</td>\n  <td>GET</td>\n  <td>Returns the details of a specific location.</td>\n</tr>\n<tr>\n  <td>Location query</td>\n  <td>HEAD</td>\n  <td>Determines if a specific location exists.</td>\n</tr>\n<tr>\n  <td>Chain list</td>\n  <td>GET</td>\n  <td>Returns a list of all chains owned by The Kroger Co.</td>\n</tr>\n<tr>\n  <td>Chain details</td>\n  <td>GET</td>\n  <td>Returns the details of a specific chain.</td>\n</tr>\n<tr>\n  <td>Chain query</td>\n  <td>HEAD</td>\n  <td>Determines if a specific chain exists.</td>\n</tr>\n<tr>\n  <td>Department list</td>\n  <td>GET</td>\n  <td>Returns a list of all departments for a specific location.</td>\n</tr>\n<tr>\n  <td>Department details</td>\n  <td>GET</td>\n  <td>Returns the details of a specific department.</td>\n</tr>\n<tr>\n  <td>Department query</td>\n  <td>HEAD</td>\n  <td>Determines if a specific department exists.</td>\n</tr>\n</table>\n"
    },
    {
      "name": "Carts",
      "description": "The Carts API provides access to create, view, and update a customer's cart. <br><br>\nThe Carts API supports the following operations: <br>\n<table>\n<tr>\n  <th>Name</th>\n  <th>Method</th>\n  <th>Description</th>\n</tr>\n<tr>\n  <td>User cart list</td>\n  <td>GET</td>\n  <td>Returns a list of carts for a specific customer.</td>\n</tr>\n<tr>\n  <td>Create a cart</td>\n  <td>POST</td>\n  <td>Creates a cart for a customer.</td>\n</tr>\n<tr>\n  <td>Cart by ID</td>\n  <td>GET</td>\n  <td>Returns a specific cart by ID.</td>\n</tr>\n<tr>\n  <td>Update cart</td>\n  <td>PUT</td>\n  <td>Updates an item in a customer's cart.</td>\n</tr>\n<tr>\n  <td>Add to cart</td>\n  <td>POST</td>\n  <td>Adds an item to a customer's cart.</td>\n</tr>\n<tr>\n  <td>Update item quantity</td>\n  <td>PUT</td>\n  <td>Updates an item in a customer's cart.</td>\n</tr>\n<tr>\n  <td>Delete item</td>\n  <td>DELETE</td>\n  <td>Deletes an item from a customer's cart.</td>\n</tr>\n</table>\n"
    },
    {
      "name": "Catalog",
      "description": "The Catalog API allows you to access Kroger's product catalog data. The catalog can be customized for clients based on their needs and requirements.<br><br>\nProduct search supports <code>pagination</code> with a default value of <code>20</code> results per page. \nUsing the following parameters in the request, you can configure the <code>size</code> and <code>offset</code> of the response:<br><br>\n  <li><code>page.size</code> - Sets a number of products to be listed in the response.<br></li>\n  <li><code>page.offset</code> - Sets a number of products to skip in the response.</li><br><br>\n  \n  Use <code>projections</code> based on the depth of information required. The default value is products.compact.\n<ul><li><code>products.full</code>-The\nentire details about a product\nincluding the category and store specific details\nis returned such as price and location</li><br>  <li><code>products.compact</code>-The\nminimum viable\ndetails required for a product is returned such as name, barcodes/upc, images, status, soldBy, etc.</li></ul><br><br>\n\n### API Operations\nThe Catalog API supports the following operations:\n<table>\n  <tr>\n    <th>Name</th>\n    <th>Method</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>Product Search</td>\n    <td>GET</td>\n    <td> Returns the list of products matching a given criteria.</td>\n  </tr></table><br>\n"
    },
    {
      "name": "Catalog V2",
      "description": "The Catalog V2 API allows you to access Kroger's catalog data. The catalog can be customized for clients based on their needs and requirements.<br><br>\n### <b>Pagination</b>\nProduct search supports <code>pagination</code> with a default value of <code>20</code> results per page. \nUsing the following parameters in the request, you can configure the <code>size</code> and <code>offset</code> of the response:<br><br>\n  <li><code>page.size</code> - Sets a number of products to be listed in the response.<br></li>\n  <li><code>page.offset</code> - Sets a number of products to skip in the response.</li><br><br></li></ul><br><br>\n\n### API Operations\n \n<table>\n<tr>\n  <th>Name</th>\n  <th>Method</th>\n  <th>Description</th>\n</tr>\n<tr>\n  <td>Catalog Search</td>\n  <td>GET</td>\n  <td>Returns a list of products and their core information.</td>\n</tr>\n<tr>\n  <td>Catalog Inventory</td>\n  <td>GET</td>\n  <td>Returns inventory details for one or more products.</td>\n</tr>"
    },
    {
      "name": "Deliveries",
      "description": "The Deliveries API provides access to both a list of deliveries and the \nability to update a delivery. <br><br>The Deliveries API \nsupports the following operations: <br>\n<table>\n<tr>\n  <th>Name</th>\n  <th>Method</th>\n  <th>Description</th>\n</tr>\n<tr>\n  <td>Get deliveries</td>\n  <td>GET</td>\n  <td>Returns a list of deliveries by actions.</td>\n</tr>\n<tr>\n  <td>Get non-deliveries</td>\n  <td>POST</td>\n  <td>Returns a list of outstanding deliveries.</td>\n</tr>\n<tr>\n  <td>Update delivery</td>\n  <td>POST</td>\n  <td>Updates a delivery by ID.</td>\n</tr>\n</table>\n"
    },
    {
      "name": "OAuth2",
      "description": "## Client Credentials Grant\nWhen using the Client Credentials grant type, you can use your application's \nclient credentials as a form of authentication. If you are making a request to an API \nthat requires an OAuth2 scope, the scope must be included in the token request.\n\n## Authorization Code Grant\nTo authenticate a customer and act on their behalf, your application \nmust be able to perform both of the following steps of the Authorization Code grant.\n\n#### 1. Get an Authorization Code\nTo receive an authorization code, you must redirect the \ncustomer from your application to the [authorization code](#operation/authorizationCode) endpoint with the \nappropriate query parameters. After the customer has given consent, they are redirected \nback to your application's registered redirect URL with an authorization code appended as `code`. \n\n#### 2. Get an Access Token \nOnce you have obtained the authorization code from the redirect URL, you need to make an\n[access token request](#operation/accessToken) with the authorization code in the body. The token \nresponse includes both an access and refresh token. \n\n## Refresh Token Grant\nWhen the access token from the Authorization Code grant expires, you can make another \n[access token request](#operation/accessToken) using the Refresh Token grant type. \nThe token response includes both a new access and refresh token.\n\n## Authorization Header\nWhen making an access token request, the authorization header must be in the following form, where \nyour `client_id` and `client_secret` are joined by a single colon and base64 encoded.\n\n```json\nAuthorization: Basic {{base64(client_id:client_secret)}}\n``` \n\nThe following is an example of a base64 encoded header:\n\n```json\nAuthorization: Basic Y2xpZW50X2lkOmNsaWVudF9zZWNyZXQ=\n```\n"
    },
    {
      "name": "Ship Order",
      "description": "The Ship Order API provides a way for a partner to submit a paid order for Kroger to ship in two steps:\n1. Get the amount of tax to charge on the order by using the POST endpoint with the `option.calculate` parameter.\n1. After the consumer has charged the customer (including the correct tax amount from step 1), create an order \nfor Kroger to ship by using the POST endpoint with no parameters.\n"
    },
    {
      "name": "Locker Pickup",
      "description": "The Locker Pickup API provides an interface for locker vendors to send status updates for unattended pickup orders to Kroger. This API supports the following operations:<br><br>The Lockers API \nsupports the following operations: <br>\n<table>\n<tr>\n  <th>Name</th>\n  <th>Method</th>\n  <th>Description</th>\n</tr>\n<tr>\n  <td>Update locker order</td>\n  <td>POST</td>\n  <td>Partners can pass the locker order status to Kroger.</td>\n</tr>\n</table>\n"
    }
  ],
  "paths": {
    "/partner/catalog/products": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Catalog Search",
        "description": "Search the product catalog based upon specified criteria. Available parameters depend upon the type of location being searched and the modality. The two supported types of locations are as follows: <ul><li>Stores: Physical locations that customers are able to visit.</li><li>Distribution Centers: Locations that provide delivery services only with no customer access.</li></ul><br>The four supported modalities are as follows: <ul><li>DELIVERY: when items are delivered by a Kroger or partner delivery service that can safely deliver perishable goods.</li><li>SHIP: when non-perishable items are delivered via a shipping service.</li><li>PICK_UP: when the order is picked at a Kroger location and the customer picks it up from that location.</li><li>IN_STORE: when customers visit a store in person and pick their items, check out, and take their items home.</li></ul>\n<h3>Stores catalog:</h3><table border=1><th align=center><font size=+0>Available Filters</font></th><th align=center><font size=+0>Supported Operators</font></th><th align=center><font size=+0>DELIVERY</font></th><th align=center><font size=+0>SHIP / PICK_UP / IN_STORE</font></th><tr><td align=center><font size=+0>filter.name </font></td><td align=center><font size=+0>eq, like</font></td><td align=center><font size=+0>Yes</font></td><td align=center><font size=+0>No</font><tr><td align=center><font size=+0>filter.barcodes</font></td><td align=center><font size=+0>eq</font></td><td align=center><font size=+0>Yes</font></td><td align=center><font size=+0>No</font></td></tr><tr><td align=center><font size=+0>filter.storeId</font></td><td align=center><font size=+0>eq</font></td><td align=center><font size=+0>Yes</font></td><td align=center><font size=+0>Yes</font></td></tr><tr><td align=center><font size=+0>filter.primaryCategoryId</font></td><td align=center><font size=+0>eq</font></td><td align=center><font size=+0>Yes</font></td><td align=center><font size=+0>No</font></td></tr><tr><td align=center><font size=+0>filter.krogerId</font></td><td align=center><font size=+0>eq, in</font></td><td align=center><font size=+0>Yes</font></td><td align=center><font size=+0>Yes</font></td></tr></tr><tr><td align=center><font size=+0>filter.status</font></td><td align=center><font size=+0>eq</font></td><td align=center><font size=+0>Yes</font></td><td align=center><font size=+0>Yes</font></td></tr><tr><td align=center><font size=+0>filter.modality</font></td><td align=center><font size=+0>eq</font></td><td align=center><font size=+0>Yes</font></td><td align=center><font size=+0>Yes</font></td></tr><tr><td align=center><font size=+0>filter.updatedAt</font></td><td align=center><font size=+0>range</font></td><td align=center><font size=+0>Yes</font></td><td align=center><font size=+0>No</font></td></tr></table><br><b><h3>Distribution centers catalog:</h3></b><table border=1><th align=center><font size=+0>Available Filters</font></th><th align=center><font size=+0>Supported Operators</font></th><th align=center><font size=+0>DELIVERY</font></th><th align=center><font size=+0>SHIP / PICK_UP / IN_STORE</font></th><tr><td align=center><font size=+0>filter.postalCode</font></td><td align=center><font size=+0>eq, in</font></td><td align=center><font size=+0>Yes</font></td><td align=center><font size=+0>No</font></td></tr><tr><td align=center><font size=+0>filter.storeId</font></td><td align=center><font size=+0>eq</font></td><td align=center><font size=+0>Yes</font></td><td align=center><font size=+0>No</font></td></tr><tr><td align=center><font size=+0>filter.krogerId</font></td><td align=center><font size=+0>eq, in</font></td><td align=center><font size=+0>Yes</font></td><td align=center><font size=+0>No</font></td></tr></tr><tr><td align=center><font size=+0>filter.modality</font></td><td align=center><font size=+0>eq</font></td><td align=center><font size=+0>Yes</font></td><td align=center><font size=+0>No</font></td></tr><tr><td align=center><font size=+0>filter.updatedAt</font></td><td align=center><font size=+0>range</font></td><td align=center><font size=+0>Yes</font></td><td align=center><font size=+0>No</font></td></tr></table> <br> <b>Note:</b> filter.postalCode, filter.storeId and filter.modality are mandatory filters for distribution centers catalog.",
        "parameters": [
          {
            "$ref": "#/components/parameters/catalog.productProjections"
          },
          {
            "name": "filter.name.eq",
            "in": "query",
            "description": "Exact match to product name. (When filter.modality is set to DELIVERY.)",
            "example": "Paper Pencil Plastic Wrap",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.name.like",
            "in": "query",
            "description": "All products containing substring in their product name will be returned. (When filter.modality is set to DELIVERY.)",
            "example": "%Paper Pencil Plastic Wrap%",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.barcodes.eq",
            "in": "query",
            "description": "Exact match of barcode. (When filter.modality is set to DELIVERY.)",
            "example": "0005508600241",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.storeId.eq",
            "in": "query",
            "description": "Exact match to the 8-character storeId. When using this filter, only products available at that store are returned. <br><br>This is required if PICK_UP, DELIVERY, or IN_STORE modality is used.<br><br> <b>Note</b> - A maximum of 20 store details (in descending order of store id) will be returned by default in the full projection when storeId isn't given in the request.",
            "schema": {
              "type": "string",
              "example": 70100485,
              "minLength": 8,
              "maxLength": 8
            }
          },
          {
            "name": "filter.postalCode.eq",
            "in": "query",
            "description": "Exact match to postal code or ZIP code.(When filter.modality is set to DELIVERY for distribution centers.) <br><br> This is required when requesting DELIVERY from distribution centers. <br><br><b>Note:</b> For US addresses, 5-digit or 9-digit ZIP+4 are supported.",
            "schema": {
              "type": "string",
              "example": "45402"
            }
          },
          {
            "name": "filter.postalCode.in",
            "in": "query",
            "description": "Exact match to each of the postal codes or ZIP codes in a comma separated list.(When filter.modality is set to DELIVERY for distribution centers.) <br><br>Max Allowed: 100 for distribution centers DELIVERY store products<br><br> This is required when requesting DELIVERY from distribution centers. <br><br><b>Note:</b> For US addresses, 5-digit or 9-digit ZIP+4 are supported.",
            "schema": {
              "format": "comma-separated",
              "type": "string",
              "maximum": 20,
              "example": 4540232789
            }
          },
          {
            "name": "filter.primaryCategoryId.eq",
            "in": "query",
            "description": "Exact match of the category identifier. (When filter.modality is set to DELIVERY.)",
            "schema": {
              "type": "string",
              "example": 5
            }
          },
          {
            "name": "filter.krogerId.eq",
            "in": "query",
            "description": "Exact match to product identifier, typically UPC or GTIN.",
            "schema": {
              "type": "string",
              "example": "0001629144204"
            }
          },
          {
            "name": "filter.krogerId.in",
            "in": "query",
            "description": "Exact match to each product identifier in a comma separated list, typically UPCs or GTINs.<br><br>Max Allowed for DELIVERY: 100<br><br>Max Allowed for PICK_UP, IN_STORE, and SHIP: 50",
            "schema": {
              "type": "string",
              "format": "comma-separated",
              "maximum": 20,
              "example": "0001629144204,0066931606906"
            }
          },
          {
            "name": "filter.status.eq",
            "in": "query",
            "description": "Exact match to product status.",
            "schema": {
              "type": "string",
              "enum": [
                "ENABLED",
                "DISABLED"
              ],
              "example": "ENABLED"
            }
          },
          {
            "name": "filter.modality.eq",
            "in": "query",
            "description": "Exact match to product fulfillment option.",
            "schema": {
              "type": "string",
              "enum": [
                "DELIVERY",
                "SHIP",
                "PICK_UP",
                "IN_STORE"
              ],
              "example": "DELIVERY"
            }
          },
          {
            "name": "filter.updatedAt.range",
            "in": "query",
            "description": "Products updated between specified dates (inclusive). (When filter.modality is set to DELIVERY.)",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-04-16T13:26:12.008Z,2020-04-19T13:26:12.008Z"
            }
          },
          {
            "$ref": "#/components/parameters/catalog.offset"
          },
          {
            "$ref": "#/components/parameters/catalog.size"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/catalog.productsResponseModel"
                },
                "examples": {
                  "Delivery (Stores) - products.full": {
                    "$ref": "#/components/examples/get.delivery.products.full"
                  },
                  "Delivery (Stores) - products.compact": {
                    "$ref": "#/components/examples/get.delivery.products.compact"
                  },
                  "Ship - products.full": {
                    "$ref": "#/components/examples/get.ship.products.full"
                  },
                  "Ship - products.compact": {
                    "$ref": "#/components/examples/get.ship.products.compact"
                  },
                  "Pickup - products.full": {
                    "$ref": "#/components/examples/get.pickup.products.full"
                  },
                  "Pickup - products.compact": {
                    "$ref": "#/components/examples/get.pickup.products.compact"
                  },
                  "InStore - products.full": {
                    "$ref": "#/components/examples/get.instore.products.full"
                  },
                  "InStore - products.compact": {
                    "$ref": "#/components/examples/get.instore.products.compact"
                  },
                  "Delivery (Distribution Centers) - products.full": {
                    "$ref": "#/components/examples/get.ocadostores.delivery.products.full"
                  },
                  "Delivery (Distribution Centers) - products.compact": {
                    "$ref": "#/components/examples/get.ocadostores.delivery.products.compact"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/catalog.clientError.400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/catalog.serverError.500"
                }
              }
            }
          }
        },
        "security": [
          {
            "CustomerContext": [
              "urn:com:kroger:partner:catalog:products:read"
            ]
          },
          {
            "ClientContext": [
              "urn:com:kroger:partner:catalog:products:read"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl -X GET \\\n'https://api.kroger.com/v1/partner/catalog/products' \\\n-H 'Content-Type: application/x-www-form-urlencoded' \\\n-H 'Authorization: Bearer {{TOKEN}}' \\\n"
          },
          {
            "lang": "Go",
            "source": "package main\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\nfunc main() {\n  url := \"https://api.kroger.com/v1/partner/catalog/products\"\n  req, _ := http.NewRequest(\"GET\", url, nil)\n  req.Header.Add(\"Content-Type\", \"application/x-www-form-urlencoded\")\n  req.Header.Add(\"Authorization\", \"Bearer {{TOKEN}}\")\n  res, _ := http.DefaultClient.Do(req)\n  defer res.Body.Close()\n  body, _ := ioutil.ReadAll(res.Body)\n  fmt.Println(res)\n  fmt.Println(string(body))\n}\n"
          },
          {
            "lang": "Java",
            "source": "import okhttp3.*;\nimport java.io.*;\npublic class Test {\n  public static void main(String[] args) {\n    OkHttpClient client = new OkHttpClient();\n    Request request = new Request.Builder().url(\"https://api.kroger.com/v1/partner/catalog/products\").get()\n    .addHeader(\"Content-Type\", \"application/x-www-form-urlencoded\")\n    .addHeader(\"Authorization\",\"Bearer {{TOKEN}}\")\n    .build();\n    try {\n      ResponseBody responseBody = client.newCall(request).execute().body();\n      System.out.println(responseBody.string());\n    } catch (IOException e) {\n      System.out.println(e.getMessage());\n    }\n  }\n}\n"
          },
          {
            "lang": "NodeJs",
            "source": "const axios = require('axios');\nlet config = {\n  headers: {\n    \"Content-Type\": \"application/x-www-form-urlencoded\",\n    \"Authorization\": \"Bearer {{TOKEN}}\",\n  },\n}\naxios.get('https://api.kroger.com/v1/partner/catalog/products',config)\n.then(response => {\n    console.log(response);\n})\n.catch(error => {\n    console.log(error);\n});\n"
          }
        ]
      }
    },
    "/connect/oauth2/authorize": {
      "get": {
        "tags": [
          "OAuth2"
        ],
        "summary": "Authorization Code",
        "description": "The redirect URL to authenticate a customer and receive an authorization code.",
        "operationId": "authorizationCode",
        "parameters": [
          {
            "name": "scope",
            "in": "query",
            "description": "The level of access your application is requesting.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "profile.name",
                "profile.basic",
                "profile.loyalty",
                "profile.full",
                "product.personalized",
                "cart.basic",
                "cart.basic:rw"
              ]
            }
          },
          {
            "name": "client_id",
            "in": "query",
            "description": "Your application's client ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirect_uri",
            "in": "query",
            "description": "Your registered redirect URL. The redirect URL is used by the server to redirect the web browser with the authorization  code once the customer has given consent.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "response_type",
            "in": "query",
            "description": "Is always `code`.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "A random string to verify that the response belongs to the initiated  request. The server should always return the same state as the one specified in  the request to protect against forgery attacks.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "301": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/oauth2.codeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Invalid_scope"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_grant_type"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_redirect_uri"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_access"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_credentials"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.auth.serverError"
                }
              }
            }
          }
        },
        "security": [
          {
            "CustomerContext": [
              "profile.name",
              "profile.basic",
              "profile.loyalty",
              "profile.full",
              "product.personalized",
              "cart.basic",
              "cart.basic:rw"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "html",
            "source": "https://api.kroger.com/v1/connect/oauth2/authorize?scope={{SCOPES}}&response_type=code&client_id={{CLIENT_ID}}&redirect_uri={{REDIRECT_URI}}\n"
          }
        ]
      }
    },
    "/connect/oauth2/token": {
      "post": {
        "tags": [
          "OAuth2"
        ],
        "summary": "Access Token",
        "description": "The OAuth2 endpoint that provides access tokens.",
        "operationId": "accessToken",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Your `client_id:client_secret` base64 encoded.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/client_credentials"
                  },
                  {
                    "$ref": "#/components/schemas/authorization_code"
                  },
                  {
                    "$ref": "#/components/schemas/refresh_token"
                  }
                ],
                "discriminator": {
                  "propertyName": "grant_type"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/client_credentialsResponse"
                    },
                    {
                      "$ref": "#/components/schemas/authorization_codeResponse"
                    },
                    {
                      "$ref": "#/components/schemas/refresh_tokenResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Invalid_code"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_scope"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_grant_type"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_refresh_token"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_credentials"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.auth.serverError"
                }
              }
            }
          }
        },
        "security": [
          {
            "CustomerContext": [
              "profile.name",
              "profile.basic",
              "profile.full",
              "profile.loyalty",
              "product.basic",
              "product.personalized",
              "cart.basic",
              "cart.basic:rw"
            ]
          },
          {
            "ClientContext": [
              "profile.exists",
              "product.basic",
              "delivery.basic",
              "delivery.basic:rw"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl -X POST \\\n  'https://api.kroger.com/v1/connect/oauth2/token' \\\n  -H 'Content-Type: application/x-www-form-urlencoded' \\\n  -H 'Authorization: Basic {{base64(“CLIENT_ID:CLIENT_SECRET”)}}' \\\n  -d 'grant_type=client_credentials&scope={{SCOPE}}'\n"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.kroger.com/v1/connect/oauth2/token\"\n\n  payload := strings.NewReader(\"grant_type=client_credentials&scope={{SCOPE}}\")\n\n  req, _ := http.NewRequest(\"POST\", url, payload)\n\n  req.Header.Add(\"Content-Type\", \"application/x-www-form-urlencoded\")\n  req.Header.Add(\"Authorization\", \"Basic {{base64(“CLIENT_ID:CLIENT_SECRET”)}}\")\n\n  res, _ := http.DefaultClient.Do(req)\n\n  defer res.Body.Close()\n  body, _ := ioutil.ReadAll(res.Body)\n\n  fmt.Println(res)\n  fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.kroger.com/v1/connect/oauth2/token\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"Content-Type\": \"application/x-www-form-urlencoded\",\n    \"Authorization\": \"Basic {{base64(“CLIENT_ID:CLIENT_SECRET”)}}\"\n  },\n  \"data\": {\n    \"grant_type\": \"client_credentials\",\n    \"scope\": \"{{scope}}\"\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/x-www-form-urlencoded\");\nRequestBody body = RequestBody.create(mediaType, \"grant_type=client_credentials&scope={{SCOPE}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.kroger.com/v1/connect/oauth2/token\")\n  .post(body)\n  .addHeader(\"Content-Type\", \"application/x-www-form-urlencoded\")\n  .addHeader(\"Authorization\", \"Basic {{base64(“CLIENT_ID:CLIENT_SECRET”)}}\")\n  .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ]
      }
    },
    "/identity/profile": {
      "get": {
        "tags": [
          "Identity"
        ],
        "summary": "Profile information",
        "description": "Provides access to an authenticated customer's profile information. \n<br><br> **Note**: the customer must be authenticated using the OAuth2 Authorization \nCode grant type.\n",
        "operationId": "profileGet",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/identity.profileModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.notFound"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.identity.serverError"
                }
              }
            }
          }
        },
        "security": [
          {
            "CustomerContext": [
              "profile.name",
              "profile.basic",
              "profile.full",
              "profile.loyalty"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl -X GET \\\n  'https://api.kroger.com/v1/identity/profile' \\\n  -H 'Accept: application/json' \\\n  -H 'Authorization: Bearer {{TOKEN}}'\n"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.kroger.com/v1/identity/profile\"\n\n  req, _ := http.NewRequest(\"GET\", url, nil)\n\n  req.Header.Add(\"Accept\", \"application/json\")\n  req.Header.Add(\"Authorization\", \"Bearer {{TOKEN}}\")\n\n  res, _ := http.DefaultClient.Do(req)\n\n  defer res.Body.Close()\n  body, _ := ioutil.ReadAll(res.Body)\n\n  fmt.Println(res)\n  fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.kroger.com/v1/identity/profile\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"Accept\": \"application/json\",\n    \"Authorization\": \"Bearer {{TOKEN}}\"\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.kroger.com/v1/identity/profile\")\n  .get()\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer {{TOKEN}}\")\n  .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ]
      },
      "head": {
        "tags": [
          "Identity"
        ],
        "summary": "Profile query",
        "description": "Determine if a customer's profile exists by using their email address.",
        "operationId": "ProfileExists",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "The customer's email address.",
            "example": "noreply@kroger.com",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.noContent"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/APIError"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_email"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.notFound"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.identity.serverError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ClientContext": [
              "profile.exists"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl -X HEAD \\\n  'https://api.kroger.com/v1/identity/profile?{{EMAIL}}' \\\n  -H 'Accept: application/json' \\\n  -H 'Authorization: Bearer {{TOKEN}}'\n"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.kroger.com/v1/identity/profile?email={{EMAIL}}\"\n\n  req, _ := http.NewRequest(\"HEAD\", url, nil)\n\n  req.Header.Add(\"Accept\", \"application/json\")\n  req.Header.Add(\"Authorization\", \"Bearer {{TOKEN}}\")\n\n  res, _ := http.DefaultClient.Do(req)\n\n  defer res.Body.Close()\n  body, _ := ioutil.ReadAll(res.Body)\n\n  fmt.Println(res)\n  fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.kroger.com/v1/identity/profile?email={{EMAIL}}\",\n  \"method\": \"HEAD\",\n  \"headers\": {\n    \"Accept\": \"application/json\",\n    \"Authorization\": \"Bearer {{TOKEN}}\"\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.kroger.com/v1/identity/profile?email={{EMAIL}}\")\n  .head()\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer {{TOKEN}}\")\n  .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ]
      }
    },
    "/identity/profile/loyalty": {
      "get": {
        "tags": [
          "Identity"
        ],
        "summary": "Profile loyalty information",
        "description": "Provides access to an authenticated customer's loyalty information. \n<br><br> **Note**: the customer must be authenticated using the OAuth2 Authorization \nCode grant type.\n",
        "operationId": "profileLoyaltyGet",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/identity.profileLoyaltyResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.notFound"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.identity.serverError"
                }
              }
            }
          }
        },
        "security": [
          {
            "CustomerContext": [
              "profile.loyalty"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl -X GET \\\n  'https://api.kroger.com/v1/identity/profile/loyalty' \\\n  -H 'Accept: application/json' \\\n  -H 'Authorization: Bearer {{TOKEN}}'\n"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.kroger.com/v1/identity/profile/loyalty\"\n\n  req, _ := http.NewRequest(\"GET\", url, nil)\n\n  req.Header.Add(\"Accept\", \"application/json\")\n  req.Header.Add(\"Authorization\", \"Bearer {{TOKEN}}\")\n\n  res, _ := http.DefaultClient.Do(req)\n\n  defer res.Body.Close()\n  body, _ := ioutil.ReadAll(res.Body)\n\n  fmt.Println(res)\n  fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.kroger.com/v1/identity/profile/loyalty\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"Accept\": \"application/json\",\n    \"Authorization\": \"Bearer {{TOKEN}}\"\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.kroger.com/v1/identity/profile/loyalty\")\n  .get()\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer {{TOKEN}}\")\n  .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ]
      }
    },
    "/identity/profile/invoke/exists": {
      "get": {
        "tags": [
          "Identity"
        ],
        "summary": "Profile query",
        "description": "Determine if a customer's profile exists by using their \nemail address.\n",
        "operationId": "ProfileInvokeExists",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "The customer's email address.",
            "example": "noreply@kroger.com",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.noContent"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/APIError"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_email"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.notFound"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.identity.serverError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ClientContext": [
              "profile.exists"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl -X GET \\\n  'https://api.kroger.com/v1/identity/profile/invoke/exists?email={{EMAIL}}' \\\n  -H 'Accept: application/json' \\\n  -H 'Authorization: Bearer {{TOKEN}}' \n"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.kroger.com/v1/identity/profile/invoke/exists?email={{EMAIL}}\"\n\n  req, _ := http.NewRequest(\"GET\", url, nil)\n\n  req.Header.Add(\"Accept\", \"application/json\")\n  req.Header.Add(\"Authorization\", \"Bearer {{TOKEN}}\")\n\n  res, _ := http.DefaultClient.Do(req)\n\n  defer res.Body.Close()\n  body, _ := ioutil.ReadAll(res.Body)\n\n  fmt.Println(res)\n  fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.kroger.com/v1/identity/profile/invoke/exists?email={{EMAIL}}\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"Accept\": \"application/json\",\n    \"Authorization\": \"Bearer {{TOKEN}}\"\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.kroger.com/v1/identity/profile/invoke/exists?email={{EMAIL}}\")\n  .get()\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer {{TOKEN}}\")\n  .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ]
      }
    },
    "/products": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Product search",
        "description": "Allows you to find products by passing in either a search term or product Id.\n\n### Initial Search Value Required\n\nAn initial search value is requred for all requests. You can use either of the following parameters as an initial search value: \n\n`filter.term` - When using the term parameter, the API performs a fuzzy search based on the term provided in the string. Search results are based on how relevant the term is to the product description.\n\n`filter.brand` - When using the brand parameter, the API performs a search based on the brand provided in the string. Search results only contain products that match the brand queried for.\n\n`filter.productId` - When using the productId parameter, the API performs a query to find an exact match.  \n",
        "operationId": "productGet",
        "parameters": [
          {
            "name": "filter.term",
            "in": "query",
            "description": "A search term to filter product results. As an example, you could input _milk_, _bread_, or _salt_. <br><br><b>Note</b> - Search terms are limited to a maximum of 8 words. Each new space in the search term denotes a new word.",
            "example": "milk",
            "schema": {
              "minLength": 3,
              "type": "string"
            }
          },
          {
            "name": "filter.locationId",
            "in": "query",
            "description": "The locationId of the location. When using this filter, only products available at that location are returned.",
            "example": "01400943",
            "schema": {
              "maxLength": 8,
              "minLength": 8,
              "type": "string"
            }
          },
          {
            "name": "filter.productId",
            "in": "query",
            "description": "The productId of the products(s) to return. For more than one item, the list must be comma-separated. When used, all other query parameters are ignored.",
            "example": "0001111060903",
            "schema": {
              "maxLength": 13,
              "minLength": 13,
              "type": "string",
              "maximum": 50
            }
          },
          {
            "name": "filter.brand",
            "in": "query",
            "description": "The brand name of the products to return. When using this filter, only products by that brand are returned. Brand names are case-sensitive, and lists must be pipe-separated.",
            "example": "Kroger",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.fulfillment",
            "in": "query",
            "description": "The available fulfillment types of the product(s) to return. Fulfillment types are case-sensitive, and lists must be comma-separated. Must be one or more of the follow types: <ul> <li> `ais` - Available In Store</li> <li> `csp` - Curbside Pickup</li> <li> `dth` - Delivery To Home</li> <li> `sth` - Ship To Home</li> </ui>",
            "schema": {
              "type": "string",
              "enum": [
                "ais",
                "csp",
                "dth",
                "sth"
              ]
            }
          },
          {
            "name": "filter.start",
            "in": "query",
            "description": "The number of products to skip.",
            "schema": {
              "maximum": 1000,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "filter.limit",
            "in": "query",
            "description": "The number of products to return.",
            "schema": {
              "maximum": 50,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/products.productsPayloadModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/APIError"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_locationId"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_parameter"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_limit"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.forbidden"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.products.serverError"
                }
              }
            }
          }
        },
        "security": [
          {
            "CustomerContext": [
              "product.personalized",
              "product.basic"
            ]
          },
          {
            "ClientContext": [
              "product.basic"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl -X GET \\\n  'https://api.kroger.com/v1/products?filter.brand={{BRAND}}&filter.term={{TERM}}&filter.locationId={{LOCATION_ID}}' \\\n  -H 'Accept: application/json' \\\n  -H 'Authorization: Bearer {{TOKEN}}'\n"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.kroger.com/v1/products?filter.brand={{BRAND}}&filter.term={{TERM}}&filter.locationId={{LOCATION_ID}}\"\n\n  req, _ := http.NewRequest(\"GET\", url, nil)\n\n  req.Header.Add(\"Accept\", \"application/json\")\n  req.Header.Add(\"Authorization\", \"Bearer {{TOKEN}}\")\n\n  res, _ := http.DefaultClient.Do(req)\n\n  defer res.Body.Close()\n  body, _ := ioutil.ReadAll(res.Body)\n\n  fmt.Println(res)\n  fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.kroger.com/v1/products?filter.brand={{BRAND}}&filter.term={{TERM}}&filter.locationId={{LOCATION_ID}}\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"Accept\": \"application/json\",\n    \"Authorization\": \"Bearer {{TOKEN}}\"\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.kroger.com/v1/products?filter.brand={{BRAND}}&filter.term={{TERM}}&filter.locationId={{LOCATION_ID}}\")\n  .get()\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer {{TOKEN}}\")\n  .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ]
      }
    },
    "/products/{id}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Product details",
        "description": "Provides access to the details of a specific product by either using the `productId` or `UPC`. To return the product price, availability, and aisle location, you must include the `filter.locationId` query parameter.",
        "operationId": "productGetID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/productId"
                },
                {
                  "$ref": "#/components/schemas/UPC"
                }
              ]
            }
          },
          {
            "name": "filter.locationId",
            "in": "query",
            "description": "The locationId of the location. When using this filter, only products available at that location are returned.",
            "example": "01400943",
            "schema": {
              "maxLength": 8,
              "minLength": 8,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/products.productPayloadModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/APIError"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_locationId"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_UPC"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.forbidden"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.products.serverError"
                }
              }
            }
          }
        },
        "security": [
          {
            "CustomerContext": [
              "product.personalized",
              "product.basic"
            ]
          },
          {
            "ClientContext": [
              "product.basic"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl -X GET \\\n  'https://api.kroger.com/v1/products/{{ID}}?filter.locationId={{LOCATION_ID}}' \\\n  -H 'Accept: application/json' \\\n  -H 'Authorization: Bearer {{TOKEN}}'\n"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.kroger.com/v1/products/{{ID}}?filter.locationId={{LOCATION_ID}}\"\n\n  req, _ := http.NewRequest(\"GET\", url, nil)\n\n  req.Header.Add(\"Accept\", \"application/json\")\n  req.Header.Add(\"Authorization\", \"Bearer {{TOKEN}}\")\n\n  res, _ := http.DefaultClient.Do(req)\n\n  defer res.Body.Close()\n  body, _ := ioutil.ReadAll(res.Body)\n\n  fmt.Println(res)\n  fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.kroger.com/v1/products/{{ID}}?filter.locationId={{LOCATION_ID}}\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"Accept\": \"application/json\",\n    \"Authorization\": \"Bearer {{TOKEN}}\"\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.kroger.com/v1/products/{{ID}}?filter.locationId={{LOCATION_ID}}\")\n  .get()\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer {{TOKEN}}\")\n  .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ]
      }
    },
    "/carts": {
      "get": {
        "tags": [
          "Carts"
        ],
        "summary": "User carts list",
        "description": "Provides access to return a list of all carts that belong to an authenticated customer.\n<br><br> **Note**: the customer must be authenticated using the OAuth2 Authorization \nCode grant type.\n",
        "operationId": "getCarts",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/carts.cartsPayloadModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.forbidden"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.cart.serverError"
                }
              }
            }
          }
        },
        "security": [
          {
            "CustomerContext": [
              "cart.basic"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl -X GET \\\n  'https://api.kroger.com/v1/carts' \\\n  -H 'Accept: application/json' \\\n  -H 'Authorization: Bearer {{TOKEN}}'\n"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.kroger.com/v1/carts\"\n\n  req, _ := http.NewRequest(\"GET\", url, nil)\n\n  req.Header.Add(\"Accept\", \"application/json\")\n  req.Header.Add(\"Authorization\", \"Bearer {{TOKEN}}\")\n\n  res, _ := http.DefaultClient.Do(req)\n\n  defer res.Body.Close()\n  body, _ := ioutil.ReadAll(res.Body)\n\n  fmt.Println(res)\n  fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.kroger.com/v1/carts\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"Accept\": \"application/json\",\n    \"Authorization\": \"Bearer {{TOKEN}}\"\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.kroger.com/v1/carts\")\n  .get()\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer {{TOKEN}}\")\n  .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Carts"
        ],
        "summary": "Create a cart",
        "description": "Provides access to create a new cart for an authenticated customer.\n<br><br> **Note**: the customer must be authenticated using the OAuth2 Authorization \nCode grant type.\n",
        "operationId": "createCart",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/carts.cartRequestModel"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/carts.cartsPayloadModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/APIError"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_cart_exists"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_parameters"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_UPC"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_modality"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.forbidden"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.cart.serverError"
                }
              }
            }
          }
        },
        "security": [
          {
            "CustomerContext": [
              "cart.basic:rw"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl -X POST \\\n  'https://api.kroger.com/v1/carts' \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer {{TOKEN}}' \\\n  -d '{\n    \"items\": [\n        {\n            \"upc\": \"0001111041700\",\n            \"quantity\" : 1,\n            \"allowSubstitutes\" : true\n            \"specialInstructions\" : \"Bag separate from other groceries.\",\n            \"modality\":\"PICKUP\"\n        }\n    ]\n}\n"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.kroger.com/v1/carts\"\n\n  payload := strings.NewReader(\"{\\n    \\\"items\\\": [\\n        {\\n             \\\"upc\\\": \\\"0001111041700\\\",\\n             \\\"quantity\\\" : 1,\\n             \\\"allowSubstitutes\\\" : true\\n             \\\"specialInstructions\\\" : \\\"Bag separate from other groceries.\\\",\\n            \\\"modality\\\":\\\"PICKUP\\\"\\n        }\\n    ]\\n}\")\n\n  req, _ := http.NewRequest(\"POST\", url, payload)\n\n  req.Header.Add(\"Content-Type\", \"application/json\")\n  req.Header.Add(\"Authorization\", \"Bearer {{TOKEN}}\")\n\n  res, _ := http.DefaultClient.Do(req)\n\n  defer res.Body.Close()\n  body, _ := ioutil.ReadAll(res.Body)\n\n  fmt.Println(res)\n  fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.kroger.com/v1/carts\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": \"Bearer {{TOKEN}}\"\n  },\n  \"data\": \"{\\n    \\\"items\\\": [\\n        {\\n             \\\"upc\\\": \\\"0001111041700\\\",\\n             \\\"quantity\\\" : 1,\\n             \\\"allowSubstitutes\\\" : true\\n             \\\"specialInstructions\\\" : \\\"Bag separate from other groceries.\\\",\\n            \\\"modality\\\":\\\"PICKUP\\\"\\n        }\\n    ]\\n}\"\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"items\\\": [\\n        {\\n             \\\"upc\\\": \\\"0001111041700\\\",\\n             \\\"quantity\\\" : 1,\\n             \\\"allowSubstitutes\\\" : true\\n             \\\"specialInstructions\\\" : \\\"Bag separate from other groceries.\\\",\\n            \\\"modality\\\":\\\"PICKUP\\\"\\n        }\\n    ]\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.kroger.com/v1/carts\")\n  .post(body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer {{TOKEN}}\")\n  .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ]
      }
    },
    "/carts/{id}": {
      "get": {
        "tags": [
          "Carts"
        ],
        "summary": "Cart by ID",
        "description": "Provides access to an authenticated customer's cart by ID.\n<br><br> **Note**: the customer must be authenticated using the OAuth2 Authorization \nCode grant type.\n",
        "operationId": "getCart",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID of the cart.",
              "example": "2b9b3963-5cac-42f8-9d28-7bebdec0b9e4"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/carts.cartPayloadModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.notFound"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.cart.serverError"
                }
              }
            }
          }
        },
        "security": [
          {
            "CustomerContext": [
              "cart.basic"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl -X GET \\\n  'https://api.kroger.com/v1/carts/{{ID}}' \\\n  -H 'Accept: application/json' \\\n  -H 'Authorization: Bearer {{TOKEN}}'\n"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.kroger.com/v1/carts/{{ID}}\"\n\n  req, _ := http.NewRequest(\"GET\", url, nil)\n\n  req.Header.Add(\"Accept\", \"application/json\")\n  req.Header.Add(\"Authorization\", \"Bearer {{TOKEN}}\")\n\n  res, _ := http.DefaultClient.Do(req)\n\n  defer res.Body.Close()\n  body, _ := ioutil.ReadAll(res.Body)\n\n  fmt.Println(res)\n  fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.kroger.com/v1/carts/{{ID}}\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"Accept\": \"application/json\",\n    \"Authorization\": \"Bearer {{TOKEN}}\"\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.kroger.com/v1/carts/{{ID}}\")\n  .get()\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer {{TOKEN}}\")\n  .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Carts"
        ],
        "summary": "Update cart",
        "description": "Provides access to update an authenticated customer's cart by ID. This operation only updates items that are already in a customer's cart.\n<br><br> **Note**: the customer must be authenticated using the OAuth2 Authorization \nCode grant type.\n",
        "operationId": "putCart",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The ID of the cart.",
              "example": "2b9b3963-5cac-42f8-9d28-7bebdec0b9e4"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/carts.cartRequestModel"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/carts.cartsPayloadModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/APIError"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_UPC"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_modality"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_parameters"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.notFound"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.cart.notfFulfillable"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.cart.serverError"
                }
              }
            }
          }
        },
        "security": [
          {
            "CustomerContext": [
              "cart.basic:rw"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl -X PUT \\\n  'https://api.kroger.com/v1/carts/{{ID}}' \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer {{TOKEN}}' \\\n  -d '{\n    \"items\": [\n        {\n            \"quantity\": 2,\n            \"upc\":  \"0004900005014\",\n            \"allowSubstitutes\" : true,\n            \"description\":\"\",\n            \"modality\":\"PICKUP\"\n        }\n  ]\n}\n"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.kroger.com/v1/carts/{{ID}}\"\n\n  payload := strings.NewReader(\"{\\n    \\\"items\\\": [\\n        {\\n            \\\"quantity\\\": 2,\\n            \\\"upc\\\":  \\\"0004900005014\\\",\\n            \\\"allowSubstitutes\\\" : true,\\n            \\\"description\\\":\\\"\\\",\\n            \\\"modality\\\":\\\"PICKUP\\\"\\n        }\\n   ]\\n}\")\n\n  req, _ := http.NewRequest(\"PUT\", url, payload)\n\n  req.Header.Add(\"Content-Type\", \"application/json\")\n  req.Header.Add(\"Authorization\", \"Bearer {{TOKEN}}\")\n\n  res, _ := http.DefaultClient.Do(req)\n\n  defer res.Body.Close()\n  body, _ := ioutil.ReadAll(res.Body)\n\n  fmt.Println(res)\n  fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.kroger.com/v1/carts/{{ID}}\",\n  \"method\": \"PUT\",\n  \"headers\": {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": \"Bearer {{TOKEN}}\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\n    \\\"items\\\": [\\n        {\\n            \\\"quantity\\\": 2,\\n            \\\"upc\\\":  \\\"0004900005014\\\",\\n            \\\"allowSubstitutes\\\" : true,\\n            \\\"description\\\":\\\"\\\",\\n            \\\"modality\\\":\\\"PICKUP\\\"\\n        }\\n   ]\\n}\"\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"items\\\": [\\n        {\\n            \\\"quantity\\\": 2,\\n            \\\"upc\\\":  \\\"0004900005014\\\",\\n            \\\"allowSubstitutes\\\" : true,\\n            \\\"description\\\":\\\"\\\",\\n            \\\"modality\\\":\\\"PICKUP\\\"\\n        }\\n   ]\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.kroger.com/v1/carts/{{ID}}\")\n  .put(body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer {{TOKEN}}\")\n  .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ]
      }
    },
    "/carts/{id}/items": {
      "post": {
        "tags": [
          "Carts"
        ],
        "summary": "Add to cart",
        "description": "Provides access to add items to an authenticated customer's cart.\n<br><br> **Note**: the customer must be authenticated using the OAuth2 Authorization \nCode grant type.\n",
        "operationId": "postCartItem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the cart.",
              "example": "2b9b3963-5cac-42f8-9d28-7bebdec0b9e4"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/carts.cartItemPostRequestModel"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/carts.cartsPayloadModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/APIError"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_UPC"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_modality"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_parameters"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.notFound"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.cart.notfFulfillable"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.cart.serverError"
                }
              }
            }
          }
        },
        "security": [
          {
            "CustomerContext": [
              "cart.basic:rw"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl -X POST \\\n  'https://api.kroger.com/v1/carts/{{ID}}/items' \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer {{TOKEN}}' \\\n  -d '{\n  \"quantity\": 3,\n    \"upc\": \"0004900005012\",\n    \"allowSubstitutes\" : true,\n    \"specialInstructions\" : \"add item\",\n    \"modality\":\"PICKUP\"\n}\n"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.kroger.com/v1/carts/{{ID}}/items\"\n\n  payload := strings.NewReader(\"{\\n\\t\\\"quantity\\\": 3,\\n    \\\"upc\\\": \\\"0004900005012\\\",\\n    \\\"allowSubstitutes\\\" : true,\\n    \\\"specialInstructions\\\" : \\\"add item\\\",\\n    \"modality\":\"PICKUP\"\n}\"\\n)\n\n  req, _ := http.NewRequest(\"POST\", url, payload)\n\n  req.Header.Add(\"Content-Type\", \"application/json\")\n  req.Header.Add(\"Authorization\", \"Bearer {{TOKEN}}\")\n\n  res, _ := http.DefaultClient.Do(req)\n\n  defer res.Body.Close()\n  body, _ := ioutil.ReadAll(res.Body)\n\n  fmt.Println(res)\n  fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.kroger.com/v1/carts/{{ID}}/items\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": \"Bearer {{TOKEN}}\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\n\\t\\\"quantity\\\": 3,\\n    \\\"upc\\\": \\\"0004900005012\\\",\\n    \\\"allowSubstitutes\\\" : true,\\n    \\\"specialInstructions\\\" : \\\"add item\\\",\\n    \\\"modality\\\":\\\"PICKUP\\\"\\n}\\\"\\n}\"\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n\\t\\\"quantity\\\": 3,\\n    \\\"upc\\\": \\\"0004900005012\\\",\\n    \\\"allowSubstitutes\\\" : true,\\n    \\\"specialInstructions\\\" : \\\"add item\\\",\\n    \\\"modality\\\":\\\"PICKUP\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.kroger.com/v1/carts/{{ID}}/items\")\n  .post(body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer {{TOKEN}}\")\n  .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ]
      }
    },
    "/carts/{id}/items/{upc}": {
      "put": {
        "tags": [
          "Carts"
        ],
        "summary": "Updates item quantity",
        "description": "Provides access to update the quantity of an item in an authenticated customer's cart.\n<br><br> **Note**: the customer must be authenticated using the OAuth2 Authorization \nCode grant type.\n",
        "operationId": "putCartItem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the cart.",
              "example": "2b9b3963-5cac-42f8-9d28-7bebdec0b9e4"
            }
          },
          {
            "name": "upc",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 13,
              "minLength": 13,
              "type": "string",
              "description": "The UPC of the item.",
              "example": "0001111041700"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/carts.cartItemPutRequestModel"
              }
            }
          },
          "required": false
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.noContent"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/APIError"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_UPC"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_modality"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_parameters"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.notFound"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.cart.notfFulfillable"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.cart.serverError"
                }
              }
            }
          }
        },
        "security": [
          {
            "CustomerContext": [
              "cart.basic:rw"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl -X PUT \\\n  'https://api.kroger.com/v1/carts/{{ID}}/items/{{UPC}}' \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer {{TOKEN}}' \\\n  -d '{\n  \"quantity\": 20\n}\n"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.kroger.com/v1/carts/{{ID}}/items/{{UPC}}\"\n\n  payload := strings.NewReader(\"{\\n  \\\"quantity\\\": 20\\n}\")\n\n  req, _ := http.NewRequest(\"PUT\", url, payload)\n\n  req.Header.Add(\"Content-Type\", \"application/json\")\n  req.Header.Add(\"Authorization\", \"Bearer {{TOKEN}}\")\n\n  res, _ := http.DefaultClient.Do(req)\n\n  defer res.Body.Close()\n  body, _ := ioutil.ReadAll(res.Body)\n\n  fmt.Println(res)\n  fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.kroger.com/v1/carts/{{ID}}/items/{{UPC}}\",\n  \"method\": \"PUT\",\n  \"headers\": {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": \"Bearer {{TOKEN}}\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\n  \\\"quantity\\\": 20\\n}\"\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n  \\\"quantity\\\": 20\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.kroger.com/v1/carts/{{ID}}/items/{{UPC}}\")\n  .put(body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer {{TOKEN}}\")\n  .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ]
      },
      "delete": {
        "tags": [
          "Carts"
        ],
        "summary": "Delete item",
        "description": "Provides access to delete an item from an authenticated customer's cart.\n<br><br> **Note**: the customer must be authenticated using the OAuth2 Authorization \nCode grant type.\n",
        "operationId": "deleteCartItem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the cart.",
              "example": "2b9b3963-5cac-42f8-9d28-7bebdec0b9e4"
            }
          },
          {
            "name": "upc",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 13,
              "minLength": 13,
              "type": "string",
              "description": "The UPC of the item.",
              "example": "0001111041700"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.noContent"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/APIError"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_UPC"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.notFound"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.cart.notfFulfillable"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.cart.serverError"
                }
              }
            }
          }
        },
        "security": [
          {
            "CustomerContext": [
              "cart.basic:rw"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl -X DELETE \\\n  'https://api.kroger.com/v1/carts/{{ID}}/items/{{UPC}}' \\\n  -H 'Authorization: Bearer {{TOKEN}}' \n"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.kroger.com/v1/carts/{{ID}}/items/{{UPC}}\"\n\n  req, _ := http.NewRequest(\"DELETE\", url, nil)\n\n  req.Header.Add(\"Authorization\", \"Bearer {{TOKEN}}\")\n\n  res, _ := http.DefaultClient.Do(req)\n\n  defer res.Body.Close()\n  body, _ := ioutil.ReadAll(res.Body)\n\n  fmt.Println(res)\n  fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.kroger.com/v1/carts/{{ID}}/items/{{UPC}}\",\n  \"method\": \"DELETE\",\n  \"headers\": {\n    \"\": \"\",\n    \"Authorization\": \"Bearer {{TOKEN}}\"\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.kroger.com/v1/carts/{{ID}}/items/{{UPC}}\")\n  .delete(null)\n  .addHeader(\"Authorization\", \"Bearer {{TOKEN}}\")\n  .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ]
      }
    },
    "/locations": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Location list",
        "description": "Provides access to a list of locations. If the parameter `filter.chain` is not provided, the results include all locations and chains owned by The Kroger Co.<br>You may include one of the following parameters to narrow search results within a geographic area:<br><br> <ul> <li> <code>filter.zipCode.near</code></li> <li> <code>filter.latLong.near</code></li> <li> <code>filter.lat.near</code> and <code>filter.lon.near</code></li> </ul>",
        "operationId": "SearchLocations",
        "parameters": [
          {
            "name": "filter.zipCode.near",
            "in": "query",
            "description": "The zip code to use as a starting point for results.",
            "example": 45044,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.latLong.near",
            "in": "query",
            "description": "The latitude and longitude to use as a starting point for results.",
            "example": "39.306346,-84.278902",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.lat.near",
            "in": "query",
            "description": "The latitude to use as a starting point for results.",
            "example": 39.306346,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.lon.near",
            "in": "query",
            "description": "The longitude to use as a starting point for results.",
            "example": -84.278902,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.radiusInMiles",
            "in": "query",
            "description": "The mile radius of results. This will be ignored if you do not use one of the 3 starting point filters (zipCode, latLong, or lat and lon)",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "filter.limit",
            "in": "query",
            "description": "The number of results to return.",
            "schema": {
              "maximum": 200,
              "minimum": 1,
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "filter.chain",
            "in": "query",
            "description": "The chain name of the chain. When using this filter, only stores matching the provided chain name are returned.",
            "example": "Kroger",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.department",
            "in": "query",
            "description": "The departmentId of the department. Lists must be comma-separated. When using this filter, only stores that have all of the departments provided are returned.",
            "example": 13,
            "schema": {
              "maxLength": 2,
              "minLength": 2,
              "type": "string"
            }
          },
          {
            "name": "filter.locationId",
            "in": "query",
            "description": "Comma-separated list of locationIds.",
            "example": "01400390",
            "schema": {
              "maxLength": 8,
              "minLength": 8,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/locations.locationSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/APIError"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_locationId"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_zipCode"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_latLong"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_radiusInMiles"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_limit"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_department"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.notFound"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.locations.serverError"
                }
              }
            }
          }
        },
        "security": [
          {
            "CustomerContext": [
              "N/A"
            ]
          },
          {
            "ClientContext": [
              "N/A"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl -X GET \\\n  'https://api.kroger.com/v1/locations' \\\n  -H 'Accept: application/json' \\\n  -H 'Authorization: Bearer {{TOKEN}}'\n"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.kroger.com/v1/locations\"\n\n  req, _ := http.NewRequest(\"GET\", url, nil)\n\n  req.Header.Add(\"Accept\", \"application/json\")\n  req.Header.Add(\"Authorization\", \"Bearer {{TOKEN}}\")\n\n  res, _ := http.DefaultClient.Do(req)\n\n  defer res.Body.Close()\n  body, _ := ioutil.ReadAll(res.Body)\n\n  fmt.Println(res)\n  fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.kroger.com/v1/locations\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"Accept\": \"application/json\",\n    \"Authorization\": \"Bearer {{TOKEN}}\"\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.kroger.com/v1/locations\")\n  .get()\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer {{TOKEN}}\")\n  .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ]
      }
    },
    "/locations/{locationId}": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Location details",
        "description": "Provides access to the details of a specific location by using the `locationId`.",
        "operationId": "LocationsGetByID",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "description": "The locationId of the store.",
            "example": "01400943",
            "required": true,
            "schema": {
              "maxLength": 8,
              "minLength": 8,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/locations.locationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/APIError"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_locationId"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.notFound"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.locations.serverError"
                }
              }
            }
          }
        },
        "security": [
          {
            "CustomerContext": [
              "N/A"
            ]
          },
          {
            "ClientContext": [
              "N/A"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl -X GET \\\n  'https://api.kroger.com/v1/locations/{{LOCATION_ID}}' \\\n  -H 'Accept: application/json' \\\n  -H 'Authorization: Bearer {{TOKEN}}' \n"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.kroger.com/v1/locations/{{LOCATION_ID}}\"\n\n  req, _ := http.NewRequest(\"GET\", url, nil)\n\n  req.Header.Add(\"Accept\", \"application/json\")\n  req.Header.Add(\"Authorization\", \"Bearer {{TOKEN}}\")\n\n  res, _ := http.DefaultClient.Do(req)\n\n  defer res.Body.Close()\n  body, _ := ioutil.ReadAll(res.Body)\n\n  fmt.Println(res)\n  fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.kroger.com/v1/locations/{{LOCATION_ID}}\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"Accept\": \"application/json\",\n    \"Authorization\": \"Bearer {{TOKEN}}\",\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.kroger.com/v1/locations/{{LOCAITON_ID}}\")\n  .get()\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer {{TOKEN}}\")\n  .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ]
      },
      "head": {
        "tags": [
          "Locations"
        ],
        "summary": "Location query",
        "description": "Determines if a specific location exists by using the `locationId`.",
        "operationId": "LocationsExistsByID",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "description": "The locationId of the store.",
            "example": "01400943",
            "required": true,
            "schema": {
              "maxLength": 8,
              "minLength": 8,
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.noContent"
                }
              }
            }
          },
          "400": {
            "description": "incorrect locationId format",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/APIError"
                    },
                    {
                      "$ref": "#/components/schemas/Invalid_locationId"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.notFound"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.locations.serverError"
                }
              }
            }
          }
        },
        "security": [
          {
            "CustomerContext": [
              "N/A"
            ]
          },
          {
            "ClientContext": [
              "N/A"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl -X HEAD \\\n  'https://api.kroger.com/v1/locations/{{LOCATION_ID}}' \\\n  -H 'Accept: application/json' \\\n  -H 'Authorization: Bearer {{TOKEN}}' \n"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.kroger.com/v1/locations/{{LOCATION_ID}}\"\n\n  req, _ := http.NewRequest(\"HEAD\", url, nil)\n\n  req.Header.Add(\"Accept\", \"application/json\")\n  req.Header.Add(\"Authorization\", \"Bearer {{TOKEN}}\")\n\n  res, _ := http.DefaultClient.Do(req)\n\n  defer res.Body.Close()\n  body, _ := ioutil.ReadAll(res.Body)\n\n  fmt.Println(res)\n  fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.kroger.com/v1/locations/{{LOCATION_ID}}\",\n  \"method\": \"HEAD\",\n  \"headers\": {\n    \"Accept\": \"application/json\",\n    \"Authorization\": \"Bearer {{TOKEN}}\",\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.kroger.com/v1/locations/{{LOCATION_ID}}\")\n  .head()\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer {{TOKEN}}\")\n  .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ]
      }
    },
    "/chains": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Chain list",
        "description": "Provides access to a list of all chains owned by The Kroger Co.",
        "operationId": "ListChains",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/locations.chainsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.unauthorized"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.locations.serverError"
                }
              }
            }
          }
        },
        "security": [
          {
            "CustomerContext": [
              "N/A"
            ]
          },
          {
            "ClientContext": [
              "N/A"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl -X GET \\\n  'https://api.kroger.com/v1/chains' \\\n  -H 'Accept: application/json' \\\n  -H 'Authorization: Bearer {{TOKEN}}'\n"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.kroger.com/v1/chains\"\n\n  req, _ := http.NewRequest(\"GET\", url, nil)\n\n  req.Header.Add(\"Accept\", \"application/json\")\n  req.Header.Add(\"Authorization\", \"Bearer {{TOKEN}}\")\n\n  res, _ := http.DefaultClient.Do(req)\n\n  defer res.Body.Close()\n  body, _ := ioutil.ReadAll(res.Body)\n\n  fmt.Println(res)\n  fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.kroger.com/v1/chains\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"Accept\": \"application/json\",\n    \"Authorization\": \"Bearer {{TOKEN}}\",\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.kroger.com/v1/chains\")\n  .get()\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer {{TOKEN}}\")\n  .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ]
      }
    },
    "/chains/{name}": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Chain details",
        "description": "Provides access to the details of a specific chian by using the chain `name`.",
        "operationId": "GetChain",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of a chain owned by The Kroger Co. <br><br> **Note**: the chain `name` is returned from the [/chains](#operation/ListChains) endpoint as `name` and from the [/locations](#operation/SearchLocations) endpoint as `chain`.",
            "example": "Kroger",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/locations.chainResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.notFound"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.locations.serverError"
                }
              }
            }
          }
        },
        "security": [
          {
            "CustomerContext": [
              "N/A"
            ]
          },
          {
            "ClientContext": [
              "N/A"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl -X GET \\\n  'https://api.kroger.com/v1/chains/{{NAME}}' \\\n  -H 'Accept: application/json' \\\n  -H 'Authorization: Bearer {{TOKEN}}' \n"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.kroger.com/v1/chains/{{NAME}}\"\n\n  req, _ := http.NewRequest(\"GET\", url, nil)\n\n  req.Header.Add(\"Accept\", \"application/json\")\n  req.Header.Add(\"Authorization\", \"Bearer {{TOKEN}}\")\n\n  res, _ := http.DefaultClient.Do(req)\n\n  defer res.Body.Close()\n  body, _ := ioutil.ReadAll(res.Body)\n\n  fmt.Println(res)\n  fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.kroger.com/v1/chains/{{NAME}}\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"Accept\": \"application/json\",\n    \"Authorization\": \"Bearer {{TOKEN}}\"\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.kroger.com/v1/chains/{{NAME}}\")\n  .get()\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer {{TOKEN}}\")\n  .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ]
      },
      "head": {
        "tags": [
          "Locations"
        ],
        "summary": "Chain query",
        "description": "Determine if a specific chain exists by using the chain `name`.",
        "operationId": "ChainExists",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of a chain owned by The Kroger Co. <br><br> **Note**: the chain `name` is returned from the [/chains](#operation/ListChains) endpoint as `name` and from the [/locations](#operation/SearchLocations) endpoint as `chain`.",
            "example": "Kroger",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.noContent"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.notFound"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.locations.serverError"
                }
              }
            }
          }
        },
        "security": [
          {
            "CustomerContext": [
              "N/A"
            ]
          },
          {
            "ClientContext": [
              "N/A"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl -X HEAD \\\n  'https://api.kroger.com/v1/chains/{{NAME}}' \\\n  -H 'Accept: application/json' \\\n  -H 'Authorization: Bearer {{TOKEN}}' \n"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.kroger.com/v1/chains/{{NAME}}\"\n\n  req, _ := http.NewRequest(\"HEAD\", url, nil)\n\n  req.Header.Add(\"Accept\", \"application/json\")\n  req.Header.Add(\"Authorization\", \"Bearer {{TOKEN}}\")\n\n  res, _ := http.DefaultClient.Do(req)\n\n  defer res.Body.Close()\n  body, _ := ioutil.ReadAll(res.Body)\n\n  fmt.Println(res)\n  fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.kroger.com/v1/chains/{{NAME}}\",\n  \"method\": \"HEAD\",\n  \"headers\": {\n    \"Accept\": \"application/json\",\n    \"Authorization\": \"Bearer {{TOKEN}}\"\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.kroger.com/v1/chains/{{NAME}}\")\n  .head()\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer {{TOKEN}}\")\n  .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ]
      }
    },
    "/departments": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Department list",
        "description": "Provides access to a list of all departments, including departments of chains owned by The Kroger Co.",
        "operationId": "ListDepartments",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/locations.departmentsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.unauthorized"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.locations.serverError"
                }
              }
            }
          }
        },
        "security": [
          {
            "CustomerContext": [
              "N/A"
            ]
          },
          {
            "ClientContext": [
              "N/A"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl -X GET \\\n  'https://api.kroger.com/v1/departments' \\\n  -H 'Accept: application/json' \\\n  -H 'Authorization: Bearer {{TOKEN}}'\n"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.kroger.com/v1/departments\"\n\n  req, _ := http.NewRequest(\"GET\", url, nil)\n\n  req.Header.Add(\"Accept\", \"application/json\")\n  req.Header.Add(\"Authorization\", \"Bearer {{TOKEN}}\")\n\n  res, _ := http.DefaultClient.Do(req)\n\n  defer res.Body.Close()\n  body, _ := ioutil.ReadAll(res.Body)\n\n  fmt.Println(res)\n  fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.kroger.com/v1/departments\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"Accept\": \"application/json\",\n    \"Authorization\": \"Bearer {{TOKEN}}\"\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.kroger.com/v1/departments\")\n  .get()\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"X-Correlation-ID\", \"4cbcad8a-597e-4d42-a9f7-c88e53f430db\")\n  .addHeader(\"Authorization\", \"Bearer {{TOKEN}}\")\n  .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ]
      }
    },
    "/departments/{id}": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Department details",
        "description": "Provides access to the details of a specific department by using the `departmentId`. ",
        "operationId": "GetDepartment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The departmentId of the department to return.",
            "example": 13,
            "required": true,
            "schema": {
              "maxLength": 2,
              "minLength": 2,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/locations.departmentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.departmentsId.badRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.notFound"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.locations.serverError"
                }
              }
            }
          }
        },
        "security": [
          {
            "CustomerContext": [
              "N/A"
            ]
          },
          {
            "ClientContext": [
              "N/A"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl -X GET \\\n  'https://api.kroger.com/v1/departments/{{DEPARTMENTID}}' \\\n  -H 'Accept: application/json' \\\n  -H 'Authorization: Bearer {{TOKEN}}'\n"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.kroger.com/v1/departments/{{DEPARTMENTID}}\"\n\n  req, _ := http.NewRequest(\"GET\", url, nil)\n\n  req.Header.Add(\"Accept\", \"application/json\")\n  req.Header.Add(\"Authorization\", \"Bearer {{TOKEN}}\")\n\n  res, _ := http.DefaultClient.Do(req)\n\n  defer res.Body.Close()\n  body, _ := ioutil.ReadAll(res.Body)\n\n  fmt.Println(res)\n  fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.kroger.com/v1/departments/{{DEPARTMENTID}}\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"Accept\": \"application/json\",\n    \"Authorization\": \"Bearer {{TOKEN}}\"\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.kroger.com/v1/departments/{{DEPARTMENTID}}\")\n  .get()\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer {{TOKEN}}\")\n  .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ]
      },
      "head": {
        "tags": [
          "Locations"
        ],
        "summary": "Department query",
        "description": "Determine if a specific department exists by using the `departmentId`.",
        "operationId": "DepartmentExists",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The departmentId of the department to return.",
            "example": 13,
            "required": true,
            "schema": {
              "maxLength": 2,
              "minLength": 2,
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.noContent"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/APIError.departmentsId.badRequest"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.notFound"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.locations.serverError"
                }
              }
            }
          }
        },
        "security": [
          {
            "CustomerContext": [
              "N/A"
            ]
          },
          {
            "ClientContext": [
              "N/A"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl -X HEAD \\\n  'https://api.kroger.com/v1/departments/{{DEPARTMENTID}}' \\\n  -H 'Accept: application/json' \\\n  -H 'Authorization: Bearer {{TOKEN}}'\n"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.kroger.com/v1/departments/{{DEPARTMENTID}}\"\n\n  req, _ := http.NewRequest(\"HEAD\", url, nil)\n\n  req.Header.Add(\"Accept\", \"application/json\")\n  req.Header.Add(\"Authorization\", \"Bearer {{TOKEN}}\")\n\n  res, _ := http.DefaultClient.Do(req)\n\n  defer res.Body.Close()\n  body, _ := ioutil.ReadAll(res.Body)\n\n  fmt.Println(res)\n  fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.kroger.com/v1/departments/{{DEPARTMENTID}}\",\n  \"method\": \"HEAD\",\n  \"headers\": {\n    \"Accept\": \"application/json\",\n    \"Authorization\": \"Bearer {{TOKEN}}\"\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.kroger.com/v1/departments/{{DEPARTMENTID}}\")\n  .head()\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer {{TOKEN}}\")\n  .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ]
      }
    },
    "/courier/deliveries": {
      "get": {
        "tags": [
          "Deliveries"
        ],
        "summary": "Get deliveries",
        "description": "Provides access to a list of available deliveries for courier confirmation.  \nYou can use one of the optional `filter.followingAction` query parameter to filter deliveries:\n* `CONFIRM` -  For deliveries in pending confirmation.\n* `CONFIRM_EDITING` - For deliveries with pending edited that are not confirmed.\n* `CONFIRM_CANCELLATION` -  For deliveries in canceled by Kroger that are not confirmed.\n",
        "operationId": "getDeliveriesUsingGET",
        "parameters": [
          {
            "name": "filter.followingAction",
            "in": "query",
            "description": "The next action that should be taken for a delivery.",
            "schema": {
              "type": "string",
              "default": "CONFIRM",
              "enum": [
                "CONFIRM",
                "CONFIRM_CANCELLATION",
                "CONFIRM_EDITING"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/deliveries.deliveriesResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/deliveries.deliveriesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.forbidden"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.deliveries.serverError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ClientContext": [
              "delivery.basic",
              "delivery.basic:rw"
            ]
          },
          {
            "CustomerContext": [
              "delivery.basic",
              "delivery.basic:rw"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl -X GET \\\n  'https://api.kroger.com/v1/courier/deliveries' \\\n  -H 'Accept: application/json' \\\n  -H 'Authorization: Bearer {{TOKEN}}'\n"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.kroger.com/v1/courier/deliveries\"\n\n  req, _ := http.NewRequest(\"GET\", url, nil)\n\n  req.Header.Add(\"Accept\", \"application/json\")\n  req.Header.Add(\"Authorization\", \"Bearer {{TOKEN}}\")\n\n  res, _ := http.DefaultClient.Do(req)\n\n  defer res.Body.Close()\n  body, _ := ioutil.ReadAll(res.Body)\n\n  fmt.Println(res)\n  fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.kroger.com/v1/courier/deliveries\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"Accept\": \"application/json\",\n    \"Authorization\": \"Bearer {{TOKEN}}\"\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.kroger.com/v1/courier/deliveries\")\n  .get()\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer {{TOKEN}}\")\n  .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ]
      }
    },
    "/courier/deliveries/non-delivered": {
      "get": {
        "tags": [
          "Deliveries"
        ],
        "summary": "Get non-delivered",
        "description": "Provides access to a list of outstanding deliveries. <br><br>Deliveries are considered\noutstanding when in the following states: \n* `PendingConfirmation` \n* `Scheduled` \n* `NotConfirmed`\n* `Edited`\n* `EditsNotConfirmed`\n* `EnRouteToPickup`\n* `AtPickup`\n* `PickedUp` \n* `EnRouteToDropoff`\n",
        "operationId": "getNonDeliveredByPartnerUsingGET",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/deliveries.deliveriesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.forbidden"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.deliveries.serverError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ClientContext": [
              "delivery.basic"
            ]
          },
          {
            "CustomerContext": [
              "delivery.basic"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl -X GET \\\n  'https://api.kroger.com/v1/courier/deliveries/non-delivered' \\\n  -H 'Accept: application/json' \\\n  -H 'Authorization: Bearer {{TOKEN}}'\n"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.kroger.com/v1/courier/deliveries/non-delivered\"\n\n  req, _ := http.NewRequest(\"GET\", url, nil)\n\n  req.Header.Add(\"Accept\", \"application/json\")\n  req.Header.Add(\"Authorization\", \"Bearer {{TOKEN}}\")\n\n  res, _ := http.DefaultClient.Do(req)\n\n  defer res.Body.Close()\n  body, _ := ioutil.ReadAll(res.Body)\n\n  fmt.Println(res)\n  fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.kroger.com/v1/courier/deliveries/non-delivered\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"Accept\": \"application/json\",\n    \"Authorization\": \"Bearer {{TOKEN}}\"\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.kroger.com/v1/courier/deliveries/non-delivered\")\n  .get()\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer {{TOKEN}}\")\n  .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ]
      }
    },
    "/courier/deliveries/{delivery_id}": {
      "post": {
        "tags": [
          "Deliveries"
        ],
        "summary": "Update delivery",
        "description": "Provides access to update a delivery status. The `action` parameter\nis required in the body for each update. <br><br>The payload parameter is only required\nwith the following actions:\n* `CONFIRM`\n* `CONFIRM_EDITING`\n* `CANCEL`\n* `EN_ROUTE_TO_PICK_UP`\n",
        "operationId": "updateUsingPOST",
        "parameters": [
          {
            "name": "delivery_id",
            "in": "path",
            "description": "A unique delivery ID.",
            "example": "c6627fe6-5e39-41f5-b83c-5d586f7d034b",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The Action/Payload data structure for updating deliveries.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/deliveries.deliveryUpdateModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/deliveries.deliveryResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/deliveries.deliveryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.notFound"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError.deliveries.serverError"
                }
              }
            }
          }
        },
        "security": [
          {
            "ClientContext": [
              "delivery.basic",
              "delivery.basic:rw"
            ]
          },
          {
            "CustomerContext": [
              "delivery.basic",
              "delivery.basic:rw"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl -X POST \\\n  'https://api.kroger.com/v1/courier/deliveries/{id}?delivery_id={{DELIVERY_ID}}' \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer {{TOKEN}}' \\\n  -d '{\n  \"action\": \"CONFIRM\",\n  \"payload\": {\n    \"cancellationNote\": \"Car issues.\",\n    \"driver\": {\n      \"firstName\": \"John\",\n      \"lastName\": \"Doe\",\n      \"vehicle\": {\n        \"licensePlate\": \"ABC123\",\n        \"year\": \"2018\",\n        \"model\": \"Challenger\",\n        \"make\": \"Dodge\"\n      }\n    },\n    \"dropoffEta\": {\n      \"timezone\": \"America/New_York\",\n      \"value\": \"2018-02-17T12:00Z\"\n    },\n    \"pickupEta\": {\n      \"timezone\": \"America/New_York\",\n      \"value\": \"2018-02-17T12:00Z\"\n    },\n    \"trackingUrl\": \"https://trackingurl.com\"\n  }\n}\n"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.kroger.com/v1/courier/deliveries/{id}?delivery_id={{DELIVERY_ID}}\"\n\n  payload := strings.NewReader(\"{\\n  \\\"action\\\": \\\"CONFIRM\\\",\\n  \\\"payload\\\": {\\n    \\\"cancellationNote\\\": \\\"Car issues.\\\",\\n    \\\"driver\\\": {\\n      \\\"firstName\\\": \\\"John\\\",\\n      \\\"lastName\\\": \\\"Doe\\\",\\n      \\\"vehicle\\\": {\\n        \\\"licensePlate\\\": \\\"ABC123\\\",\\n        \\\"year\\\": \\\"2018\\\",\\n        \\\"model\\\": \\\"Challenger\\\",\\n        \\\"make\\\": \\\"Dodge\\\"\\n      }\\n    },\\n    \\\"dropoffEta\\\": {\\n      \\\"timezone\\\": \\\"America/New_York\\\",\\n      \\\"value\\\": \\\"2018-02-17T12:00Z\\\"\\n    },\\n    \\\"pickupEta\\\": {\\n      \\\"timezone\\\": \\\"America/New_York\\\",\\n      \\\"value\\\": \\\"2018-02-17T12:00Z\\\"\\n    },\\n    \\\"trackingUrl\\\": \\\"https://trackingurl.com\\\"\\n  }\\n}\")\n\n  req, _ := http.NewRequest(\"POST\", url, payload)\n\n  req.Header.Add(\"Authorization\", \"Bearer {{TOKEN}}\")\n  req.Header.Add(\"Content-Type\", \"application/json\")\n\n  res, _ := http.DefaultClient.Do(req)\n\n  defer res.Body.Close()\n  body, _ := ioutil.ReadAll(res.Body)\n\n  fmt.Println(res)\n  fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.kroger.com/v1/courier/deliveries/{id}?delivery_id={{DELIVERY_ID}}\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"Authorization\": \"Bearer {{TOKEN}}\",\n    \"Content-Type\": \"application/json\"\n  },\n  \"data\": \"{\\n  \\\"action\\\": \\\"CONFIRM\\\",\\n  \\\"payload\\\": {\\n    \\\"cancellationNote\\\": \\\"Car issues.\\\",\\n    \\\"driver\\\": {\\n      \\\"firstName\\\": \\\"John\\\",\\n      \\\"lastName\\\": \\\"Doe\\\",\\n      \\\"vehicle\\\": {\\n        \\\"licensePlate\\\": \\\"ABC123\\\",\\n        \\\"year\\\": \\\"2018\\\",\\n        \\\"model\\\": \\\"Challenger\\\",\\n        \\\"make\\\": \\\"Dodge\\\"\\n      }\\n    },\\n    \\\"dropoffEta\\\": {\\n      \\\"timezone\\\": \\\"America/New_York\\\",\\n      \\\"value\\\": \\\"2018-02-17T12:00Z\\\"\\n    },\\n    \\\"pickupEta\\\": {\\n      \\\"timezone\\\": \\\"America/New_York\\\",\\n      \\\"value\\\": \\\"2018-02-17T12:00Z\\\"\\n    },\\n    \\\"trackingUrl\\\": \\\"https://trackingurl.com\\\"\\n  }\\n}\"\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n  \\\"action\\\": \\\"CONFIRM\\\",\\n  \\\"payload\\\": {\\n    \\\"cancellationNote\\\": \\\"Car issues.\\\",\\n    \\\"driver\\\": {\\n      \\\"firstName\\\": \\\"John\\\",\\n      \\\"lastName\\\": \\\"Doe\\\",\\n      \\\"vehicle\\\": {\\n        \\\"licensePlate\\\": \\\"ABC123\\\",\\n        \\\"year\\\": \\\"2018\\\",\\n        \\\"model\\\": \\\"Challenger\\\",\\n        \\\"make\\\": \\\"Dodge\\\"\\n      }\\n    },\\n    \\\"dropoffEta\\\": {\\n      \\\"timezone\\\": \\\"America/New_York\\\",\\n      \\\"value\\\": \\\"2018-02-17T12:00Z\\\"\\n    },\\n    \\\"pickupEta\\\": {\\n      \\\"timezone\\\": \\\"America/New_York\\\",\\n      \\\"value\\\": \\\"2018-02-17T12:00Z\\\"\\n    },\\n    \\\"trackingUrl\\\": \\\"https://trackingurl.com\\\"\\n  }\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.kroger.com/v1/courier/deliveries/{id}?delivery_id={{DELIVERY_ID}}\")\n  .post(body)\n  .addHeader(\"Authorization\", \"Bearer {{TOKEN}}\")\n  .addHeader(\"Content-Type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ]
      }
    },
    "/partner/order/checkouts": {
      "post": {
        "tags": [
          "Ship Order"
        ],
        "summary": "Create ship order",
        "description": "This endpoint is used to support a two-step process for submitting a paid order to Kroger for shipping:\n1. Pass `option.calculate=summary` as a query parameter to get the appropriate tax for the order.\n2. After calculating the order cost (including the tax returned in step 1) and getting payment from the customer, \nsubmit the full order to Kroger with no query parameters.\n\nThe service does not currently validate the tax amount and total order payment in step 2, \nso it's important to get the correct value from step 1.",
        "parameters": [
          {
            "in": "query",
            "name": "option.calculate",
            "description": "Pass this parameter with the `summary` value to get the correct tax amount for an order.\n<br><br> Note: Payment details are optional when this option is used.",
            "schema": {
              "type": "string",
              "example": "summary"
            }
          },
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "ffffffff-4f63-4227-a243-5252d6504604"
            },
            "required": true,
            "description": "Unique identifier to track the request."
          },
          {
            "name": "X-Idempotency-Key",
            "in": "header",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "ffffffff-4f54-4217-a293-9f79d670f513"
            },
            "required": true,
            "description": "A UUID generated by the consumer to ensure that the request is not executed more than once."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/order.CreateShipOrderRequest"
              },
              "examples": {
                "CreateShipOrderRequest": {
                  "$ref": "#/components/examples/order.CreateShipOrderRequest"
                }
              }
            }
          }
        },
        "security": [
          {
            "CustomerContext": [
              "urn:com:kroger:partner:order:checkout:write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/order.CreateShipOrderResponse"
                },
                "examples": {
                  "CreateShipOrderResponse": {
                    "$ref": "#/components/examples/order.CreateShipOrderResponse"
                  },
                  "CalculateShipOrderSummary": {
                    "$ref": "#/components/examples/order.ShipOrderSummary"
                  }
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/order.CreateShipOrderResponse"
                },
                "examples": {
                  "CreateShipOrderResponse": {
                    "$ref": "#/components/examples/order.CreateShipOrderResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                },
                "examples": {
                  "BadRequest": {
                    "$ref": "#/components/examples/order.APIError.badRequest"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/APIError"
                    },
                    {
                      "$ref": "#/components/schemas/APIError.InvalidMethodAndValidToken"
                    }
                  ]
                },
                "examples": {
                  "EntityNotFound": {
                    "$ref": "#/components/examples/order.APIError.notFound"
                  },
                  "InvalidMethodAndValidToken": {
                    "$ref": "#/components/examples/order.InvalidMethodAndValidToken"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                },
                "examples": {
                  "InternalServerError": {
                    "$ref": "#/components/examples/order.APIError.serverError"
                  }
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl --request POST 'https://api.kroger.com/v1/partner/order/checkouts' \\\n  --header 'X-Correlation-ID: {{uuid}}' \\\n  --header 'X-Idempotency-Key: {{uuid}}' \\\n  --header 'Content-Type: application/json' \\\n  --header 'Authorization: Bearer {{token}}' \\\n  --data   '{{payload}}'\n"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.kroger.com/v1/partner/order/checkouts\"\n  method := \"POST\"\n\n  payload := strings.NewReader(``) // payload\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"X-Correlation-ID\", \"{{uuid}}\")\n  req.Header.Add(\"X-Idempotency-Key\", \"{{uuid}}\")\n  req.Header.Add(\"Authorization\", \"Bearer {{token}}\")\n  req.Header.Add(\"Content-Type\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}\n"
          },
          {
            "lang": "Java",
            "source": "import javax.net.ssl.HttpsURLConnection;\nimport java.io.*;\nimport java.net.URL;\nimport java.nio.charset.StandardCharsets;\n\npublic class App {\n    private static final String apiUrl = \"https://api.kroger.com/v1/partner/order/checkouts\";\n    private static final String payload = \"\"; // payload\n\n    public static void main( String[] args ) {\n        try {\n            URL url = new URL(apiUrl);\n\n            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n            connection.setRequestMethod(\"POST\");\n            connection.setDoOutput(true);\n            connection.setRequestProperty(\"Authorization\", \"Bearer {{token}}\");\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n            connection.setRequestProperty(\"Accept\", \"application/json\");\n            connection.setRequestProperty(\"X-Correlation-ID\", \"{{uuid}}\");\n            connection.setRequestProperty(\"X-Idempotency-Key\", \"{{uuid}}\");\n\n            try(OutputStream os = connection.getOutputStream()) {\n                byte[] input = payload.getBytes(StandardCharsets.UTF_8);\n                os.write(input);\n            } catch (Exception e) {\n                System.out.println(\"Error: \" + e.getMessage());\n            }\n\n            try(BufferedReader br = new BufferedReader(\n                    new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8))) {\n                StringBuilder response = new StringBuilder();\n                String responseLine;\n\n                while ((responseLine = br.readLine()) != null) {\n                    response.append(responseLine.trim());\n                }\n\n                System.out.println(response.toString());\n            } catch (Exception e) {\n                System.out.println(\"Error: \" + e.getMessage());\n            }\n        } catch (Exception e) {\n            System.out.println(\"Error: \" + e.getMessage());\n        }\n    }\n}\n"
          },
          {
            "lang": "NodeJs",
            "source": "const axios = require('axios');\n\nconst apiUrl = 'https://api.kroger.com/v1/partner/order/checkouts';\n\nlet payload = JSON.stringify({}); // payload\n\naxios({\n    method: 'post',\n    url: apiUrl,\n    headers: {\n        'Authorization': 'Bearer {{token}}',\n        'Content-Type': 'application/json',\n        'X-Correlation-ID': '{{uuid}}',\n        'X-Idempotency-Key': '{{uuid}}'\n    },\n    data: payload,\n}).then(function (response) {\n    console.log(response.data)\n});  \n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nif __name__ == '__main__':\n    url = \"https://api.kroger.com/v1/partner/order/checkouts\"\n\n    headers = {\n        'X-Correlation-ID': '{{uuid}}',\n        'X-Idempotency-Key': '{{uuid}}',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer {{token}}'\n    }\n\n    payload = {}  # payload\n\n    s = requests.Session()\n    req = requests.Request('POST', url, json=payload, headers=headers)\n    prepared = req.prepare()\n\n    resp = s.send(prepared)\n\n    print(resp.text)          \n"
          }
        ]
      }
    },
    "/partner/catalog/v2/products": {
      "get": {
        "tags": [
          "Catalog V2"
        ],
        "summary": "Catalog Search",
        "description": "Search the product catalog based upon specified criteria.",
        "parameters": [
          {
            "name": "filter.upc.in",
            "in": "query",
            "description": "Exact match to product identifier, typically UPC, or GTIN.\n\nDuplicate UPCs if present in the request parameter are ignored.\n\nMax allowed non-duplicate UPCs per request: 50",
            "schema": {
              "type": "string",
              "format": "comma-separated",
              "maximum": 20,
              "example": "0001629144204,4007440161032"
            }
          },
          {
            "name": "filter.locations.id.eq",
            "in": "query",
            "required": true,
            "description": "Exact match to the 8-character locationId for the store or distribution center.\n\n(filter.storeId.eq in the original Catalog Search endpoint.)",
            "schema": {
              "type": "string",
              "example": 1100670
            }
          },
          {
            "name": "filter.locations.fulfillment.eq",
            "in": "query",
            "required": true,
            "description": "Exact match to product fulfillment option.\n\nMust be one of: DELIVERY, SHIP, PICKUP, or INSTORE.\n\n(filter.modality.eq in the original Catalog Search endpoint.)",
            "schema": {
              "type": "string",
              "example": "PICKUP"
            }
          },
          {
            "name": "filter.updatedAt.range",
            "in": "query",
            "description": "The updated date range provided as a comma separated set with the start date and end date in that order. \n\nProducts updated within this range (inclusive) will be returned.",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2022-01-01T00:00:12.008Z,2022-02-01T00:00:12.008Z"
            }
          },
          {
            "$ref": "#/components/parameters/catalog_v2_page.offset"
          },
          {
            "$ref": "#/components/parameters/catalog_v2_page.size"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/catalog_v2.products.response"
                },
                "examples": {
                  "Get product(s) details": {
                    "$ref": "#/components/examples/get.products.details"
                  },
                  "Get product(s) metadata": {
                    "$ref": "#/components/examples/get.products.metadata"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/catalog_v2.clientError.400"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/catalog_v2.serverError.500"
                }
              }
            }
          }
        },
        "security": [
          {
            "CustomerContext": [
              "urn:com:kroger:partner:catalog:products:read"
            ]
          },
          {
            "ClientContext": [
              "urn:com:kroger:partner:catalog:products:read"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl --location --request GET 'https://api-ce.kroger.com/catalog/v2/products?filter.locations.id.eq=MKTPLACE&filter.locations.fulfillment.eq=SHIP' \\\n--header 'Authorization: Bearer {{TOKEN}}'"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\nfunc main() {\n\turl := \"https://api-ce.kroger.com/catalog/v2/products?filter.locations.id.eq=MKTPLACE&filter.locations.fulfillment.eq=SHIP\"\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\treq.Header.Add(\"Content-Type\", \"application/x-www-form-urlencoded\")\n\treq.Header.Add(\"Authorization\", \"Bearer {{TOKEN}}\")\n\tres, _ := http.DefaultClient.Do(req)\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n}\n"
          },
          {
            "lang": "Java",
            "source": "import okhttp3.*;\nimport java.io.*;\npublic class Test {\npublic static void main(String[] args) {\nOkHttpClient client = new OkHttpClient();\nRequest request = new Request.Builder().url(\"https://api-ce.kroger.com/catalog/v2/products?filter.locations.id.eq=MKTPLACE&filter.locations.fulfillment.eq=SHIP\").get()\n.addHeader(\"Content-Type\", \"application/x-www-form-urlencoded\")\n.addHeader(\"Authorization\",\"Bearer {{TOKEN}}\")\n.build();\ntry {\nResponseBody responseBody = client.newCall(request).execute().body();\nSystem.out.println(responseBody.string());\n} catch (IOException e) {\nSystem.out.println(e.getMessage());\n}\n}\n}\n"
          },
          {
            "lang": "NodeJs",
            "source": "const axios = require('axios');\nlet config = {\n  headers: {\n    \"Content-Type\": \"application/x-www-form-urlencoded\",\n    \"Authorization\": \"Bearer {{TOKEN}}\"\n  },\n}\naxios.get('https://api-ce.kroger.com/catalog/v2/products?filter.locations.id.eq=MKTPLACE&filter.locations.fulfillment.eq=SHIP',config)\n.then(response => {\n    console.log(response.data);\n})\n.catch(error => {\n    console.log(error);\n});"
          }
        ]
      }
    },
    "/partner/catalog/v2/products-inventory": {
      "get": {
        "tags": [
          "Catalog V2"
        ],
        "summary": "Catalog Inventory",
        "description": "Search a location's product catalog for inventory-specific details. Current stock levels, fulfillment status, and active promotions are included.",
        "parameters": [
          {
            "name": "filter.upc.in",
            "in": "query",
            "description": "Exact match to product identifier, typically UPC, or GTIN.<br><br>Duplicate UPCs if present in the request parameter are ignored. <br><br>Max allowed non-duplicate UPCs per request: 50",
            "schema": {
              "type": "string",
              "format": "comma-separated",
              "maximum": 20,
              "example": "0001629144204,4007440161032"
            }
          },
          {
            "name": "filter.locations.id.eq",
            "in": "query",
            "required": true,
            "description": "Exact match to the 8-character locationId for the store or distribution center.\n\n(filter.storeId.eq in the original Catalog Search endpoint.)",
            "schema": {
              "type": "string",
              "example": 1100670
            }
          },
          {
            "name": "filter.locations.fulfillment.eq",
            "in": "query",
            "required": true,
            "description": "Exact match to product fulfillment option.<br><br>Must be one of: DELIVERY, SHIP, PICKUP, or INSTORE.\n\n(filter.modality.eq in the original Catalog Search endpoint.)",
            "schema": {
              "type": "string",
              "example": "SHIP"
            }
          },
          {
            "name": "filter.stockLevelUpdatedAt.range",
            "in": "query",
            "description": "The last stock level updated date range provided as a comma separated set with the start date and end date in that order. Products with stock levels updated within this range (inclusive) will be returned.",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2022-01-01T00:00:12.008Z,2022-02-02T00:00:12.008Z"
            }
          },
          {
            "name": "filter.fulfillmentUpdatedAt.range",
            "in": "query",
            "description": "The last fulfillment updated date range provided as a comma separated set with the start date and end date in that order. Products with fulfillment updated within this range (inclusive) will be returned.",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2022-01-01T00:00:12.008Z,2022-02-02T00:00:12.008Z"
            }
          },
          {
            "name": "filter.updatedAt.range",
            "in": "query",
            "description": "The updated date range provided as a comma separated set with the start date and end date in that order. Products updated within this range (inclusive) will be returned.",
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2022-01-01T00:00:12.008Z,2022-02-02T00:00:12.008Z"
            }
          },
          {
            "$ref": "#/components/parameters/catalog_v2_page.offset"
          },
          {
            "$ref": "#/components/parameters/catalog_v2_page.size"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/catalog_v2.products-inventory.response"
                },
                "examples": {
                  "Get product(s) inventory": {
                    "$ref": "#/components/examples/get.products-inventory"
                  },
                  "Get product(s) inventory store location(s) details": {
                    "$ref": "#/components/examples/get.products-inventory.locations"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/catalog_v2.clientError.400"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/catalog_v2.serverError.500"
                }
              }
            }
          }
        },
        "security": [
          {
            "CustomerContext": [
              "urn:com:kroger:partner:catalog:products:read"
            ]
          },
          {
            "ClientContext": [
              "urn:com:kroger:partner:catalog:products:read"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "curl -X GET \\\n'https://api-ce.kroger.com/catalog/v2/products-inventory?filter.locations.id.eq=MKTPLACE&filter.locations.fulfillment.eq=SHIP' \\\n-H 'Content-Type: application/x-www-form-urlencoded' \\\n-H 'Authorization: Bearer {{TOKEN}}' \\\n"
          },
          {
            "lang": "Go",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n\nfunc main() {\n\turl := \"https://api-ce.kroger.com/catalog/v2/products-inventory?filter.locations.id.eq=MKTPLACE&filter.locations.fulfillment.eq=SHIP\"\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\treq.Header.Add(\"Content-Type\", \"application/x-www-form-urlencoded\")\n\treq.Header.Add(\"Authorization\", \"Bearer {{TOKEN}}\")\n\tres, _ := http.DefaultClient.Do(req)\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n}\n"
          },
          {
            "lang": "Java",
            "source": "import okhttp3.*;\nimport java.io.*;\npublic class Test {\n    public static void main(String[] args) {\n        OkHttpClient client = new OkHttpClient();\n        Request request = new Request.Builder().url(\"https://api-ce.kroger.com/catalog/v2/products-inventory?filter.locations.id.eq=MKTPLACE&filter.locations.fulfillment.eq=SHIP\").get()\n                .addHeader(\"Content-Type\", \"application/x-www-form-urlencoded\")\n                .addHeader(\"Authorization\",\"Bearer {{TOKEN}}\")\n                .build();\n        try {\n            ResponseBody responseBody = client.newCall(request).execute().body();\n            System.out.println(responseBody.string());\n        } catch (IOException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}\n"
          },
          {
            "lang": "NodeJs",
            "source": "const axios = require('axios');\nlet config = {\n  headers: {\n    \"Content-Type\": \"application/x-www-form-urlencoded\",\n    \"Authorization\": \"Bearer {{TOKEN}}\"\n  },\n}\naxios.get('https://api-ce.kroger.com/catalog/v2/products-inventory?filter.locations.id.eq=MKTPLACE&filter.locations.fulfillment.eq=SHIP',config)\n.then(response => {\n    console.log(response.data);\n})\n.catch(error => {\n    console.log(error);\n});"
          }
        ]
      }
    },
    "/lockers/v1/order-events": {
      "post": {
        "tags": [
          "Locker Pickup"
        ],
        "description": "The Locker Pickup API uses the following status values:<br><ul><li>LOADED - Status to indicate when the order has been loaded into the locker.</li><li>COLLECTED - Status to indicate when the order has been collected by the customer from the locker.</li></ul>",
        "security": [],
        "parameters": [
          {
            "name": "X-Correlation-ID",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Correlation Id"
          },
          {
            "name": "Idempotency-Key",
            "in": "header",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "ffffffff-4f54-4217-a293-9f79d670f513"
            },
            "required": true,
            "description": "A UUID generated by the consumer to ensure that the request is not executed more than once."
          }
        ],
        "summary": "Update locker status",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/lockers.StatusUpdate"
              },
              "example": {
                "orderStatus": "LOADED",
                "orderId": "b6737fe6-5f39-41g5-b83e-5d586f7d034b"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "headers": {
              "X-Correlation-ID": {
                "description": "The ID used to trace this request",
                "schema": {
                  "type": "string",
                  "example": "ffffffff-4f63-4227-a293-9279d670f50f"
                }
              },
              "X-Kroger-Records-Affected": {
                "description": "The total number of records available for the given query parameters",
                "schema": {
                  "type": "number",
                  "format": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Success"
                        }
                      },
                      "example": {
                        "message": "Success"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "headers": {
              "X-Correlation-ID": {
                "description": "The ID used to trace this request",
                "schema": {
                  "type": "string",
                  "example": "ffffffff-4f63-4227-a293-9279d670f50f"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/lockers.ErrorResponse400"
                },
                "example": {
                  "errors": [
                    {
                      "code": "Missing Parameter",
                      "reason": "Parameter status is required for this request",
                      "datetime": {
                        "value": "2022-03-01T06:49:57Z",
                        "zone": "UTC"
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "X-Correlation-ID": {
                "description": "The ID used to trace this request",
                "schema": {
                  "type": "string",
                  "example": "ffffffff-4f63-4227-a293-9279d670f50f"
                }
              },
              "X-Kroger-Records-Affected": {
                "description": "The total number of records available for the given query parameters",
                "schema": {
                  "type": "number",
                  "format": "integer",
                  "example": 2
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/lockers.ErrorResponse404"
                },
                "example": {
                  "errors": [
                    {
                      "code": "Entity Not Found",
                      "reason": "No 'order' found for Id: '1234'",
                      "datetime": {
                        "value": "2022-03-01T06:49:57Z",
                        "zone": "UTC"
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "X-Correlation-ID": {
                "description": "The ID used to trace this request",
                "schema": {
                  "type": "string",
                  "example": "ffffffff-4f63-4227-a293-9279d670f50f"
                }
              },
              "X-Kroger-Records-Affected": {
                "description": "The total number of records available for the given query parameters",
                "schema": {
                  "type": "number",
                  "format": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/lockers.ErrorResponse500"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "catalog.productProjections": {
        "name": "projections",
        "in": "query",
        "description": "The defined set of fields and objects to return from the request.\n\n**Projection Format:** `products.{shape}`\n\n**Available Shapes:** \n<li><code>full</code></li>\n<li><code>compact</code></li>\n\n**projections:**\n  * `--` - Returns compact by default\n  * `products.compact`\n  \n    * product attributes\n  * `products.full`\n  \n    * product attributes\n    * brand\n    * primary category\n    * secondary category\n    * store specific data\n",
        "schema": {
          "type": "string",
          "example": "products.full"
        }
      },
      "catalog.size": {
        "name": "page.size",
        "in": "query",
        "description": "Number of products to return per page.<br><br>Allowed range for DELIVERY: [1-100]<br><br>Allowed range for PICK_UP, IN_STORE, and SHIP: [1-50]",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 100,
          "default": 20
        },
        "example": 25
      },
      "catalog.offset": {
        "name": "page.offset",
        "in": "query",
        "description": "Starting point for paginated results.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 0
        },
        "example": 50
      },
      "catalog_v2_page.size": {
        "name": "page.size",
        "in": "query",
        "description": "Number of products obtained per page.<br><br>Allowed range: [1 - 50]",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 100,
          "default": 20
        },
        "example": 25
      },
      "catalog_v2_page.offset": {
        "name": "page.offset",
        "in": "query",
        "description": "Starting point for paginated results.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 0
        },
        "example": 50
      }
    },
    "schemas": {
      "APIError": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "number"
          },
          "code": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "APIError.auth.serverError": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "object",
            "properties": {
              "reason": {
                "type": "string",
                "example": "Internal server error"
              },
              "code": {
                "type": "string",
                "example": "Auth-4xxx-xxx"
              },
              "timestamp": {
                "type": "number",
                "example": 1564159296910
              }
            }
          }
        }
      },
      "APIError.cart.serverError": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "object",
            "properties": {
              "reason": {
                "type": "string",
                "example": "Internal server error"
              },
              "code": {
                "type": "string",
                "example": "CART-4xxx-xxx"
              },
              "timestamp": {
                "type": "number",
                "example": 1564159296910
              }
            }
          }
        }
      },
      "APIError.cart.notfFulfillable": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "object",
            "properties": {
              "timestamp": {
                "type": "number",
                "example": 1564159296910
              },
              "code": {
                "type": "string",
                "example": "CART-4xxx-xxx"
              },
              "reason": {
                "type": "string",
                "example": "cart not fulfillable"
              }
            }
          }
        }
      },
      "APIError.deliveries.serverError": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "object",
            "properties": {
              "reason": {
                "type": "string",
                "example": "Internal server error"
              },
              "code": {
                "type": "string",
                "example": "DELIVERIES-4xxx-xxx"
              },
              "timestamp": {
                "type": "number",
                "example": 1564159296910
              }
            }
          }
        }
      },
      "APIError.departmentsId.badRequest": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "object",
            "properties": {
              "reason": {
                "type": "string",
                "example": "Invalid department ID"
              },
              "code": {
                "type": "string",
                "example": "LOCATION-2119"
              },
              "timestamp": {
                "type": "number",
                "example": 1564159296910
              }
            }
          }
        }
      },
      "APIError.forbidden": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "object",
            "properties": {
              "reason": {
                "type": "string",
                "example": "missing required scopes"
              },
              "code": {
                "type": "string",
                "example": "Forbidden"
              },
              "timestamp": {
                "type": "number",
                "example": 1564143270221
              }
            }
          }
        }
      },
      "APIError.identity.serverError": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "object",
            "properties": {
              "reason": {
                "type": "string",
                "example": "Internal server error"
              },
              "code": {
                "type": "string",
                "example": "IDENTITY-4xxx-xxx"
              },
              "timestamp": {
                "type": "number",
                "example": 1564159296910
              }
            }
          }
        }
      },
      "APIError.locations.serverError": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "object",
            "properties": {
              "reason": {
                "type": "string",
                "example": "Internal server error"
              },
              "code": {
                "type": "string",
                "example": "LOCATION-4xxx-xxx"
              },
              "timestamp": {
                "type": "number",
                "example": 1564159296910
              }
            }
          }
        }
      },
      "APIError.noContent": {
        "type": "object"
      },
      "APIError.notFound": {
        "type": "object"
      },
      "APIError.products.serverError": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "object",
            "properties": {
              "reason": {
                "type": "string",
                "example": "Internal server error"
              },
              "code": {
                "type": "string",
                "example": "PRODUCT-4xxx-xxx"
              },
              "timestamp": {
                "type": "number",
                "example": 1564159296910
              }
            }
          }
        }
      },
      "APIError.unauthorized": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "object",
            "properties": {
              "error_description": {
                "type": "string",
                "example": "The access token is invalid or has expired"
              },
              "error": {
                "type": "string",
                "example": "invalid_token"
              }
            }
          }
        }
      },
      "APIError.InvalidMethodAndValidToken": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "The requested endpoint was not found."
          }
        }
      },
      "authorization_code": {
        "required": [
          "code",
          "grant_type",
          "redirect_uri"
        ],
        "type": "object",
        "properties": {
          "grant_type": {
            "type": "string",
            "description": "Must be `authorization_code`.",
            "example": "code"
          },
          "code": {
            "type": "string",
            "description": "The authorization code returned from the server.",
            "example": "zWrT1GkdshSadIowJW0Rm4w2kKhOzv1W"
          },
          "redirect_uri": {
            "type": "string",
            "description": "Your registered redirect URL. Must be the same redirect URL that was used for the authorizations code request.",
            "example": "https://example.com/callback"
          }
        }
      },
      "authorization_codeResponse": {
        "type": "object",
        "properties": {
          "expires_in": {
            "type": "number",
            "description": "",
            "example": 1800
          },
          "access_token": {
            "type": "string",
            "description": "",
            "example": "eyJh5GciOiJSUzI1NiGsImtpZCI6Ilo0RnQzbXNrSUj4OGlydDdMQjVjNmc2PSIsInR5cCI6IkpXVmJ9.eqJzY29wZSI6InByb2T1Y3QuY29tcGFjdCBjb3Vwb24uYmFzaWMiLCJhdXRoQXQiOjE1NjUwOTk0OTUzMzIzOTIxMTIsImF1ZCI6InBlcmsvcm1hbmNlLWFnZW50LXB1YmxpYyIsImV4cCI6MTU2NTEwMTI5NSwiaWF0IjoxNTY1MDk5BDkwLCJpc3MiOiJhcGkua3JvZ2VyLmNvbSIsInN1YiI6IjBmZjdkMGIwLWVkOGItNDJmOS1hNTExLWEzMGQyYTAyZDljNSJ9.ej0mov6SGV4n4HiAvduTdYCceMlSo3T06M4Nfh3MfpIjSKzKaLWgd5S0W1EKDXrWz8IE7NTg8EIrL-WKhwdZPt-TWaS7LLjRXLJ0w5rKc44DStgBdvDiCcnKeMsnimjhBlHOiiKUV5y3GbVqJzaDVZwg0j8lP9qtwZP9EIIQ7k409nkskY1pz7l1lZrGotYRJKmnteN5vVQeZ3R8jywIwOOSEbKSgQALVA3Oj02964P7lI6h1GsZ66V5FLA9KU8QXm4ejrFHf1beAIA2zi_fQI3dmW7yj57pWoCECZIjq7Sfo3nGR5rkjEwfyXEK7aTn8oj4_14YHgKRTY-28L96cw"
          },
          "token_type": {
            "type": "string",
            "description": "",
            "example": "bearer"
          },
          "refresh_token": {
            "type": "string",
            "description": "",
            "example": "FN20LbaF2EWC6MPMWdemBwwnP4ZmX8"
          }
        }
      },
      "carts.cartModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the cart.",
            "example": "2b9b3963-5cac-42f8-9d28-7bebdec0b9e4"
          },
          "createdDate": {
            "type": "string",
            "description": "The date the cart was created.",
            "example": "2018-01-18T16:05:05.206Z"
          },
          "items": {
            "type": "array",
            "description": "An array of items in the cart.",
            "items": {
              "$ref": "#/components/schemas/carts.cartItemResponseModel"
            }
          },
          "name": {
            "type": "string",
            "description": "The name of the cart.",
            "example": "High Protein Diet"
          }
        }
      },
      "carts.cartPayloadModel": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/carts.cartModel"
          },
          "meta": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "carts.cartsPayloadModel": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/carts.cartModel"
            }
          },
          "meta": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "carts.cartItemRequestModel": {
        "required": [
          "quantity",
          "upc"
        ],
        "type": "object",
        "properties": {
          "allowSubstitutes": {
            "type": "boolean",
            "description": "Indicates if substitutes are allow."
          },
          "quantity": {
            "type": "integer",
            "example": 1,
            "description": "The quantity of the item."
          },
          "specialInstructions": {
            "type": "string",
            "description": "Any special instructions for the item.",
            "example": "Bag separate from other groceries."
          },
          "upc": {
            "type": "string",
            "description": "The UPC of the item.",
            "example": "0001111041700"
          },
          "modality": {
            "type": "string",
            "description": "An optional value representing a modality including: SHIP, DELIVERY, PICKUP.",
            "enum": [
              "SHIP",
              "DELIVERY",
              "PICKUP"
            ],
            "default": "PICKUP"
          }
        }
      },
      "carts.cartItemResponseModel": {
        "type": "object",
        "properties": {
          "allowSubstitutes": {
            "type": "boolean",
            "description": "Indicates if substitutes are allow."
          },
          "createdDate": {
            "type": "string",
            "description": "The date the item was added to the cart.",
            "example": "2018-01-18T16:05:05.206Z"
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of the item.",
            "example": 1
          },
          "specialInstructions": {
            "type": "string",
            "description": "Any special instructions for the item.",
            "example": "Bag separate from other groceries."
          },
          "upc": {
            "type": "string",
            "description": "The UPC of the item.",
            "example": "0001111060903"
          },
          "description": {
            "type": "string",
            "description": "The name of the product.",
            "example": "Kroger 2% Reduced Fat Milk"
          },
          "modality": {
            "type": "string",
            "description": "An optional value representing a modality including: SHIP, DELIVERY, PICKUP.",
            "enum": [
              "SHIP",
              "DELIVERY",
              "PICKUP"
            ],
            "default": "PICKUP"
          }
        }
      },
      "carts.cartRequestModel": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "description": "An array of items in the cart.",
            "items": {
              "$ref": "#/components/schemas/carts.cartItemRequestModel"
            }
          }
        }
      },
      "carts.cartItemPostRequestModel": {
        "required": [
          "quantity",
          "upc"
        ],
        "type": "object",
        "properties": {
          "upc": {
            "type": "string",
            "description": "The UPC of the item.",
            "example": "0001111060903"
          },
          "allowSubstitutes": {
            "type": "boolean",
            "description": "Indicates if substitutes are allow."
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of the item.",
            "example": 1
          },
          "specialInstructions": {
            "type": "string",
            "description": "Any special instructions for the item.",
            "example": "Bag separate from other groceries."
          },
          "modality": {
            "type": "string",
            "description": "An optional value representing a modality including: SHIP, DELIVERY, PICKUP.",
            "enum": [
              "SHIP",
              "DELIVERY",
              "PICKUP"
            ],
            "default": "PICKUP"
          }
        }
      },
      "carts.cartItemPutRequestModel": {
        "required": [
          "quantity"
        ],
        "type": "object",
        "properties": {
          "allowSubstitutes": {
            "type": "boolean",
            "description": "Indicates if substitutes are allow."
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of the item.",
            "example": 1
          },
          "specialInstructions": {
            "type": "string",
            "description": "Any special instructions for the item.",
            "example": "Bag separate from other groceries."
          },
          "modality": {
            "type": "string",
            "description": "An optional value representing a modality including: SHIP, DELIVERY, PICKUP.",
            "enum": [
              "SHIP",
              "DELIVERY",
              "PICKUP"
            ],
            "default": "PICKUP"
          }
        }
      },
      "catalog.productsResponseModel": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/catalog.productsData"
          },
          "meta": {
            "$ref": "#/components/schemas/catalog.meta"
          }
        }
      },
      "catalog.productsData": {
        "type": "object",
        "properties": {
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/catalog.productModel"
            }
          }
        }
      },
      "catalog.productModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Product name.",
            "example": "Paper Pencil Plastic Wrap"
          },
          "slug": {
            "type": "string",
            "description": "Slug is the part of a URL that identifies a product in human-readable keywords.",
            "example": "paper-pencil-plastic-wrap"
          },
          "description": {
            "type": "string",
            "description": "Product description.",
            "example": "Stationary"
          },
          "barcodes": {
            "description": "Product barcodes.",
            "allOf": [
              {
                "$ref": "#/components/schemas/catalog.product.barcode"
              }
            ]
          },
          "brand": {
            "$ref": "#/components/schemas/catalog.brandModel"
          },
          "primaryCategory": {
            "type": "object",
            "description": "Product primary category.",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64",
                "description": "Primary category identifier. (DELIVERY only)",
                "example": 5
              },
              "name": {
                "type": "string",
                "description": "Primary category name.",
                "example": "Pen"
              },
              "slug": {
                "type": "string",
                "description": "Slug is the part of a URL that identifies a category in human-readable keywords. (DELIVERY only)",
                "example": "pen-1"
              },
              "description": {
                "description": "Primary category description. (DELIVERY only)",
                "type": "string",
                "example": "Stationary"
              },
              "parentCategory": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/catalog.categoryModel"
                  }
                ],
                "description": "Parent category."
              },
              "images": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/catalog.image"
                  }
                ],
                "description": "Primary category images. (DELIVERY only)"
              },
              "status": {
                "type": "string",
                "description": "Primary category status. (DELIVERY only)",
                "enum": [
                  "ENABLED",
                  "DISABLED"
                ],
                "example": "ENABLED"
              },
              "metaData": {
                "type": "object",
                "properties": {
                  "code": {
                    "description": "Kroger's internal category code. (SHIP, PICK_UP, and IN_STORE only)",
                    "type": "string",
                    "example": "25"
                  }
                }
              }
            }
          },
          "secondaryCategories": {
            "description": "Product secondary categories.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/catalog.categoryModel"
            }
          },
          "storeSpecificData": {
            "$ref": "#/components/schemas/catalog.product.storeInfo"
          },
          "postalCodes": {
            "description": "List of postal codes",
            "allOf": [
              {
                "$ref": "#/components/schemas/catalog.postalCodes"
              }
            ]
          },
          "soldBy": {
            "description": "Sold by each or weight.",
            "type": "string",
            "enum": [
              "EACH",
              "WEIGHT"
            ],
            "example": "EACH"
          },
          "images": {
            "description": "Product images.",
            "allOf": [
              {
                "$ref": "#/components/schemas/catalog.image"
              }
            ]
          },
          "krogerId": {
            "description": "Kroger's product identifier, usually a GTIN or UPC.",
            "type": "string",
            "example": "0081729100042"
          },
          "status": {
            "description": "Product availability.",
            "type": "string",
            "enum": [
              "ENABLED",
              "DISABLED"
            ],
            "example": "ENABLED"
          },
          "createdAt": {
            "description": "Product creation timestamp. (DELIVERY only)",
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "format": "date-time",
                "example": "2020-04-17T08:11:34.021Z"
              },
              "timezone": {
                "type": "string",
                "example": "UTC"
              }
            }
          },
          "updatedAt": {
            "description": "Product last updated timestamp. (DELIVERY only)",
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "format": "date-time",
                "example": "2020-04-17T08:11:34.021Z"
              },
              "timezone": {
                "type": "string",
                "example": "UTC"
              }
            }
          },
          "deletedAt": {
            "description": "Product deletion timestamp.",
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "format": "date-time",
                "example": "2020-04-17T08:11:34.021Z"
              },
              "timezone": {
                "type": "string",
                "example": "UTC"
              }
            },
            "example": null
          },
          "metadata": {
            "$ref": "#/components/schemas/catalog.product.metaData"
          }
        },
        "xml": {
          "name": "Product"
        }
      },
      "catalog.product.barcode": {
        "type": "array",
        "items": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": "Product barcode.",
        "example": [
          "0005508600241"
        ]
      },
      "catalog.brandModel": {
        "type": "object",
        "description": "Product brand",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Brand identifier. (DELIVERY only)",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Brand name.",
            "example": "paper-pencil"
          },
          "slug": {
            "type": "string",
            "description": "Slug is the part of a URL that identifies a brand in human-readable keywords.",
            "example": "paper-pencil"
          },
          "description": {
            "description": "Brand description. (SHIP, PICK_UP, and IN_STORE only)",
            "type": "string",
            "example": "A stationary brand"
          },
          "images": {
            "description": "Brand images. (DELIVERY only)",
            "allOf": [
              {
                "$ref": "#/components/schemas/catalog.image"
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "Brand status. (DELIVERY only)",
            "enum": [
              "ENABLED",
              "DISABLED"
            ],
            "example": "ENABLED"
          },
          "logo": {
            "type": "string",
            "description": "Brand logo link. (DELIVERY only)",
            "example": "http://www.example.com/logo/image.jpg"
          },
          "metaData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/catalog.brand.metaData"
              }
            ]
          }
        },
        "xml": {
          "name": "Brand"
        }
      },
      "catalog.brand.metaData": {
        "type": "object",
        "properties": {
          "marketingName": {
            "description": "Kroger's marketing brand name. (SHIP, PICK_UP, and IN_STORE only)",
            "type": "string",
            "example": "Melissa & Doug"
          }
        }
      },
      "catalog.categoryModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Category identifier. (DELIVERY only)",
            "example": 5
          },
          "name": {
            "type": "string",
            "description": "Category name.",
            "example": "Pen"
          },
          "slug": {
            "type": "string",
            "description": "Slug is the part of a URL that identifies a category in human-readable keywords.",
            "example": "pen"
          },
          "description": {
            "description": "Category description. (DELIVERY only)",
            "type": "string"
          },
          "images": {
            "description": "Category images. (DELIVERY only)",
            "allOf": [
              {
                "$ref": "#/components/schemas/catalog.image"
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "Category status. (DELIVERY only)",
            "enum": [
              "ENABLED",
              "DISABLED"
            ],
            "example": "ENABLED"
          },
          "metaData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/catalog.category.metaData"
              }
            ]
          }
        },
        "xml": {
          "name": "Category"
        }
      },
      "catalog.category.metaData": {
        "type": "object",
        "properties": {
          "code": {
            "description": "Kroger's internal category code. (SHIP, PICK_UP, and IN_STORE only)",
            "type": "string",
            "example": "25"
          }
        }
      },
      "catalog.product.storeInfo": {
        "type": "array",
        "maxItems": 20,
        "description": "Product stores.",
        "items": {
          "properties": {
            "storeId": {
              "type": "string",
              "description": "Kroger store identifier.",
              "example": "70100485"
            },
            "stock": {
              "type": "integer",
              "description": "Product stock.",
              "example": 1
            },
            "price": {
              "type": "object",
              "description": "Product price.",
              "properties": {
                "nationalPrice": {
                  "description": "Product national price. (SHIP, PICK_UP, and IN_STORE only)",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/catalog.product.storeInfo.modalityPrices"
                    }
                  ]
                },
                "storePrice": {
                  "$ref": "#/components/schemas/catalog.product.storeInfo.modalityPrices"
                }
              }
            },
            "location": {
              "type": "object",
              "description": "Product location.",
              "properties": {
                "aisle": {
                  "type": "string",
                  "description": "Product aisle.",
                  "example": "aisle"
                },
                "shelf": {
                  "type": "string",
                  "description": "Product shelf.",
                  "example": "shelf"
                },
                "position": {
                  "type": "string",
                  "description": "Product position.",
                  "example": "position"
                }
              }
            },
            "modality": {
              "description": "Product fulfillment.",
              "type": "object",
              "enum": [
                "DELIVERY",
                "SHIP",
                "PICK_UP",
                "IN_STORE"
              ],
              "example": "DELIVERY"
            },
            "metaData": {
              "$ref": "#/components/schemas/catalog.product.storeInfo.metaData"
            }
          }
        }
      },
      "catalog.product.storeInfo.modalityPrices": {
        "type": "object",
        "properties": {
          "regular": {
            "$ref": "#/components/schemas/catalog.product.storeInfo.modalityPrices.price"
          },
          "promo": {
            "$ref": "#/components/schemas/catalog.product.storeInfo.modalityPrices.price"
          }
        }
      },
      "catalog.product.storeInfo.modalityPrices.price": {
        "type": "object",
        "properties": {
          "unitPrice": {
            "type": "string",
            "description": "Product unit price.",
            "example": "USD 5.00"
          },
          "nForPrice": {
            "type": "string",
            "description": "Product nFor price.",
            "example": "USD 4.00"
          },
          "nfor": {
            "type": "integer",
            "description": "Product nfor.",
            "example": 6
          },
          "type": {
            "type": "string",
            "description": "Product price type.",
            "enum": [
              "PROMO",
              "REGULAR"
            ],
            "example": "PROMO"
          },
          "description": {
            "type": "string",
            "description": "Product price type description.",
            "example": "Offer price"
          },
          "expiredDate": {
            "type": "object",
            "description": "Product price type expired date.",
            "properties": {
              "value": {
                "type": "string",
                "example": "2020-04-09T14:23:41Z"
              },
              "timezone": {
                "type": "string",
                "example": "IST"
              }
            }
          }
        }
      },
      "catalog.product.storeInfo.metaData": {
        "type": "object",
        "properties": {
          "minOrderQty": {
            "type": "integer",
            "description": "Minimum Order Quantity. (SHIP, PICK_UP, and IN_STORE only)",
            "example": 3
          },
          "maxOrderQty": {
            "type": "integer",
            "description": "Maximum Order Quantity. (SHIP, PICK_UP, and IN_STORE only)",
            "example": 3
          }
        }
      },
      "catalog.product.metaData": {
        "type": "object",
        "properties": {
          "availability": {
            "description": "Product availability. (DELIVERY only)",
            "type": "boolean",
            "example": false
          },
          "alcoholic": {
            "description": "Flag denoting if the product is alcoholic.",
            "type": "boolean",
            "example": false
          },
          "feeAmt": {
            "description": "Product feeAmt. (DELIVERY only)",
            "type": "string",
            "example": "USD 1.00"
          },
          "package": {
            "$ref": "#/components/schemas/catalog.product.metaData.package"
          },
          "size": {
            "description": "Product quantity.",
            "type": "string",
            "example": "1 lb"
          },
          "wineOrSpirits": {
            "description": "Flag denoting if the product is wine or spirits. (DELIVERY only)",
            "type": "boolean",
            "example": false
          },
          "gtin14": {
            "description": "Product gtin14. (SHIP, PICK_UP, and IN_STORE only)",
            "type": "string",
            "example": "00052100071039"
          },
          "nutrition": {
            "description": "Product nutritional preferences. (SHIP, PICK_UP, and IN_STORE only)",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "GLUTEN_FREE",
                "LIVE_NATURALLY",
                "ORGANIC",
                "NON_GMO"
              ],
              "example": [
                "GLUTEN_FREE",
                "LIVE_NATURALLY"
              ]
            }
          },
          "snapEligible": {
            "description": "Indicates if an item is eligible for Supplemental Nutrition Assistance Program (SNAP) or not. (SHIP, PICK_UP, and IN_STORE only)",
            "type": "boolean",
            "example": true
          },
          "restricted": {
            "description": "Indicates if an item has got any restrictions or not. (SHIP, PICK_UP, and IN_STORE only).",
            "type": "boolean",
            "example": true
          }
        }
      },
      "catalog.product.metaData.package": {
        "type": "object",
        "description": "Package details like dimensions and weight. (SHIP, PICK_UP, IN_STORE only)",
        "properties": {
          "length": {
            "type": "number",
            "description": "Product length.",
            "example": "3.55 [in_i]"
          },
          "width": {
            "type": "string",
            "description": "Product width.",
            "example": "8.85 [in_i]"
          },
          "height": {
            "type": "string",
            "description": "Product height.",
            "example": "13.4 [in_i]"
          },
          "shape": {
            "type": "string",
            "description": "Product shape.",
            "example": "Cylindrical"
          },
          "weight": {
            "type": "string",
            "description": "Product weight.",
            "example": "4.2 [lb_av]"
          }
        }
      },
      "catalog.meta": {
        "type": "object",
        "properties": {
          "page": {
            "$ref": "#/components/schemas/catalog.meta.page"
          }
        }
      },
      "catalog.meta.page": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Total number of products.",
            "example": 1
          },
          "offset": {
            "type": "integer",
            "description": "Starting point for paginated results.",
            "example": 0
          },
          "limit": {
            "type": "integer",
            "description": "Number of products per page.",
            "example": 20
          }
        }
      },
      "catalog.postalCodes": {
        "type": "array",
        "items": {
          "properties": {
            "postalCode": {
              "type": "string",
              "description": "5-digit or 9-digit US postal codes are supported.",
              "example": "32789"
            },
            "prices": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/catalog.product.storeInfo.modalityPrices"
              }
            }
          }
        }
      },
      "catalog.image": {
        "type": "array",
        "items": {
          "properties": {
            "perspective": {
              "type": "string",
              "enum": [
                "FRONT",
                "BACK",
                "LEFT",
                "RIGHT"
              ]
            },
            "default": {
              "type": "boolean",
              "example": true
            },
            "resolution": {
              "$ref": "#/components/schemas/catalog.image.resolution"
            }
          }
        }
      },
      "catalog.image.resolution": {
        "type": "object",
        "properties": {
          "sizes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/catalog.image.resolution.sizes"
            }
          }
        }
      },
      "catalog.image.resolution.sizes": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "example": "http://www.example.com/image.jpg"
          },
          "descriptor": {
            "type": "string",
            "example": "medium"
          }
        }
      },
      "catalog.clientError.400": {
        "type": "object",
        "properties": {
          "errors": {
            "$ref": "#/components/schemas/catalog.APIError.clientError"
          }
        }
      },
      "catalog.APIError.clientError": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "example": "Invalid Parameter"
            },
            "reason": {
              "type": "string",
              "example": "Incorrect value for parameter: UPC"
            },
            "datetime": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string",
                  "example": "2020-04-09T14:23:41Z"
                },
                "timezone": {
                  "type": "string",
                  "example": "IST"
                }
              }
            }
          }
        }
      },
      "catalog.serverError.500": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "example": "Internal Server Error"
                },
                "reason": {
                  "type": "string",
                  "example": "Sorry, an unexpected error has occurred. Please try again later."
                },
                "datetime": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "string",
                      "example": "2020-04-09T14:23:41Z"
                    },
                    "timezone": {
                      "type": "string",
                      "example": "IST"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "client_credentials": {
        "required": [
          "grant_type"
        ],
        "type": "object",
        "properties": {
          "grant_type": {
            "type": "string",
            "description": "Must be `client_credentials`.",
            "example": "client_credentials"
          },
          "scope": {
            "type": "string",
            "description": "The level of access your application is requesting.",
            "example": "product.basic",
            "enum": [
              "profile.exists",
              "product.basic",
              "delivery.basic",
              "delivery.basic:rw"
            ]
          }
        }
      },
      "client_credentialsResponse": {
        "type": "object",
        "properties": {
          "expires_in": {
            "type": "number",
            "description": "",
            "example": 1800
          },
          "access_token": {
            "type": "string",
            "description": "",
            "example": "eyJh5GciOiJSUzI1NiGsImtpZCI6Ilo0RnQzbXNrSUj4OGlydDdMQjVjNmc2PSIsInR5cCI6IkpXVmJ9.eqJzY29wZSI6InByb2T1Y3QuY29tcGFjdCBjb3Vwb24uYmFzaWMiLCJhdXRoQXQiOjE1NjUwOTk0OTUzMzIzOTIxMTIsImF1ZCI6InBlcmsvcm1hbmNlLWFnZW50LXB1YmxpYyIsImV4cCI6MTU2NTEwMTI5NSwiaWF0IjoxNTY1MDk5BDkwLCJpc3MiOiJhcGkua3JvZ2VyLmNvbSIsInN1YiI6IjBmZjdkMGIwLWVkOGItNDJmOS1hNTExLWEzMGQyYTAyZDljNSJ9.ej0mov6SGV4n4HiAvduTdYCceMlSo3T06M4Nfh3MfpIjSKzKaLWgd5S0W1EKDXrWz8IE7NTg8EIrL-WKhwdZPt-TWaS7LLjRXLJ0w5rKc44DStgBdvDiCcnKeMsnimjhBlHOiiKUV5y3GbVqJzaDVZwg0j8lP9qtwZP9EIIQ7k409nkskY1pz7l1lZrGotYRJKmnteN5vVQeZ3R8jywIwOOSEbKSgQALVA3Oj02964P7lI6h1GsZ66V5FLA9KU8QXm4ejrFHf1beAIA2zi_fQI3dmW7yj57pWoCECZIjq7Sfo3nGR5rkjEwfyXEK7aTn8oj4_14YHgKRTY-28L96cw"
          },
          "token_type": {
            "type": "string",
            "description": "",
            "example": "bearer"
          }
        }
      },
      "catalog_v2.products-inventory.response": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/catalog_v2.products-inventory.data"
          },
          "meta": {
            "$ref": "#/components/schemas/catalog_v2.products.meta"
          }
        }
      },
      "catalog_v2.products.response": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/catalog_v2.products.data"
          },
          "meta": {
            "$ref": "#/components/schemas/catalog_v2.products.meta"
          }
        }
      },
      "catalog_v2.products-inventory.data": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/catalog_v2.products-inventory"
        }
      },
      "catalog_v2.products.data": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/catalog_v2.products"
        }
      },
      "catalog_v2.products": {
        "type": "object",
        "properties": {
          "upc": {
            "description": "Product identifier, usually an UPC/GTIN.",
            "type": "string",
            "example": "0081801301354"
          },
          "name": {
            "type": "string",
            "description": "Product name.",
            "example": "Simple Truth™ Paso Robles Cabernet Sauvignon"
          },
          "description": {
            "type": "string",
            "description": "Product description.",
            "example": "Our organic Cabernet Sauvignon grapes are grown on one of California's largest organic vineyards, in the hills of Paso Robles on the Central Coast. With its wide day-to-night temperature swings and fossil-rich marine limestones, this growing region provides unique stressors that produce deep, intense flavors with structure and elegance."
          },
          "updatedAt": {
            "description": "Product last updated timestamp.",
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "format": "date-time",
                "example": "2020-04-17T08:11:34.021Z"
              },
              "timezone": {
                "type": "string",
                "example": "UTC"
              }
            }
          },
          "brand": {
            "$ref": "#/components/schemas/catalog_v2.products.brand"
          },
          "categories": {
            "$ref": "#/components/schemas/catalog_v2.products.categories"
          },
          "metadata": {
            "$ref": "#/components/schemas/catalog_v2.products.metadata"
          },
          "images": {
            "description": "Product images.",
            "allOf": [
              {
                "$ref": "#/components/schemas/catalog_v2.image"
              }
            ]
          }
        },
        "xml": {
          "name": "Product"
        }
      },
      "catalog_v2.products-inventory": {
        "type": "object",
        "properties": {
          "upc": {
            "description": "Product identifier, usually an UPC/GTIN.",
            "type": "string",
            "example": "0081801301354"
          },
          "name": {
            "type": "string",
            "description": "Product name.",
            "example": "Simple Truth™ Paso Robles Cabernet Sauvignon"
          },
          "locations": {
            "$ref": "#/components/schemas/catalog_v2.products.locations"
          },
          "stockLevelUpdatedAt": {
            "description": "Product stocklevel last updated timestamp.",
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "format": "date-time",
                "example": "2020-04-17T08:11:34.021Z"
              },
              "timezone": {
                "type": "string",
                "example": "UTC"
              }
            }
          },
          "fulfillmentUpdatedAt": {
            "description": "Product fulfillment last updated timestamp.",
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "format": "date-time",
                "example": "2020-04-17T08:11:34.021Z"
              },
              "timezone": {
                "type": "string",
                "example": "UTC"
              }
            }
          },
          "priceUpdatedAt": {
            "description": "Product price last updated timestamp.",
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "format": "date-time",
                "example": "2020-04-17T08:11:34.021Z"
              },
              "timezone": {
                "type": "string",
                "example": "UTC"
              }
            }
          },
          "updatedAt": {
            "description": "Product stock or stocklevel or fulfillment last updated timestamp.",
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "format": "date-time",
                "example": "2020-04-17T08:11:34.021Z"
              },
              "timezone": {
                "type": "string",
                "example": "UTC"
              }
            }
          }
        },
        "xml": {
          "name": "Product"
        }
      },
      "catalog_v2.products.brand": {
        "type": "object",
        "description": "Product brand",
        "properties": {
          "name": {
            "type": "string",
            "description": "Brand name.",
            "example": "Simple Truth"
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/catalog_v2.products.brand.metadata"
              }
            ]
          }
        },
        "xml": {
          "name": "Brand"
        }
      },
      "catalog_v2.products.brand.metadata": {
        "type": "object",
        "properties": {
          "marketingName": {
            "description": "Kroger's marketing brand name.",
            "type": "string",
            "example": "Simple Truth"
          }
        }
      },
      "catalog_v2.products.category": {
        "type": "object",
        "properties": {
          "parent": {
            "type": "object",
            "properties": {
              "department": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Department name.",
                    "example": "Natural & Organic"
                  },
                  "code": {
                    "description": "Department code",
                    "type": "string",
                    "example": "18"
                  }
                }
              },
              "commodity": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Commodity name.",
                    "example": "Grocery"
                  },
                  "code": {
                    "description": "Commodity code",
                    "type": "string",
                    "example": "012"
                  }
                }
              },
              "subCommodity": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Sub commodity name.",
                    "example": "Bars"
                  },
                  "code": {
                    "description": "Sub commodity code",
                    "type": "string",
                    "example": "00014"
                  }
                }
              }
            }
          }
        },
        "xml": {
          "name": "Category"
        }
      },
      "catalog_v2.products.locations": {
        "type": "array",
        "maxItems": 20,
        "description": "Product locations.",
        "items": {
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier for Kroger store or distribution center location.",
              "example": "70100485"
            },
            "aisleLocations": {
              "$ref": "#/components/schemas/catalog_v2.products.locations.aisleLocations"
            },
            "inventory": {
              "$ref": "#/components/schemas/catalog_v2.products.locations.inventory"
            },
            "fulfillment": {
              "$ref": "#/components/schemas/catalog_v2.products.locations.fulfillment"
            },
            "metadata": {
              "$ref": "#/components/schemas/catalog_v2.products.locations.metadata"
            }
          }
        }
      },
      "catalog_v2.products.locations.metadata": {
        "type": "object",
        "properties": {
          "minOrderQuantity": {
            "type": "integer",
            "description": "Minimum Order Quantity.",
            "example": 3
          },
          "maxOrderQuantity": {
            "type": "integer",
            "description": "Maximum Order Quantity.",
            "example": 3
          }
        }
      },
      "catalog_v2.products.metadata": {
        "type": "object",
        "properties": {
          "package": {
            "$ref": "#/components/schemas/catalog_v2.products.metadata.package"
          },
          "size": {
            "description": "Product quantity.",
            "type": "string",
            "example": "1 lb"
          },
          "gtin14": {
            "description": "Product gtin14.",
            "type": "string",
            "example": "00052100071039"
          },
          "nutritionalPreferences": {
            "description": "Product nutritional preferences.",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "GLUTEN_FREE",
                "LIVE_NATURALLY",
                "ORGANIC",
                "NON_GMO"
              ],
              "example": [
                "GLUTEN_FREE",
                "LIVE_NATURALLY"
              ]
            }
          },
          "countryOfOrigin": {
            "description": "Product's country of origin",
            "type": "string",
            "example": "UNITED STATES"
          },
          "temparature": {
            "$ref": "#/components/schemas/catalog_v2.products.metadata.temparature"
          },
          "snapEligible": {
            "description": "Indicates if an item is eligible for Supplemental Nutrition Assistance Program (SNAP) or not.",
            "type": "boolean",
            "example": true
          },
          "alcoholic": {
            "description": "Indicates if an item is alcoholic",
            "type": "boolean",
            "example": true
          },
          "restrictedItem": {
            "description": "Indicates if an item has any restriction or not",
            "type": "boolean",
            "example": true
          },
          "ageRestrictionFlag": {
            "description": "Indicates if an item has age restriction",
            "type": "boolean",
            "example": true
          }
        }
      },
      "catalog_v2.products.metadata.temparature": {
        "type": "object",
        "description": "Temparature information of a product",
        "properties": {
          "heatSensitive": {
            "type": "boolean",
            "description": "Indicates if an item is heat sensitive or not",
            "example": true
          },
          "indicator": {
            "type": "string",
            "description": "Temparature indicator of a product",
            "example": "Refrigerated"
          }
        }
      },
      "catalog_v2.products.metadata.package": {
        "type": "object",
        "description": "Package details like dimensions and weight.",
        "properties": {
          "length": {
            "type": "string",
            "description": "Product length.",
            "example": "3.55 [in_i]"
          },
          "width": {
            "type": "string",
            "description": "Product width.",
            "example": "8.85 [in_i]"
          },
          "height": {
            "type": "string",
            "description": "Product height.",
            "example": "13.4 [in_i]"
          },
          "shape": {
            "type": "string",
            "description": "Product shape.",
            "example": "Cylindrical"
          },
          "weight": {
            "type": "string",
            "description": "Product weight.",
            "example": "4.2 [lb_av]"
          }
        }
      },
      "catalog_v2.products.meta": {
        "type": "object",
        "properties": {
          "page": {
            "$ref": "#/components/schemas/catalog_v2.products.meta.page"
          }
        }
      },
      "catalog_v2.image": {
        "type": "array",
        "items": {
          "properties": {
            "perspective": {
              "type": "string",
              "enum": [
                "FRONT",
                "BACK",
                "LEFT",
                "RIGHT"
              ]
            },
            "default": {
              "type": "boolean",
              "example": true
            },
            "sizes": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/catalog_v2.image.resolution.sizes"
              }
            }
          }
        }
      },
      "catalog_v2.image.resolution.sizes": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "example": "http://www.example.com/image.jpg"
          },
          "descriptor": {
            "type": "string",
            "example": "medium"
          }
        }
      },
      "catalog_v2.products.locations.inventory": {
        "type": "array",
        "description": "Product inventory",
        "items": {
          "properties": {
            "stock": {
              "$ref": "#/components/schemas/catalog_v2.products.locations.inventory.stock"
            },
            "instock": {
              "type": "boolean",
              "description": "Indicates if a product is instock at a store location or not.",
              "example": true
            },
            "prices": {
              "$ref": "#/components/schemas/catalog_v2.products.locations.inventory.prices"
            }
          }
        }
      },
      "catalog_v2.products.locations.inventory.stock": {
        "type": "object",
        "properties": {
          "availableToSell": {
            "type": "integer",
            "description": "Number of products instock.",
            "example": 4
          },
          "level": {
            "type": "string",
            "description": "Level of stock of particular product.",
            "example": "HIGH"
          }
        }
      },
      "catalog_v2.products.locations.inventory.prices.price.nFor": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "string",
            "description": "Number of product units",
            "example": 4
          },
          "price": {
            "type": "string",
            "description": "Product price if given quantity is bought.",
            "example": "USD 18.00"
          }
        }
      },
      "catalog_v2.products.locations.aisleLocations": {
        "type": "array",
        "description": "Product aisleLocations in a given store location.",
        "items": {
          "properties": {
            "aisle": {
              "type": "string",
              "description": "Product aisle.",
              "example": "aisle"
            },
            "aisleDescription": {
              "type": "string"
            },
            "aisleSide": {
              "type": "string"
            },
            "shelf": {
              "type": "string",
              "description": "Product shelf.",
              "example": "shelf"
            },
            "position": {
              "type": "string",
              "description": "Product position.",
              "example": "position"
            },
            "bayNumber": {
              "type": "string"
            },
            "numberOfFacings": {
              "type": "string"
            }
          }
        }
      },
      "catalog_v2.products.locations.inventory.prices": {
        "type": "array",
        "items": {
          "properties": {
            "regular": {
              "$ref": "#/components/schemas/catalog_v2.products.locations.inventory.prices.price"
            },
            "promo": {
              "$ref": "#/components/schemas/catalog_v2.products.locations.inventory.prices.price"
            }
          }
        }
      },
      "catalog_v2.products.locations.inventory.prices.price": {
        "type": "object",
        "description": "Pricing details for the product.",
        "properties": {
          "unit": {
            "type": "string",
            "description": "Unit price of product",
            "example": "USD 5.00"
          },
          "description": {
            "type": "string",
            "description": "Product price description",
            "example": "Offer price"
          },
          "nFor": {
            "$ref": "#/components/schemas/catalog_v2.products.locations.inventory.prices.price.nFor"
          },
          "soldBy": {
            "description": "Sold by unit or weight.",
            "type": "string",
            "enum": [
              "UNIT",
              "WEIGHT"
            ],
            "example": "UNIT"
          },
          "effectiveDate": {
            "type": "object",
            "description": "Product price type effective date. If there's a promo price, the effective date is associated with it; otherwise, it's associated with the regular price.",
            "properties": {
              "value": {
                "type": "string",
                "example": "2023-04-09T14:23:41Z"
              },
              "timezone": {
                "type": "string",
                "example": "IST"
              }
            }
          },
          "expiredDate": {
            "type": "object",
            "description": "Product price type expired date. If there's a promo price, the expired date is associated with it; otherwise, it's associated with the regular price.",
            "properties": {
              "value": {
                "type": "string",
                "example": "2023-04-10T14:23:41Z"
              },
              "timezone": {
                "type": "string",
                "example": "IST"
              }
            }
          }
        }
      },
      "catalog_v2.products.locations.fulfillment": {
        "type": "object",
        "description": "Product fulfilment",
        "properties": {
          "delivery": {
            "type": "boolean",
            "example": true
          },
          "ship": {
            "type": "boolean",
            "example": false
          },
          "pickup": {
            "type": "boolean",
            "example": true
          },
          "instore": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "catalog_v2.products.categories": {
        "description": "Product categories.",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/catalog_v2.products.category"
        }
      },
      "catalog_v2.products.meta.page": {
        "type": "object",
        "properties": {
          "offset": {
            "type": "integer",
            "description": "Starting point for paginated results.",
            "example": 0
          },
          "size": {
            "type": "integer",
            "description": "Number of products per page.",
            "example": 20
          },
          "hasMore": {
            "type": "boolean",
            "description": "An optional flag to indicate if there are more products available beyond the current page to retrieve."
          }
        }
      },
      "catalog_v2.clientError.400": {
        "type": "object",
        "properties": {
          "errors": {
            "$ref": "#/components/schemas/catalog_v2.APIError.clientError"
          }
        }
      },
      "catalog_v2.APIError.clientError": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "example": "Invalid Parameter"
            },
            "reason": {
              "type": "string",
              "example": "Incorrect value for parameter: upc"
            },
            "datetime": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string",
                  "example": "2020-04-09T14:23:41Z"
                },
                "timezone": {
                  "type": "string",
                  "example": "IST"
                }
              }
            }
          }
        }
      },
      "catalog_v2.serverError.500": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "example": "Internal Server Error"
                },
                "reason": {
                  "type": "string",
                  "example": "Sorry, an unexpected error has occurred. Please try again later."
                },
                "datetime": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "string",
                      "example": "2020-04-09T14:23:41Z"
                    },
                    "timezone": {
                      "type": "string",
                      "example": "IST"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "deliveries.deliveryModel": {
        "type": "object",
        "properties": {
          "createdAt": {
            "$ref": "#/components/schemas/deliveries.datetimeModel"
          },
          "id": {
            "type": "string",
            "description": "The delivery ID.",
            "example": "c6627fe6-5e39-41f5-b83c-5d586f7d034b"
          },
          "spec": {
            "$ref": "#/components/schemas/deliveries.deliverySpecModel"
          },
          "status": {
            "$ref": "#/components/schemas/deliveries.deliveryStatusModel"
          },
          "modifiedAt": {
            "$ref": "#/components/schemas/deliveries.datetimeModel"
          }
        }
      },
      "deliveries.deliverySpecModel": {
        "type": "object",
        "properties": {
          "beginDate": {
            "$ref": "#/components/schemas/deliveries.datetimeModel"
          },
          "dropoff": {
            "$ref": "#/components/schemas/deliveries.dropoffModel"
          },
          "endDate": {
            "$ref": "#/components/schemas/deliveries.datetimeModel"
          },
          "includesAlcohol": {
            "type": "boolean",
            "description": "Indicated if the delivery includes alcohol.",
            "example": false
          },
          "orderNo": {
            "type": "string",
            "description": "The delivery order number.",
            "example": "1234567890"
          },
          "orderItems": {
            "type": "array",
            "description": "A list of items associated with the delivery.",
            "items": {
              "$ref": "#/components/schemas/deliveries.orderItemModel"
            }
          },
          "pickup": {
            "$ref": "#/components/schemas/deliveries.pickupModel"
          }
        },
        "description": "Static delivery information."
      },
      "deliveries.deliveryStatusModel": {
        "type": "object",
        "properties": {
          "cancellationNote": {
            "type": "string",
            "description": "The cancellation reason if delivery was cancelled by a partner.",
            "example": "Car is broken."
          },
          "courierName": {
            "type": "string",
            "description": "The name of the delivery partner.",
            "example": "delivery-partner"
          },
          "state": {
            "type": "string",
            "description": "The current delivery status.",
            "example": "PendingConfirmation",
            "enum": [
              "Initial",
              "PendingConfirmation",
              "Scheduled",
              "NotConfirmed",
              "Edited",
              "EditsNotConfirmed",
              "EnRouteToPickup",
              "AtPickup",
              "PickedUp",
              "EnRouteToDropoff",
              "Delivered",
              "Undeliverable",
              "DeletedByKroger",
              "CanceledByKroger",
              "CancellationConfirmationPending",
              "CancellationConfirmed",
              "CanceledByPartner",
              "NoCourierAvailable",
              "Illegal"
            ]
          },
          "driver": {
            "$ref": "#/components/schemas/deliveries.deliveryDriverInformationModel"
          },
          "dropoffEta": {
            "$ref": "#/components/schemas/deliveries.datetimeModel"
          },
          "pickupEta": {
            "$ref": "#/components/schemas/deliveries.datetimeModel"
          },
          "trackingUrl": {
            "type": "string",
            "description": "Delivery tracking URL",
            "example": "https://trackingurl.com"
          }
        },
        "description": "The delivery status contains dynamic delivery information."
      },
      "deliveries.deliveryUpdateModel": {
        "required": [
          "action"
        ],
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "Actions to perform on delivery. Based on chosen action, the client needs to provide a different payload. For more details, see the payload model.\nPossible values:\n* `CONFIRM` - Confirms that the delivery partner started working on the delivery. \n* `CONFIRM_EDITING` - Confirms that the delivery partner accepted the latest updates \nto the previously confirmed delivery. This can happen when the customer \nchanges delivery notes.\n* `DECLINE` - Declines an assigned delivery. This can happen when the delivery \npartner has a delivery available to work on, but there are no drivers to perform \nthe delivery.\n* `EN_ROUTE_TO_PICK_UP` - Indicates that the delivery driver is on the way to pick \nup the shipment.\n* `AT_PICKUP` - Indicates that the delivery driver is at the pick up location.\n* `EN_ROUTE_TO_DROPOFF` - Indicates that the delivery driver is on the way to drop \noff the shipment.\n* `DELIVERED` - Indicates that the delivery driver has completed the delivery successfully.\n* `UNDELIVERABLE` - Indicated that the delivery driver could not successfully completed the delivery.\n* `CANCEL` - Cancels a previously confirmed delivery. For example, the delivery driver \nconfirmed a delivery but then got stuck in traffic and was not able to complete the \ndelivery in time.\n* `CONFIRM_CANCELLATION` - Accepts a delivery cancellation initiated by the customer.",
            "enum": [
              "CONFIRM",
              "CONFIRM_EDITING",
              "DECLINE",
              "EN_ROUTE_TO_PICK_UP",
              "AT_PICKUP",
              "PICK_UP",
              "EN_ROUTE_TO_DROPOFF",
              "DELIVERED",
              "UNDELIVERABLE",
              "CANCEL",
              "CONFIRM_CANCELLATION"
            ]
          },
          "payload": {
            "$ref": "#/components/schemas/deliveries.deliveryUpdatePayloadModel"
          }
        }
      },
      "deliveries.deliveryUpdatePayloadModel": {
        "type": "object",
        "properties": {
          "cancellationNote": {
            "type": "string",
            "description": "The reason why the confirmed delivery is being canceled.",
            "example": "Car is broken."
          },
          "driver": {
            "$ref": "#/components/schemas/deliveries.payload.deliveryDriverInformationModel"
          },
          "dropoffEta": {
            "$ref": "#/components/schemas/deliveries.payload.dropoff"
          },
          "pickupEta": {
            "$ref": "#/components/schemas/deliveries.payload.pickup"
          },
          "trackingUrl": {
            "type": "string",
            "description": "The URL where the customer can track the delivery in 'real' time. Required when using the `CONFIRM` action.",
            "example": "https://trackingurl.com"
          }
        }
      },
      "deliveries.deliveryDriverInformationModel": {
        "type": "object",
        "description": "Information about the delivery driver and their vehicle.",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "The first name of the driver.",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the driver.",
            "example": "Doe"
          },
          "vehicle": {
            "type": "object",
            "properties": {
              "licensePlate": {
                "type": "string",
                "description": "The license plate number of the vehicle.",
                "example": "ABC123"
              },
              "year": {
                "type": "string",
                "description": "The year of the vehicle.",
                "example": "2018"
              },
              "model": {
                "type": "string",
                "description": "The model of the vehicle.",
                "example": "Challenger"
              },
              "make": {
                "type": "string",
                "description": "The make of the vehicle.",
                "example": "Dodge"
              }
            },
            "description": "Information about the vehicle used for the delivery."
          }
        }
      },
      "deliveries.payload.deliveryDriverInformationModel": {
        "type": "object",
        "description": "Information about the delivery driver and their vehicle. Required when using the `EN_ROUTE_TO_PICK_UP` action.",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "The first name of the driver.",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the driver.",
            "example": "Doe"
          },
          "vehicle": {
            "type": "object",
            "properties": {
              "licensePlate": {
                "type": "string",
                "description": "The license plate number of the vehicle.",
                "example": "ABC123"
              },
              "year": {
                "type": "string",
                "description": "The year of the vehicle.",
                "example": "2018"
              },
              "model": {
                "type": "string",
                "description": "The model of the vehicle.",
                "example": "Challenger"
              },
              "make": {
                "type": "string",
                "description": "The make of the vehicle.",
                "example": "Dodge"
              }
            },
            "description": "Information about the vehicle used for the delivery."
          }
        }
      },
      "deliveries.datetimeModel": {
        "type": "object",
        "properties": {
          "timezone": {
            "type": "string",
            "description": "The datetime timezone in IANA format.",
            "example": "America/New_York"
          },
          "value": {
            "type": "string",
            "description": "The datetime value in ISO 8601 format.",
            "example": "2018-02-17T12:00Z"
          }
        }
      },
      "deliveries.payload.dropoff": {
        "required": [
          "timezone",
          "value"
        ],
        "type": "object",
        "description": "The estimated time of arrival for the dropoff. Required when using the `CONFIRM` action.",
        "properties": {
          "timezone": {
            "type": "string",
            "description": "The datetime timezone in IANA format.",
            "example": "America/New_York"
          },
          "value": {
            "type": "string",
            "description": "The datetime value in ISO 8601 format.",
            "example": "2018-02-17T12:00Z"
          }
        }
      },
      "deliveries.payload.pickup": {
        "required": [
          "timezone",
          "value"
        ],
        "type": "object",
        "description": "The estimated time the pickup will be available. Required when using the `CONFIRM` action.",
        "properties": {
          "timezone": {
            "type": "string",
            "description": "The datetime timezone in IANA format.",
            "example": "America/New_York"
          },
          "value": {
            "type": "string",
            "description": "The datetime value in ISO 8601 format.",
            "example": "2018-02-17T12:00Z"
          }
        }
      },
      "deliveries.addressModel": {
        "type": "object",
        "properties": {
          "line1": {
            "type": "string",
            "description": "The street address of the location.",
            "example": "123 Some St"
          },
          "line2": {
            "type": "string",
            "description": "An optional secondary address of the location.",
            "example": "Unit 103"
          },
          "country": {
            "type": "string",
            "description": "The county of the location.",
            "example": "USA"
          },
          "locality": {
            "type": "string",
            "description": "The city of the location.",
            "example": "Cincinnati"
          },
          "name": {
            "type": "string",
            "description": "The name of the store location.",
            "example": "Kroger Maineville"
          },
          "postalCode": {
            "type": "string",
            "description": "The postal code of the location.",
            "example": "12345"
          },
          "region": {
            "type": "string",
            "description": "The state or province of the location. US locations use a two-letter codes for states.",
            "example": "OH"
          }
        }
      },
      "deliveries.dropoffModel": {
        "type": "object",
        "properties": {
          "contact": {
            "$ref": "#/components/schemas/deliveries.personContactModel"
          },
          "address": {
            "$ref": "#/components/schemas/deliveries.addressModel"
          },
          "signatureRequired": {
            "type": "boolean",
            "description": "Indicates if a signature required for the delivery.",
            "example": true
          },
          "specialInstructions": {
            "type": "string",
            "description": "Any special instructions for the drop-off.",
            "example": "Use side door."
          }
        },
        "description": "Drop-off information."
      },
      "deliveries.pickupModel": {
        "type": "object",
        "properties": {
          "contact": {
            "$ref": "#/components/schemas/deliveries.businessContactModel"
          },
          "address": {
            "$ref": "#/components/schemas/deliveries.addressModel"
          },
          "specialInstructions": {
            "type": "string",
            "description": "Any special instructions for the pick-up.",
            "example": "Call 123."
          },
          "locationId": {
            "type": "string",
            "description": "The locationId of the pick-up location.",
            "example": "01400025"
          }
        },
        "description": "Pick-up information."
      },
      "deliveries.businessContactModel": {
        "type": "object",
        "properties": {
          "companyName": {
            "type": "string",
            "description": "The name of the delivery company.",
            "example": "Quick-Delivery"
          },
          "emailAddress": {
            "type": "string",
            "description": "The email of the deliver company.",
            "format": "email",
            "example": "example@example.com"
          },
          "phone": {
            "$ref": "#/components/schemas/deliveries.phoneModel"
          }
        }
      },
      "deliveries.personContactModel": {
        "type": "object",
        "properties": {
          "emailAddress": {
            "type": "string",
            "description": "The customer's email address.",
            "format": "email",
            "example": "person@mail.com"
          },
          "firstName": {
            "type": "string",
            "description": "The customer's first name.",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "The customer's last name.",
            "example": "Doe"
          },
          "phone": {
            "$ref": "#/components/schemas/deliveries.phoneModel"
          }
        }
      },
      "deliveries.phoneModel": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "The customer's phone number.",
            "example": 11231231234
          },
          "smsEnabled": {
            "type": "boolean",
            "description": "Indicates if the customer's phone is SMS enabled.",
            "example": true
          }
        }
      },
      "deliveries.deliveryResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/deliveries.deliveryModel"
          },
          "meta": {
            "$ref": "#/components/schemas/deliveries.metaModel"
          }
        }
      },
      "deliveries.deliveriesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/deliveries.deliveryModel"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/deliveries.metaModel"
          }
        }
      },
      "deliveries.metaModel": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "example": {
          "filter": {
            "followingAction": {
              "equals": [
                "CONFIRM"
              ]
            }
          }
        }
      },
      "deliveries.orderItemModel": {
        "type": "object",
        "properties": {
          "unit": {
            "type": "string",
            "description": "A description of the item unit. <br>\nPossible values:\n* `Tote`\n* `Oversized`",
            "example": "Tote"
          },
          "quantity": {
            "type": "number",
            "description": "The quantity of units.",
            "example": 12
          }
        },
        "description": "Item data for determining the total order size."
      },
      "ErrorModel": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "timestamp": {
            "type": "number"
          }
        }
      },
      "identity.profileModel": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "firstName": {
                "type": "string",
                "description": "The customer's first name.",
                "example": "John"
              },
              "lastName": {
                "type": "string",
                "description": "The customer's last name.",
                "example": "Doe"
              },
              "addresses": {
                "type": "array",
                "description": "The customer's address.",
                "items": {
                  "$ref": "#/components/schemas/identity.profileAddressModel"
                }
              },
              "loyalty": {
                "$ref": "#/components/schemas/identity.profileLoyaltyModel"
              },
              "id": {
                "type": "string",
                "description": "The customer's profile Id.",
                "example": "53990804-cfd1-43f3-8256-bdc9817a4fd0"
              },
              "email": {
                "type": "string",
                "description": "The customer's email address.",
                "example": "noreply@kroger.com"
              },
              "phoneNumbers": {
                "type": "array",
                "description": "An array of the customer's phone numbers.",
                "items": {
                  "$ref": "#/components/schemas/identity.profilePhoneNumberModel"
                }
              }
            }
          },
          "meta": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "identity.profilePhoneNumberModel": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of the phone number.",
            "example": "home"
          },
          "value": {
            "type": "string",
            "description": "The customer's phone number.",
            "example": "555-555-5555"
          }
        }
      },
      "identity.profileAddressModel": {
        "type": "object",
        "properties": {
          "addressLine1": {
            "type": "string",
            "description": "The customer's address.",
            "example": "1014 Vine St."
          },
          "addressLine2": {
            "type": "string",
            "description": "An optional secondary address.",
            "example": ""
          },
          "city": {
            "type": "string",
            "description": "The city of the address.",
            "example": "Cincinnati"
          },
          "stateCode": {
            "type": "string",
            "description": "The two-letter code of the state.",
            "example": "OH"
          },
          "postalCode": {
            "type": "string",
            "description": "The postal code of the address.",
            "example": "45202"
          },
          "countryCode": {
            "type": "string",
            "description": "The country code of the address.",
            "example": "US"
          },
          "addressType": {
            "type": "string",
            "description": "The type of address.",
            "example": "home"
          }
        }
      },
      "identity.profileLoyaltyResponseModel": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "loyalty": {
                "$ref": "#/components/schemas/identity.profileLoyaltyModel"
              }
            }
          },
          "meta": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "identity.profileLoyaltyModel": {
        "type": "object",
        "description": "The customer's loyalty information.",
        "properties": {
          "cardNumber": {
            "type": "string",
            "description": "The customer's loyalty card number.",
            "example": "0123456789"
          }
        }
      },
      "Invalid_locationId": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "number",
            "example": 1569851999383
          },
          "code": {
            "type": "string",
            "example": "API-4101-400"
          },
          "reason": {
            "type": "string",
            "example": "Field 'locationId' must have a length of 8 characters"
          }
        }
      },
      "Invalid_limit": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "number",
            "example": 1569851999383
          },
          "code": {
            "type": "string",
            "example": "API-4101-400"
          },
          "reason": {
            "type": "string",
            "example": "Field 'limit' must be a number between 1 and 200 (inclusive)"
          }
        }
      },
      "Invalid_parameter": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "number",
            "example": 1569851999383
          },
          "code": {
            "type": "string",
            "example": "API-4101-400"
          },
          "reason": {
            "type": "string",
            "example": "Invalid parameters"
          }
        }
      },
      "Invalid_UPC": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "number",
            "example": 1569851999383
          },
          "code": {
            "type": "string",
            "example": "API-4101-400"
          },
          "reason": {
            "type": "string",
            "example": "UPC must have a length of 13 characters"
          }
        }
      },
      "Invalid_modality": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "number",
            "example": 1569851999383
          },
          "code": {
            "type": "string",
            "example": "API-4101-400"
          },
          "reason": {
            "type": "string",
            "example": "Modality must be omitted or equal to one of the following codes: SHIP, DELIVERY, PICKUP"
          }
        }
      },
      "Invalid_zipCode": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "number",
            "example": 1569851999383
          },
          "code": {
            "type": "string",
            "example": "API-4101-400"
          },
          "reason": {
            "type": "string",
            "example": "Field 'filter.zipCode.near' must 5 digits"
          }
        }
      },
      "Invalid_email": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "number",
            "example": 1569851999383
          },
          "code": {
            "type": "string",
            "example": "API-4101-400"
          },
          "reason": {
            "type": "string",
            "example": "Missing parameter 'email' on request"
          }
        }
      },
      "Invalid_latLong": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "number",
            "example": 1569851999383
          },
          "code": {
            "type": "string",
            "example": "API-4101-400"
          },
          "reason": {
            "type": "string",
            "example": "Field 'filter.latLong.near' improper coordinate location, must be on Earth"
          }
        }
      },
      "Invalid_radiusInMiles": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "number",
            "example": 1569851999383
          },
          "code": {
            "type": "string",
            "example": "API-4101-400"
          },
          "reason": {
            "type": "string",
            "example": "Field 'filter.radiusInMiles' outside of distance limits, distance range is 1 - 100 miles."
          }
        }
      },
      "Invalid_department": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "number",
            "example": 1569851999383
          },
          "code": {
            "type": "string",
            "example": "API-4101-400"
          },
          "reason": {
            "type": "string",
            "example": "Field 'filter.department' contains invalid department ID(s)"
          }
        }
      },
      "Invalid_scope": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "invalid_scope"
          },
          "error_description": {
            "type": "string",
            "example": "invalid scope"
          }
        }
      },
      "Invalid_grant_type": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "unsupported_grant_type"
          },
          "error_description": {
            "type": "string",
            "example": "invalid grant_type"
          }
        }
      },
      "Invalid_refresh_token": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "invalid_request"
          },
          "error_description": {
            "type": "string",
            "example": "invalid refresh_token"
          }
        }
      },
      "Invalid_code": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "invalid_request"
          },
          "error_description": {
            "type": "string",
            "example": "invalid code"
          }
        }
      },
      "Invalid_access": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "invalid_request"
          },
          "error_description": {
            "type": "string",
            "example": "The resource owner denied the request"
          }
        }
      },
      "Invalid_credentials": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "unauthorized"
          },
          "error_description": {
            "type": "string",
            "example": "invalid credentials"
          }
        }
      },
      "Invalid_redirect_uri": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "invalid_request"
          },
          "error_description": {
            "type": "string",
            "example": "The redirect_uri did not match the registered redirect_uri for this application"
          }
        }
      },
      "Invalid_cart_exists": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "number",
            "example": 1569851999383
          },
          "code": {
            "type": "string",
            "example": "API-4101-400"
          },
          "reason": {
            "type": "string",
            "example": "Cart exists for user"
          }
        }
      },
      "Invalid_parameters": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "number",
            "example": 1569851999383
          },
          "code": {
            "type": "string",
            "example": "API-4101-400"
          },
          "reason": {
            "type": "string",
            "example": "Cannot parse parameters"
          }
        }
      },
      "locations.address": {
        "type": "object",
        "properties": {
          "addressLine1": {
            "type": "string",
            "description": "The street address of the location.",
            "example": "2900 W. St. Rt. 22 & 3"
          },
          "addressLine2": {
            "type": "string",
            "description": "An optional secondary address of the location.",
            "example": ""
          },
          "city": {
            "type": "string",
            "description": "The city of the location.",
            "example": "Maineville"
          },
          "county": {
            "type": "string",
            "description": "The county of the location.",
            "example": "WARREN COUNTY"
          },
          "state": {
            "type": "string",
            "description": "The state or province of the location. US locations use a two-letter codes for states.",
            "example": "OH"
          },
          "zipCode": {
            "type": "string",
            "description": "The postal code of the location.",
            "example": "45039"
          }
        }
      },
      "locations.chain": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the chain.",
            "example": "KROGER"
          },
          "divisionNumbers": {
            "type": "array",
            "description": "A list of all management division numbers within the brand.",
            "example": [
              "01",
              "02"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "locations.chainResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/locations.chain"
          },
          "meta": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "locations.chainsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/locations.chain"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        }
      },
      "locations.dailyHours": {
        "type": "object",
        "properties": {
          "open": {
            "type": "string",
            "description": "The time the department or location opens.",
            "example": "05:00"
          },
          "close": {
            "type": "string",
            "description": "The time the department or location closes.",
            "example": 1380
          },
          "open24": {
            "type": "boolean",
            "description": "Indicates if the location or department is open 24 hours.",
            "example": false
          }
        }
      },
      "locations.departmentAtLocation": {
        "type": "object",
        "properties": {
          "departmentId": {
            "type": "string",
            "description": "The 2-digit department code.",
            "example": "01"
          },
          "name": {
            "type": "string",
            "description": "The name of the department.",
            "example": "Drug & General Merchandise"
          },
          "phone": {
            "type": "string",
            "description": "The phone number of the department.",
            "example": "5551234567"
          },
          "hours": {
            "$ref": "#/components/schemas/locations.departmentHours"
          }
        }
      },
      "locations.department": {
        "type": "object",
        "properties": {
          "departmentId": {
            "type": "string",
            "description": "The 2-digit department code.",
            "example": "01"
          },
          "name": {
            "type": "string",
            "description": "The name of the department.",
            "example": "Drug & General Merchandise"
          }
        }
      },
      "locations.departmentResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/locations.department"
          },
          "meta": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "locations.departmentsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/locations.department"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        }
      },
      "locations.geoLocation": {
        "type": "object",
        "properties": {
          "latLng": {
            "type": "string",
            "description": "The latitude and longitude of the location, comma separated",
            "example": "39.3110881,-84.2751167"
          },
          "latitude": {
            "type": "number",
            "description": "The latitude of the location",
            "example": 39.3110881
          },
          "longitude": {
            "type": "number",
            "description": "The longitude of the location",
            "example": -84.2751167
          }
        }
      },
      "locations.locationHours": {
        "type": "object",
        "properties": {
          "Open24": {
            "type": "boolean",
            "description": "Indicates if the location is open 24 hours."
          },
          "gmtOffset": {
            "type": "string",
            "description": "The utc timezone offset from gmt.",
            "example": "(UTC-05:00) Eastern Time (US Canada)"
          },
          "timezone": {
            "type": "string",
            "description": "The timezone of the location.",
            "example": "America/New_York"
          },
          "friday": {
            "$ref": "#/components/schemas/locations.dailyHours"
          },
          "monday": {
            "$ref": "#/components/schemas/locations.dailyHours"
          },
          "saturday": {
            "$ref": "#/components/schemas/locations.dailyHours"
          },
          "sunday": {
            "$ref": "#/components/schemas/locations.dailyHours"
          },
          "thursday": {
            "$ref": "#/components/schemas/locations.dailyHours"
          },
          "tuesday": {
            "$ref": "#/components/schemas/locations.dailyHours"
          },
          "wednesday": {
            "$ref": "#/components/schemas/locations.dailyHours"
          }
        }
      },
      "locations.departmentHours": {
        "type": "object",
        "properties": {
          "Open24": {
            "type": "boolean",
            "description": "Indicates if the location is open 24 hours.",
            "example": false
          },
          "monday": {
            "$ref": "#/components/schemas/locations.dailyHours"
          },
          "tuesday": {
            "$ref": "#/components/schemas/locations.dailyHours"
          },
          "wednesday": {
            "$ref": "#/components/schemas/locations.dailyHours"
          },
          "thursday": {
            "$ref": "#/components/schemas/locations.dailyHours"
          },
          "friday": {
            "$ref": "#/components/schemas/locations.dailyHours"
          },
          "saturday": {
            "$ref": "#/components/schemas/locations.dailyHours"
          },
          "sunday": {
            "$ref": "#/components/schemas/locations.dailyHours"
          }
        }
      },
      "locations.location": {
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/locations.address"
          },
          "chain": {
            "type": "string",
            "description": "The name of the chain.",
            "example": "KROGER"
          },
          "phone": {
            "type": "string",
            "description": "The phone number of the location.",
            "example": "5551234567"
          },
          "departments": {
            "type": "array",
            "description": "The available departments at the location.",
            "items": {
              "$ref": "#/components/schemas/locations.departmentAtLocation"
            }
          },
          "geolocation": {
            "$ref": "#/components/schemas/locations.geoLocation"
          },
          "hours": {
            "$ref": "#/components/schemas/locations.locationHours"
          },
          "locationId": {
            "type": "string",
            "description": "The 3-digit management division number followed by the 5-digit store number.",
            "example": "01400376"
          },
          "storeNumber": {
            "type": "string",
            "description": "The 5-digit store number.",
            "example": "00376"
          },
          "divisionNumber": {
            "type": "string",
            "description": "The 3-digit management division number.",
            "example": "014"
          },
          "name": {
            "type": "string",
            "description": "The name of the location. The name generally consists of the chain followed by a vanity name.",
            "example": "Kroger Landen"
          }
        }
      },
      "locations.locationSearchResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/locations.location"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        }
      },
      "locations.locationResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/locations.location"
          },
          "meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        }
      },
      "MetaModel": {
        "type": "object",
        "properties": {
          "pagination": {
            "type": "object",
            "properties": {
              "total": {
                "type": "number"
              },
              "start": {
                "type": "number"
              },
              "limit": {
                "type": "number"
              }
            }
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "id of the category to which the product belongs",
            "example": 5
          },
          "name": {
            "type": "string",
            "description": "name of the category",
            "example": "Dip"
          },
          "slug": {
            "type": "string",
            "description": "human-readable, unique identifier of the category",
            "example": "dip"
          },
          "parentCategory": {
            "$ref": "#/components/schemas/Category"
          },
          "status": {
            "type": "string",
            "description": "field to enable/disable the field in the api response",
            "enum": [
              "ENABLED",
              "HIDDEN"
            ],
            "example": "ENABLED"
          }
        },
        "xml": {
          "name": "Category"
        }
      },
      "ModalityPrices": {
        "type": "object",
        "properties": {
          "regular": {
            "$ref": "#/components/schemas/Price"
          },
          "promo": {
            "type": "object"
          }
        }
      },
      "Price": {
        "type": "object",
        "properties": {
          "unitPrice": {
            "type": "number",
            "format": "float",
            "example": 0.99
          },
          "nForPrice": {
            "type": "number",
            "format": "float",
            "example": 0.99
          },
          "nfor": {
            "type": "integer",
            "example": 1
          },
          "type": {
            "type": "string",
            "example": "REGULAR"
          },
          "description": {
            "type": "string",
            "example": null
          },
          "currency": {
            "type": "string",
            "example": ""
          }
        }
      },
      "Resolution": {
        "type": "object",
        "properties": {
          "height": {
            "type": "string",
            "example": ""
          },
          "width": {
            "type": "string",
            "example": ""
          },
          "sizes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Sizes"
            }
          }
        }
      },
      "Sizes": {
        "type": "object",
        "properties": {
          "size": {
            "type": "string",
            "example": "xlarge"
          },
          "url": {
            "type": "string",
            "example": "https://www.kroger.com/product/images/xlarge/front/0000000024481?krbmid=e4ac880d-1697-487a-810d-d2181874eca4"
          }
        }
      },
      "oauth2.codeResponse": {
        "type": "string",
        "description": "Your registered redirect with the authorization code appended to the URL.",
        "example": "https://YourRedirectUri.com/callback?code=zWrT1GkdshSadIowJW0Rm4w2kKhOzv1W"
      },
      "productId": {
        "type": "string",
        "description": "The productId of the product to return.",
        "example": "0001111060903",
        "maxLength": 13,
        "minLength": 13,
        "maximum": 200
      },
      "products.productModel": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "The UPC of the product.",
            "example": "0001111041700"
          },
          "aisleLocations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/products.productAisleLocationModel"
            }
          },
          "brand": {
            "type": "string",
            "description": "The brand name of the product.",
            "example": "Kroger"
          },
          "categories": {
            "type": "array",
            "description": "The category the product belongs to.",
            "items": {
              "type": "string",
              "example": "Dairy"
            }
          },
          "countryOrigin": {
            "type": "string",
            "description": "The country of origin of the product.",
            "example": "United States"
          },
          "description": {
            "type": "string",
            "description": "The name of the product.",
            "example": "Kroger 2% Reduced Fat Milk"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/products.productItemModel"
            }
          },
          "itemInformation": {
            "$ref": "#/components/schemas/products.productBoxedDimensionsModel"
          },
          "temperature": {
            "$ref": "#/components/schemas/products.productTemperatureModel"
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/products.productImageModel"
            }
          },
          "taxonomies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/products.productTaxonomyModel"
            }
          },
          "upc": {
            "type": "string",
            "description": "The UPC of the product.",
            "example": "0001111041700"
          }
        }
      },
      "products.productPayloadModel": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/products.productModel"
          },
          "meta": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "products.productsPayloadModel": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/products.productModel"
            }
          },
          "meta": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "products.productAisleLocationModel": {
        "type": "object",
        "properties": {
          "bayNumber": {
            "type": "string",
            "description": "The bay number of the aisle.",
            "example": "13"
          },
          "description": {
            "type": "string",
            "description": "The location in the store.",
            "example": "Aisle 35"
          },
          "number": {
            "type": "string",
            "description": "The aisle number in the store.",
            "example": "35"
          },
          "numberOfFacings": {
            "type": "string",
            "description": "The number of facings.",
            "example": "5"
          },
          "sequenceNumber": {
            "type": "string",
            "description": "The sequence of the aisle in the store.",
            "example": "3"
          },
          "side": {
            "type": "string",
            "description": "The side of the aisle where the product is located.",
            "example": "L"
          },
          "shelfNumber": {
            "type": "string",
            "description": "The shelf number in the aisle.",
            "example": "2"
          },
          "shelfPositionInBay": {
            "type": "string",
            "description": "The position of the shelf in the bay.",
            "example": "1"
          }
        }
      },
      "products.productBoxedDimensionsModel": {
        "type": "object",
        "description": "Information about the product's size.",
        "properties": {
          "depth": {
            "type": "string",
            "description": "The depth of the product.",
            "example": "3.5"
          },
          "height": {
            "type": "string",
            "description": "The height of the product.",
            "example": "2.0"
          },
          "width": {
            "type": "string",
            "description": "The length of the product.",
            "example": "4.75"
          }
        }
      },
      "products.productItemModel": {
        "type": "object",
        "properties": {
          "itemId": {
            "type": "string",
            "description": "The UPC of the item.",
            "example": "0001111041700"
          },
          "inventory": {
            "$ref": "#/components/schemas/products.productItemInventoryModel"
          },
          "favorite": {
            "type": "boolean"
          },
          "fulfillment": {
            "$ref": "#/components/schemas/products.productItemFulfillmentModel"
          },
          "price": {
            "$ref": "#/components/schemas/products.productItemPriceModel"
          },
          "nationalPrice": {
            "$ref": "#/components/schemas/products.productItemPriceModel"
          },
          "size": {
            "type": "string",
            "description": "A description of the item size.",
            "example": "1 gal"
          },
          "soldBy": {
            "type": "string",
            "description": "Indicates how this item is sold. Values returned are typically either \"weight\" or \"unit\"",
            "example": "unit"
          }
        }
      },
      "products.productItemInventoryModel": {
        "type": "object",
        "properties": {
          "stockLevel": {
            "type": "string",
            "enum": [
              "HIGH",
              "LOW",
              "TEMPORARILY_OUT_OF_STOCK"
            ],
            "description": "Indicates the level of stock.",
            "example": "HIGH"
          }
        }
      },
      "products.productItemFulfillmentModel": {
        "type": "object",
        "properties": {
          "curbside": {
            "type": "boolean",
            "description": "Indicates if the product is available for curbside pickup."
          },
          "delivery": {
            "type": "boolean",
            "description": "Indicates if the product is available for home delivery."
          },
          "instore": {
            "type": "boolean",
            "description": "Indicates if the product is available in store. This does not indicate that the item is in stock."
          },
          "shiptohome": {
            "type": "boolean",
            "description": "Indicates if the product is available to be shipped from a fulfillment center."
          }
        }
      },
      "products.productItemPriceModel": {
        "type": "object",
        "properties": {
          "regular": {
            "type": "number",
            "description": "The regular price of the item.",
            "example": 1.99
          },
          "promo": {
            "type": "number",
            "description": "The sale price of the item.",
            "example": 1.59
          },
          "regularPerUnitEstimate": {
            "type": "number",
            "description": "The estimated price of 1 unit of the item.",
            "example": 1.99
          },
          "promoPerUnitEstimate": {
            "type": "number",
            "description": "The estimated sale price of 1 unit of the item.",
            "example": 1.59
          }
        }
      },
      "products.productImageModel": {
        "type": "object",
        "description": "Information about the product's image.",
        "properties": {
          "id": {
            "type": "string",
            "description": "An optional identifier of the image size."
          },
          "perspective": {
            "type": "string",
            "description": "A description of the product image view.",
            "example": "front"
          },
          "default": {
            "type": "boolean"
          },
          "sizes": {
            "type": "array",
            "description": "An array of image sizes.",
            "items": {
              "$ref": "#/components/schemas/products.productImageSizeModel"
            }
          }
        }
      },
      "products.productImageSizeModel": {
        "type": "object",
        "description": "Information about the product's image.",
        "properties": {
          "id": {
            "type": "string",
            "description": "An optional identifier of the image size.",
            "example": "7df2d0a3-8349-44d4-9512-1dab89e675a9"
          },
          "size": {
            "type": "string",
            "description": "A description of the image size.",
            "example": "medium"
          },
          "url": {
            "type": "string",
            "description": "The URL location of the image.",
            "example": "https://www.kroger.com/product/images/medium/front/0001111041700"
          }
        }
      },
      "products.productTaxonomyModel": {
        "type": "object",
        "properties": {
          "department": {
            "$ref": "#/components/schemas/products.productTaxonomyDepartmentModel"
          },
          "commodity": {
            "$ref": "#/components/schemas/products.productTaxonomyCommodityModel"
          },
          "subCommodity": {
            "$ref": "#/components/schemas/products.productTaxonomySubCommodityModel"
          }
        }
      },
      "products.productTaxonomyDepartmentModel": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "example": "Grocery"
          }
        }
      },
      "products.productTaxonomyCommodityModel": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "example": "Beverages"
          }
        }
      },
      "products.productTaxonomySubCommodityModel": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "example": "Milk & Milk Substitutes"
          }
        }
      },
      "products.productTemperatureModel": {
        "type": "object",
        "description": "Information about the item's temperature requirements.",
        "properties": {
          "indicator": {
            "type": "string",
            "description": "Information about the product's storage temperature.",
            "example": "Refrigerated"
          },
          "heatSensitive": {
            "type": "boolean",
            "description": "Indicates if the item is heat sensitive."
          }
        }
      },
      "refresh_token": {
        "required": [
          "refresh_token",
          "grant_type"
        ],
        "type": "object",
        "properties": {
          "grant_type": {
            "type": "string",
            "description": "Must be `refresh_token`.",
            "example": "refresh_token"
          },
          "refresh_token": {
            "type": "string",
            "description": "The refresh token returned from the server.",
            "example": "FN20LbaF2EWC6MPMWdemBwwnP4ZmX8"
          }
        }
      },
      "refresh_tokenResponse": {
        "type": "object",
        "properties": {
          "expires_in": {
            "type": "number",
            "description": "",
            "example": 1800
          },
          "access_token": {
            "type": "string",
            "description": "",
            "example": "eyJh5GciOiJSUzI1NiGsImtpZCI6Ilo0RnQzbXNrSUj4OGlydDdMQjVjNmc2PSIsInR5cCI6IkpXVmJ9.eqJzY29wZSI6InByb2T1Y3QuY29tcGFjdCBjb3Vwb24uYmFzaWMiLCJhdXRoQXQiOjE1NjUwOTk0OTUzMzIzOTIxMTIsImF1ZCI6InBlcmsvcm1hbmNlLWFnZW50LXB1YmxpYyIsImV4cCI6MTU2NTEwMTI5NSwiaWF0IjoxNTY1MDk5BDkwLCJpc3MiOiJhcGkua3JvZ2VyLmNvbSIsInN1YiI6IjBmZjdkMGIwLWVkOGItNDJmOS1hNTExLWEzMGQyYTAyZDljNSJ9.ej0mov6SGV4n4HiAvduTdYCceMlSo3T06M4Nfh3MfpIjSKzKaLWgd5S0W1EKDXrWz8IE7NTg8EIrL-WKhwdZPt-TWaS7LLjRXLJ0w5rKc44DStgBdvDiCcnKeMsnimjhBlHOiiKUV5y3GbVqJzaDVZwg0j8lP9qtwZP9EIIQ7k409nkskY1pz7l1lZrGotYRJKmnteN5vVQeZ3R8jywIwOOSEbKSgQALVA3Oj02964P7lI6h1GsZ66V5FLA9KU8QXm4ejrFHf1beAIA2zi_fQI3dmW7yj57pWoCECZIjq7Sfo3nGR5rkjEwfyXEK7aTn8oj4_14YHgKRTY-28L96cw"
          },
          "token_type": {
            "type": "string",
            "description": "",
            "example": "bearer"
          },
          "refresh_token": {
            "type": "string",
            "description": "",
            "example": "FN20LbaF2EWC6MPMWdemBwwnP4ZmX8"
          }
        }
      },
      "UPC": {
        "type": "string",
        "description": "The UPC of the product to return.",
        "example": "0001111060903",
        "maxLength": 13,
        "minLength": 13,
        "maximum": 200
      },
      "order.CreateShipOrderRequest": {
        "type": "object",
        "required": [
          "modalityType",
          "lineItems",
          "fulfillment",
          "origin",
          "payment"
        ],
        "properties": {
          "modalityType": {
            "type": "string",
            "example": "SHIP",
            "enum": [
              "SHIP"
            ],
            "description": "ModalityType of checkout. SHIP is currently the only supported value."
          },
          "origin": {
            "type": "string",
            "description": "The unique name of the partner creating the order.",
            "example": "b2b-partner-1000"
          },
          "buyer": {
            "$ref": "#/components/schemas/order.Buyer"
          },
          "fulfillment": {
            "$ref": "#/components/schemas/order.Fulfillment"
          },
          "payment": {
            "$ref": "#/components/schemas/order.Payment"
          },
          "lineItems": {
            "$ref": "#/components/schemas/order.LineItems"
          },
          "additionalInfo": {
            "type": "object",
            "description": "Any additional details related to an order can be provided here."
          }
        }
      },
      "order.CreateShipOrderResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "checkouts": {
                "$ref": "#/components/schemas/order.Checkout"
              }
            }
          }
        }
      },
      "order.Checkout": {
        "type": "object",
        "required": [
          "id",
          "modalityType",
          "versionKey",
          "created",
          "modified",
          "status",
          "summary"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "22752487002062812",
            "description": "Partner unique identifier for the checkout."
          },
          "modalityType": {
            "type": "string",
            "enum": [
              "SHIP"
            ],
            "example": "SHIP",
            "description": "ModalityType of checkout. SHIP is currently the only supported value."
          },
          "versionKey": {
            "type": "string",
            "example": "010000000ed73c7b0a322ef0b20000",
            "description": "The version of the checkout"
          },
          "created": {
            "$ref": "#/components/schemas/order.Window"
          },
          "modified": {
            "$ref": "#/components/schemas/order.Window"
          },
          "status": {
            "type": "string",
            "description": "Order status.",
            "enum": [
              "DRAFT",
              "ACTIVE",
              "CANCELED"
            ],
            "example": "ACTIVE"
          },
          "summary": {
            "$ref": "#/components/schemas/order.Summary"
          },
          "additionalInfo": {
            "type": "object",
            "description": "Any additional details related to an order can be provided here."
          }
        }
      },
      "order.Summary": {
        "type": "object",
        "description": "A brief summary of the checkout information.",
        "required": [
          "itemCount",
          "total"
        ],
        "properties": {
          "itemCount": {
            "type": "integer",
            "format": "int32",
            "example": "34",
            "description": "The total number of items in the checkout."
          },
          "total": {
            "type": "object",
            "description": "Summary of costs associated with the checkout.",
            "required": [
              "item",
              "tax",
              "fee",
              "gratuity",
              "amount",
              "discount"
            ],
            "properties": {
              "item": {
                "type": "string",
                "format": "ISO 4217",
                "example": "USD 33.3300",
                "description": "The sum of all of the line item regular (white tag) prices."
              },
              "tax": {
                "type": "string",
                "format": "ISO 4217",
                "example": "USD 3.3300",
                "description": "The sum of the tax amounts across all items."
              },
              "fee": {
                "type": "string",
                "format": "ISO 4217",
                "example": "USD 5.00",
                "description": "The sum of the fees, such as shipping fee, applied to the order."
              },
              "gratuity": {
                "type": "string",
                "format": "ISO 4217",
                "example": "USD 3.0000",
                "description": "The initial gratuity applied to the order."
              },
              "amount": {
                "type": "string",
                "format": "ISO 4217",
                "example": "USD 36.6600",
                "description": "The total in its entirety of all items, including associated tax amounts. (item total + tax total + fee total + gratuity - discount total)."
              },
              "discount": {
                "type": "string",
                "format": "ISO 4217",
                "example": "USD 2.9900",
                "description": "The sum of the discounts applied to items and to the order, in the form of a dollar amount."
              }
            }
          }
        }
      },
      "order.Payment": {
        "type": "object",
        "description": "Payment details for the order.",
        "required": [
          "amount",
          "status"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The partner's unique payment identifier for the order.",
            "example": "ffffffff-4f63-4227-a243-5252d6504604"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "PARTIALLY_DONE",
              "COMPLETED"
            ],
            "description": "Payment status of the order.",
            "example": "COMPLETED"
          },
          "amount": {
            "type": "string",
            "format": "ISO 4217",
            "description": "Total amount paid for the order. It is in USD XX.XX format. This will be equal to item total + tax + shipping fee - discount.",
            "example": "USD 78.89"
          },
          "type": {
            "type": "string",
            "example": "CREDIT_CARD_PAY",
            "description": "Mode of the payment. Currently CREDIT_CARD_PAY is the only value supported.",
            "enum": [
              "CREDIT_CARD_PAY"
            ]
          },
          "tax": {
            "type": "string",
            "format": "ISO 4217",
            "example": "USD 3.00",
            "description": "Total tax paid on the order. It is in USD XX.XX format."
          },
          "billingAddress": {
            "$ref": "#/components/schemas/order.Address"
          }
        }
      },
      "order.LineItems": {
        "type": "array",
        "description": "List of items ordered.",
        "items": {
          "$ref": "#/components/schemas/order.LineItem"
        }
      },
      "order.LineItem": {
        "type": "object",
        "required": [
          "item"
        ],
        "properties": {
          "item": {
            "$ref": "#/components/schemas/order.Item"
          }
        }
      },
      "order.Item": {
        "type": "object",
        "required": [
          "gtin13",
          "quantity",
          "originalPrice"
        ],
        "properties": {
          "gtin13": {
            "type": "string",
            "example": "0007106343767",
            "description": "The GTIN-13 for the item. It must contain all 13 digits."
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity of the line item.",
            "example": 3
          },
          "instructions": {
            "type": "string",
            "example": "Expiration date must be at least a week out",
            "description": "Any notes related to fulfillment, such as allowed replacements or expiration dates."
          },
          "originalPrice": {
            "type": "object",
            "required": [
              "regular"
            ],
            "description": "Original price information of an item.",
            "properties": {
              "regular": {
                "type": "object",
                "description": "Regular price for the current item. If this is the only value present, it is the current cost to the customer for a unit of the item.",
                "properties": {
                  "price": {
                    "type": "string",
                    "format": "ISO 4217",
                    "example": "USD 99.99",
                    "description": "It is in USD XX.XX format."
                  }
                }
              },
              "sale": {
                "type": "object",
                "description": "Sale price for the current item. If this is present, this is the current cost to the customer for a unit of the item.\nThe sale price must be less than the regular price.",
                "properties": {
                  "price": {
                    "type": "string",
                    "format": "ISO 4217",
                    "example": "USD 98.99",
                    "description": "It is in USD XX.XX format."
                  }
                }
              }
            }
          }
        }
      },
      "order.Buyer": {
        "type": "object",
        "description": "Information about the person making the purchase",
        "properties": {
          "dateOfBirth": {
            "type": "string",
            "format": "iso-8601",
            "description": "Pass customer date of birth, if the order contains alcohol. The date must be in YYYY-MM-DD format",
            "example": "1985-10-01"
          },
          "address": {
            "$ref": "#/components/schemas/order.Address"
          }
        }
      },
      "order.Address": {
        "type": "object",
        "required": [
          "addressLines",
          "cityTown",
          "stateProvince",
          "postalCode",
          "countryCode"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe",
            "description": "Name of the customer."
          },
          "company": {
            "type": "string",
            "example": "Kroger",
            "description": "Name of the company, if one exists."
          },
          "residential": {
            "type": "boolean",
            "example": true,
            "description": "Whether the address is residential or not."
          },
          "addressLines": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "4613 Marburg Ave"
            },
            "description": "An array of up to 3 lines for the street address or PO Box."
          },
          "cityTown": {
            "type": "string",
            "example": "Cincinnati",
            "description": "Name of the city or town."
          },
          "stateProvince": {
            "type": "string",
            "example": "OH",
            "description": "Two-digit state code."
          },
          "postalCode": {
            "type": "string",
            "example": "45209",
            "description": "Postal code in abbreviated or extended format. It can't contain any special characters and needs to be in US zip or zip+4 code format."
          },
          "carrierRoute": {
            "type": "string",
            "example": "4592",
            "description": "Last four digits of the nine-digit US postal code."
          },
          "deliveryPoint": {
            "type": "string",
            "example": "43",
            "description": "Two-digit delivery point. It is in XX format."
          },
          "countryCode": {
            "type": "string",
            "example": "US",
            "format": "ISO 3166-1 alpha-2",
            "description": "Two-digit country code. It is in XX format and follow ISO 3166-1 alpha-2 codes"
          },
          "phone": {
            "type": "string",
            "example": "+18005550198",
            "format": "E.164",
            "description": "Phone number of the customer. It is in \"+\" + `<country code>` + `<subscriber number with area code>` format."
          },
          "email": {
            "type": "string",
            "example": "john.doe@example.com",
            "description": "Email address of the customer."
          },
          "taxId": {
            "type": "string",
            "example": "34-232332333",
            "description": "Tax identification number of the partner."
          }
        }
      },
      "order.Fulfillment": {
        "type": "object",
        "description": "Information about the order fulfillment.",
        "required": [
          "contact"
        ],
        "properties": {
          "contact": {
            "$ref": "#/components/schemas/order.Contact"
          },
          "instructions": {
            "type": "string",
            "description": "Customer note related to order fulfillment.",
            "example": "Please deliver the package next to the side door, not the front door"
          },
          "service": {
            "$ref": "#/components/schemas/order.Service"
          }
        }
      },
      "order.Service": {
        "type": "object",
        "description": "Type of delivery service for the customer.",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "STANDARD",
              "CONTACTLESS"
            ],
            "description": "Type of delivery requested by the customer.",
            "example": "CONTACTLESS"
          },
          "code": {
            "type": "string",
            "enum": [
              "STANDARD_SHIPPING",
              "USPS_PRIORITY_MAIL",
              "FED_EX_HOME_DELIVERY",
              "FED_EX_TWO_DAY_AIR",
              "FED_EX_OVERNIGHT"
            ],
            "description": "Shipping method.",
            "example": "STANDARD"
          },
          "cost": {
            "type": "string",
            "description": "Shipping fee paid by the customer.",
            "format": "ISO 4217",
            "example": "USD 5.00"
          }
        }
      },
      "order.Contact": {
        "type": "object",
        "required": [
          "firstName",
          "lastName",
          "phone",
          "address"
        ],
        "description": "Customer contact information.",
        "properties": {
          "firstName": {
            "type": "string",
            "example": "John",
            "description": "First name."
          },
          "lastName": {
            "type": "string",
            "example": "Doe",
            "description": "Last name."
          },
          "phone": {
            "type": "string",
            "example": "+18005550198",
            "description": "Phone number."
          },
          "address": {
            "$ref": "#/components/schemas/order.Address"
          }
        }
      },
      "order.Window": {
        "type": "object",
        "required": [
          "value",
          "timezone"
        ],
        "properties": {
          "value": {
            "type": "string",
            "format": "date-time",
            "example": "2020-10-17T20:00:00Z",
            "description": "It is in ISO 8601 format"
          },
          "timezone": {
            "type": "string",
            "example": "UTC",
            "description": "Database time zone"
          }
        }
      },
      "lockers.StatusUpdate": {
        "type": "object",
        "description": "Schema to pass the unattended locker updates to the Kroger systems by the locker vendors.",
        "required": [
          "orderStatus",
          "orderId"
        ],
        "properties": {
          "orderStatus": {
            "type": "string",
            "description": "Order status",
            "enum": [
              "LOADED",
              "COLLECTED"
            ],
            "example": "LOADED"
          },
          "orderId": {
            "type": "string",
            "description": "Kroger Order ID.",
            "example": "b6737fe6-5f39-41g5-b83e-5d586f7d034b"
          }
        }
      },
      "lockers.ErrorResponse500": {
        "description": "response schema for internal server error.",
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "example": "Internal Server Error"
                },
                "reason": {
                  "type": "string",
                  "example": "Sorry, an unexpected error has occurred. Please try again later."
                },
                "datetime": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "string",
                      "example": "2023-08-17T14:23:41Z"
                    },
                    "timezone": {
                      "type": "string",
                      "example": "UTC"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "lockers.ErrorResponse400": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "example": "Invalid Parameter"
                },
                "reason": {
                  "type": "string",
                  "example": "Incorrect value for parameter: filter.partner"
                },
                "datetime": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "string",
                      "example": "2023-08-17T14:23:41Z"
                    },
                    "timezone": {
                      "type": "string",
                      "example": "UTC"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "lockers.ErrorResponse404": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "example": "Entity Not Found,"
                },
                "reason": {
                  "type": "string",
                  "example": "No 'order' found for Id: '1234'"
                },
                "datetime": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "string",
                      "example": "2023-08-17T14:23:41Z"
                    },
                    "timezone": {
                      "type": "string",
                      "example": "UTC"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "examples": {
      "get.delivery.products.full": {
        "value": {
          "data": {
            "products": [
              {
                "id": 1,
                "name": "Paper Pencil Plastic Wrap",
                "slug": "paper-pencil-plastic-wrap",
                "description": "Stationary",
                "barcodes": [
                  "0005508600241"
                ],
                "primaryCategory": {
                  "id": 15,
                  "name": "Pen",
                  "slug": "pen",
                  "description": "A stationary",
                  "parentCategory": {
                    "id": 12,
                    "name": "Pen",
                    "slug": "pen",
                    "description": "string",
                    "images": [
                      {
                        "perspective": "FRONT",
                        "default": true,
                        "resolution": {
                          "sizes": {
                            "descriptor": "medium",
                            "url": "http://www.example.com/image.jpg"
                          }
                        }
                      }
                    ],
                    "status": "ENABLED"
                  },
                  "images": [
                    {
                      "perspective": "FRONT",
                      "default": true,
                      "resolution": {
                        "sizes": {
                          "descriptor": "medium",
                          "url": "http://www.example.com/image.jpg"
                        }
                      }
                    }
                  ],
                  "status": "ENABLED"
                },
                "secondaryCategories": [
                  {
                    "id": 16,
                    "name": "Stationary",
                    "slug": "stationary",
                    "description": "string",
                    "images": [
                      {
                        "perspective": "FRONT",
                        "default": true,
                        "resolution": {
                          "sizes": {
                            "descriptor": "medium",
                            "url": "http://www.example.com/image.jpg"
                          }
                        }
                      }
                    ],
                    "status": "ENABLED"
                  }
                ],
                "storeSpecificData": [
                  {
                    "storeId": "70100485",
                    "stock": 1,
                    "price": {
                      "nationalPrice": {
                        "regular": {
                          "unitPrice": "USD 5.00",
                          "nforPrice": "USD 4.00",
                          "nfor": 6,
                          "type": "PROMO",
                          "description": "Offer price",
                          "expiredDate": {
                            "value": "2025-08-11T15:33:48Z",
                            "timezone": "UTC"
                          }
                        },
                        "promo": {
                          "unitPrice": "USD 4.00",
                          "nforPrice": "USD 3.00",
                          "nfor": 6,
                          "type": "PROMO",
                          "description": "Offer price",
                          "expiredDate": {
                            "value": "2025-08-11T15:33:48Z",
                            "timezone": "UTC"
                          }
                        }
                      },
                      "storePrice": {
                        "regular": {
                          "unitPrice": "USD 5.00",
                          "nforPrice": "USD 4.00",
                          "nfor": 6,
                          "type": "PROMO",
                          "description": "Offer price",
                          "expiredDate": {
                            "value": "2025-08-11T15:33:48Z",
                            "timezone": "UTC"
                          }
                        },
                        "promo": {
                          "unitPrice": "USD 4.00",
                          "nforPrice": "USD 3.00",
                          "nfor": 6,
                          "type": "PROMO",
                          "description": "Offer price",
                          "expiredDate": {
                            "value": "2025-08-11T15:33:48Z",
                            "timezone": "UTC"
                          }
                        }
                      }
                    },
                    "location": {
                      "aisle": "1",
                      "shelf": "2",
                      "position": "2"
                    },
                    "modality": "DELIVERY"
                  }
                ],
                "soldBy": "EACH",
                "images": [
                  {
                    "default": true,
                    "perspective": "FRONT",
                    "resolution": {
                      "sizes": [
                        {
                          "descriptor": "medium",
                          "url": "http://www.example.com/image.jpg"
                        }
                      ]
                    }
                  }
                ],
                "krogerId": "0001629144204",
                "status": "ENABLED",
                "createdAt": {
                  "value": "2020-07-21T10:53:40Z",
                  "timezone": "UTC"
                },
                "updatedAt": {
                  "value": "2020-07-21T10:53:40Z",
                  "timezone": "UTC"
                },
                "deletedAt": null,
                "metaData": {
                  "availability": false,
                  "alcoholic": false,
                  "feeAmt": "USD 1.00",
                  "size": "1 lb",
                  "wineOrSpirits": false
                }
              }
            ]
          },
          "meta": {
            "page": {
              "count": 1,
              "offset": 0,
              "size": 20
            }
          }
        }
      },
      "get.delivery.products.compact": {
        "value": {
          "data": {
            "products": [
              {
                "id": 1,
                "name": "Britania Treat",
                "slug": "britania-treat-1",
                "description": "Buiscuit",
                "barcodes": [
                  "0004902245736"
                ],
                "soldBy": "EACH",
                "images": [
                  {
                    "default": true,
                    "perspective": "FRONT",
                    "resolution": {
                      "sizes": [
                        {
                          "descriptor": "medium",
                          "url": "http://www.example.com/image.jpg"
                        }
                      ]
                    }
                  }
                ],
                "primaryCategory": {
                  "id": 8
                },
                "krogerId": "0007301071136",
                "status": "ENABLED",
                "createdAt": {
                  "value": "2020-07-21T10:53:40Z",
                  "timezone": "UTC"
                },
                "updatedAt": {
                  "value": "2020-07-21T10:53:40Z",
                  "timezone": "UTC"
                },
                "deletedAt": null,
                "metaData": {
                  "availability": false,
                  "alcoholic": false,
                  "feeAmt": "USD 1.00",
                  "size": "1 lb",
                  "wineOrSpirits": false
                }
              }
            ]
          },
          "meta": {
            "page": {
              "count": 1,
              "offset": 0,
              "size": 20
            }
          }
        }
      },
      "get.ship.products.full": {
        "value": {
          "data": {
            "products": [
              {
                "barcodes": null,
                "brand": {
                  "name": "Simple Truth"
                },
                "deletedAt": null,
                "description": "<p><strong>Perfectly Simple Cereal</strong></p><ul><li>Nuts &amp; Seeds Provide a Hearty Combination of Fats &amp; Proteins</li><li>A Pleasant Flavor &amp; Crunch</li><li>Dried Fruit Adds a Touch of Wholesome Sweetness</li></ul>",
                "images": [
                  {
                    "default": true,
                    "perspective": "FRONT",
                    "resolution": {
                      "sizes": [
                        {
                          "descriptor": "medium",
                          "url": "https://www.kroger.com/product/images/medium/front/4003997802369"
                        },
                        {
                          "descriptor": "large",
                          "url": "https://www.kroger.com/product/images/large/front/4003997802369"
                        }
                      ]
                    }
                  }
                ],
                "krogerId": "4003997802369",
                "metaData": {
                  "alcoholic": false,
                  "size": "1 Count",
                  "package": {
                    "length": "3.55 [in_i]",
                    "width": "8.85 [in_i]",
                    "height": "13.4 [in_i]",
                    "weight": "4.2 [lb_av]",
                    "shape": "Cylindrical"
                  },
                  "gtin14": "00052100071039"
                },
                "name": "Simple Truth Gluten Free Paleo Muesli Cups",
                "primaryCategory": {
                  "name": "Cereals & Granola",
                  "parentCategory": {
                    "name": "Grocery",
                    "parentCategory": {
                      "name": "Natural & Organic",
                      "metaData": {
                        "code": "50"
                      }
                    },
                    "metaData": {
                      "code": "25"
                    }
                  },
                  "metaData": {
                    "code": "00002"
                  }
                },
                "secondaryCategories": [
                  {
                    "name": "Granola",
                    "parentCategory": {
                      "name": "Cereal & Granola",
                      "metaData": {
                        "code": "15"
                      },
                      "parentCategory": {
                        "name": "Breakfast",
                        "metaData": {
                          "code": "30"
                        }
                      }
                    },
                    "metaData": {
                      "code": "00004"
                    }
                  }
                ],
                "slug": "simple-truth-gluten-free-paleo-muesli-cups",
                "soldBy": "EACH",
                "status": "ENABLED",
                "storeSpecificData": [
                  {
                    "location": null,
                    "modality": [
                      "SHIP"
                    ],
                    "price": {
                      "nationalPrice": {
                        "promo": {
                          "description": "description",
                          "expiredDate": {
                            "value": "2025-08-11T15:33:48Z",
                            "timezone": "UTC"
                          },
                          "nfor": 1,
                          "nforPrice": "USD 20.00",
                          "type": "PROMO",
                          "unitPrice": "USD 20.00"
                        },
                        "regular": {
                          "description": "description",
                          "expiredDate": {
                            "value": "2025-08-11T15:33:48Z",
                            "timezone": "UTC"
                          },
                          "nfor": 1,
                          "nforPrice": "USD 21.99",
                          "type": "REGULAR",
                          "unitPrice": "USD 21.99"
                        }
                      }
                    },
                    "stock": 1,
                    "storeId": "309DC309",
                    "metaData": {
                      "minOrderQty": 5
                    }
                  }
                ]
              }
            ]
          },
          "meta": {
            "page": {
              "count": 1,
              "offset": 0,
              "size": 20
            }
          }
        }
      },
      "get.ship.products.compact": {
        "value": {
          "data": {
            "products": [
              {
                "barcodes": null,
                "brand": {
                  "name": "Simple Truth"
                },
                "deletedAt": null,
                "description": "<p><strong>Perfectly Simple Cereal</strong></p><ul><li>Nuts &amp; Seeds Provide a Hearty Combination of Fats &amp; Proteins</li><li>A Pleasant Flavor &amp; Crunch</li><li>Dried Fruit Adds a Touch of Wholesome Sweetness</li></ul>",
                "images": [
                  {
                    "default": true,
                    "perspective": "FRONT",
                    "resolution": {
                      "sizes": [
                        {
                          "descriptor": "medium",
                          "url": "https://www.kroger.com/product/images/medium/front/4003997802369"
                        },
                        {
                          "descriptor": "large",
                          "url": "https://www.kroger.com/product/images/large/front/4003997802369"
                        }
                      ]
                    }
                  }
                ],
                "krogerId": "4003997802369",
                "metaData": {
                  "alcoholic": false,
                  "size": "1 Count",
                  "package": {
                    "length": "3.55 [in_i]",
                    "width": "8.85 [in_i]",
                    "height": "13.4 [in_i]",
                    "weight": "4.2 [lb_av]",
                    "shape": "Cylindrical"
                  },
                  "gtin14": "00052100071039"
                },
                "name": "Simple Truth Gluten Free Paleo Muesli Cups",
                "primaryCategory": {
                  "name": "Cereals & Granola",
                  "parentCategory": {
                    "name": "Grocery",
                    "parentCategory": {
                      "name": "Natural & Organic",
                      "metaData": {
                        "code": "50"
                      }
                    },
                    "metaData": {
                      "code": "25"
                    }
                  },
                  "metaData": {
                    "code": "00002"
                  }
                },
                "secondaryCategories": [
                  {
                    "name": "Granola",
                    "parentCategory": {
                      "name": "Cereal & Granola",
                      "metaData": {
                        "code": "15"
                      },
                      "parentCategory": {
                        "name": "Breakfast",
                        "metaData": {
                          "code": "30"
                        }
                      }
                    },
                    "metaData": {
                      "code": "00004"
                    }
                  }
                ],
                "slug": "simple-truth-gluten-free-paleo-muesli-cups",
                "soldBy": "EACH",
                "status": "ENABLED"
              }
            ]
          },
          "meta": {
            "page": {
              "count": 1,
              "offset": 0,
              "size": 20
            }
          }
        }
      },
      "get.pickup.products.full": {
        "value": {
          "data": {
            "products": [
              {
                "barcodes": null,
                "brand": {
                  "name": "Simple Truth"
                },
                "deletedAt": null,
                "description": "<p><strong>Perfectly Simple Cereal</strong></p><ul><li>Nuts &amp; Seeds Provide a Hearty Combination of Fats &amp; Proteins</li><li>A Pleasant Flavor &amp; Crunch</li><li>Dried Fruit Adds a Touch of Wholesome Sweetness</li></ul>",
                "images": [
                  {
                    "default": true,
                    "perspective": "FRONT",
                    "resolution": {
                      "sizes": [
                        {
                          "descriptor": "medium",
                          "url": "https://www.kroger.com/product/images/medium/front/4003997802369"
                        },
                        {
                          "descriptor": "large",
                          "url": "https://www.kroger.com/product/images/large/front/4003997802369"
                        }
                      ]
                    }
                  }
                ],
                "krogerId": "4003997802369",
                "metaData": {
                  "alcoholic": false,
                  "size": "1 Count",
                  "package": {
                    "length": "3.55 [in_i]",
                    "width": "8.85 [in_i]",
                    "height": "13.4 [in_i]",
                    "weight": "4.2 [lb_av]",
                    "shape": "Cylindrical"
                  },
                  "gtin14": "00052100071039",
                  "nutrition": [
                    "LIVE_NATURALLY"
                  ],
                  "snapEligible": true,
                  "restricted": false
                },
                "name": "Simple Truth Gluten Free Paleo Muesli Cups",
                "primaryCategory": {
                  "name": "Cereals & Granola",
                  "parentCategory": {
                    "name": "Grocery",
                    "parentCategory": {
                      "name": "Natural & Organic",
                      "metaData": {
                        "code": "50"
                      }
                    },
                    "metaData": {
                      "code": "25"
                    }
                  },
                  "metaData": {
                    "code": "00002"
                  }
                },
                "secondaryCategories": [
                  {
                    "name": "Granola",
                    "parentCategory": {
                      "name": "Cereal & Granola",
                      "metaData": {
                        "code": "15"
                      },
                      "parentCategory": {
                        "name": "Breakfast",
                        "metaData": {
                          "code": "30"
                        }
                      }
                    },
                    "metaData": {
                      "code": "00004"
                    }
                  }
                ],
                "slug": "simple-truth-gluten-free-paleo-muesli-cups",
                "soldBy": "EACH",
                "status": "ENABLED",
                "storeSpecificData": [
                  {
                    "location": null,
                    "modality": [
                      "PICK_UP"
                    ],
                    "price": {
                      "nationalPrice": {
                        "promo": {
                          "description": "description",
                          "expiredDate": {
                            "value": "2025-08-11T15:33:48Z",
                            "timezone": "UTC"
                          },
                          "nfor": 1,
                          "nforPrice": "USD 20.00",
                          "type": "PROMO",
                          "unitPrice": "USD 20.00"
                        },
                        "regular": {
                          "description": "description",
                          "expiredDate": {
                            "value": "2025-08-11T15:33:48Z",
                            "timezone": "UTC"
                          },
                          "nfor": 1,
                          "nforPrice": "USD 21.99",
                          "type": "REGULAR",
                          "unitPrice": "USD 21.99"
                        }
                      }
                    },
                    "stock": 18,
                    "storeId": "309DC309",
                    "metaData": {
                      "minOrderQty": 5,
                      "maxOrderQty": 10
                    }
                  }
                ]
              }
            ]
          },
          "meta": {
            "page": {
              "count": 1,
              "offset": 0,
              "size": 20
            }
          }
        }
      },
      "get.pickup.products.compact": {
        "value": {
          "data": {
            "products": [
              {
                "barcodes": null,
                "brand": {
                  "name": "Simple Truth"
                },
                "deletedAt": null,
                "description": "<p><strong>Perfectly Simple Cereal</strong></p><ul><li>Nuts &amp; Seeds Provide a Hearty Combination of Fats &amp; Proteins</li><li>A Pleasant Flavor &amp; Crunch</li><li>Dried Fruit Adds a Touch of Wholesome Sweetness</li></ul>",
                "images": [
                  {
                    "default": true,
                    "perspective": "FRONT",
                    "resolution": {
                      "sizes": [
                        {
                          "descriptor": "medium",
                          "url": "https://www.kroger.com/product/images/medium/front/4003997802369"
                        },
                        {
                          "descriptor": "large",
                          "url": "https://www.kroger.com/product/images/large/front/4003997802369"
                        }
                      ]
                    }
                  }
                ],
                "krogerId": "4003997802369",
                "metaData": {
                  "alcoholic": false,
                  "size": "1 Count",
                  "package": {
                    "length": "3.55 [in_i]",
                    "width": "8.85 [in_i]",
                    "height": "13.4 [in_i]",
                    "weight": "4.2 [lb_av]",
                    "shape": "Cylindrical"
                  },
                  "gtin14": "00052100071039",
                  "nutrition": [
                    "LIVE_NATURALLY"
                  ],
                  "snapEligible": true,
                  "restricted": false
                },
                "name": "Simple Truth Gluten Free Paleo Muesli Cups",
                "primaryCategory": {
                  "name": "Cereals & Granola",
                  "parentCategory": {
                    "name": "Grocery",
                    "parentCategory": {
                      "name": "Natural & Organic",
                      "metaData": {
                        "code": "50"
                      }
                    },
                    "metaData": {
                      "code": "25"
                    }
                  },
                  "metaData": {
                    "code": "00002"
                  }
                },
                "secondaryCategories": [
                  {
                    "name": "Granola",
                    "parentCategory": {
                      "name": "Cereal & Granola",
                      "metaData": {
                        "code": "15"
                      },
                      "parentCategory": {
                        "name": "Breakfast",
                        "metaData": {
                          "code": "30"
                        }
                      }
                    },
                    "metaData": {
                      "code": "00004"
                    }
                  }
                ],
                "slug": "simple-truth-gluten-free-paleo-muesli-cups",
                "soldBy": "EACH",
                "status": "ENABLED"
              }
            ]
          },
          "meta": {
            "page": {
              "count": 1,
              "offset": 0,
              "size": 20
            }
          }
        }
      },
      "get.instore.products.full": {
        "value": {
          "data": {
            "products": [
              {
                "barcodes": null,
                "brand": {
                  "name": "Simple Truth"
                },
                "deletedAt": null,
                "description": "<p><strong>Perfectly Simple Cereal</strong></p><ul><li>Nuts &amp; Seeds Provide a Hearty Combination of Fats &amp; Proteins</li><li>A Pleasant Flavor &amp; Crunch</li><li>Dried Fruit Adds a Touch of Wholesome Sweetness</li></ul>",
                "images": [
                  {
                    "default": true,
                    "perspective": "FRONT",
                    "resolution": {
                      "sizes": [
                        {
                          "descriptor": "medium",
                          "url": "https://www.kroger.com/product/images/medium/front/4003997802369"
                        },
                        {
                          "descriptor": "large",
                          "url": "https://www.kroger.com/product/images/large/front/4003997802369"
                        }
                      ]
                    }
                  }
                ],
                "krogerId": "4003997802369",
                "metaData": {
                  "alcoholic": false,
                  "size": "1 Count",
                  "package": {
                    "length": "3.55 [in_i]",
                    "width": "8.85 [in_i]",
                    "height": "13.4 [in_i]",
                    "weight": "4.2 [lb_av]",
                    "shape": "Cylindrical"
                  },
                  "gtin14": "00052100071039",
                  "nutrition": [
                    "LIVE_NATURALLY"
                  ],
                  "snapEligible": false,
                  "restricted": true
                },
                "name": "Simple Truth Gluten Free Paleo Muesli Cups",
                "primaryCategory": {
                  "name": "Cereals & Granola",
                  "parentCategory": {
                    "name": "Grocery",
                    "parentCategory": {
                      "name": "Natural & Organic",
                      "metaData": {
                        "code": "50"
                      }
                    },
                    "metaData": {
                      "code": "25"
                    }
                  },
                  "metaData": {
                    "code": "00002"
                  }
                },
                "secondaryCategories": [
                  {
                    "name": "Granola",
                    "parentCategory": {
                      "name": "Cereal & Granola",
                      "metaData": {
                        "code": "15"
                      },
                      "parentCategory": {
                        "name": "Breakfast",
                        "metaData": {
                          "code": "30"
                        }
                      }
                    },
                    "metaData": {
                      "code": "00004"
                    }
                  }
                ],
                "slug": "simple-truth-gluten-free-paleo-muesli-cups",
                "soldBy": "EACH",
                "status": "ENABLED",
                "storeSpecificData": [
                  {
                    "location": null,
                    "modality": [
                      "IN_STORE"
                    ],
                    "price": {
                      "nationalPrice": {
                        "promo": {
                          "description": "description",
                          "expiredDate": {
                            "value": "2025-08-11T15:33:48Z",
                            "timezone": "UTC"
                          },
                          "nfor": 1,
                          "nforPrice": "USD 20.00",
                          "type": "PROMO",
                          "unitPrice": "USD 20.00"
                        },
                        "regular": {
                          "description": "description",
                          "expiredDate": {
                            "value": "2025-08-11T15:33:48Z",
                            "timezone": "UTC"
                          },
                          "nfor": 1,
                          "nforPrice": "USD 21.99",
                          "type": "REGULAR",
                          "unitPrice": "USD 21.99"
                        }
                      }
                    },
                    "stock": 0,
                    "storeId": "309DC309",
                    "metaData": {
                      "minOrderQty": 1,
                      "maxOrderQty": 10
                    }
                  }
                ]
              }
            ]
          },
          "meta": {
            "page": {
              "count": 1,
              "offset": 0,
              "size": 20
            }
          }
        }
      },
      "get.instore.products.compact": {
        "value": {
          "data": {
            "products": [
              {
                "barcodes": null,
                "brand": {
                  "name": "Simple Truth"
                },
                "deletedAt": null,
                "description": "<p><strong>Perfectly Simple Cereal</strong></p><ul><li>Nuts &amp; Seeds Provide a Hearty Combination of Fats &amp; Proteins</li><li>A Pleasant Flavor &amp; Crunch</li><li>Dried Fruit Adds a Touch of Wholesome Sweetness</li></ul>",
                "images": [
                  {
                    "default": true,
                    "perspective": "FRONT",
                    "resolution": {
                      "sizes": [
                        {
                          "descriptor": "medium",
                          "url": "https://www.kroger.com/product/images/medium/front/4003997802369"
                        },
                        {
                          "descriptor": "large",
                          "url": "https://www.kroger.com/product/images/large/front/4003997802369"
                        }
                      ]
                    }
                  }
                ],
                "krogerId": "4003997802369",
                "metaData": {
                  "alcoholic": false,
                  "size": "1 Count",
                  "package": {
                    "length": "3.55 [in_i]",
                    "width": "8.85 [in_i]",
                    "height": "13.4 [in_i]",
                    "weight": "4.2 [lb_av]",
                    "shape": "Cylindrical"
                  },
                  "gtin14": "00052100071039",
                  "nutrition": [
                    "LIVE_NATURALLY"
                  ],
                  "snapEligible": true,
                  "restricted": false
                },
                "name": "Simple Truth Gluten Free Paleo Muesli Cups",
                "primaryCategory": {
                  "name": "Cereals & Granola",
                  "parentCategory": {
                    "name": "Grocery",
                    "parentCategory": {
                      "name": "Natural & Organic",
                      "metaData": {
                        "code": "50"
                      }
                    },
                    "metaData": {
                      "code": "25"
                    }
                  },
                  "metaData": {
                    "code": "00002"
                  }
                },
                "secondaryCategories": [
                  {
                    "name": "Granola",
                    "parentCategory": {
                      "name": "Cereal & Granola",
                      "metaData": {
                        "code": "15"
                      },
                      "parentCategory": {
                        "name": "Breakfast",
                        "metaData": {
                          "code": "30"
                        }
                      }
                    },
                    "metaData": {
                      "code": "00004"
                    }
                  }
                ],
                "slug": "simple-truth-gluten-free-paleo-muesli-cups",
                "soldBy": "EACH",
                "status": "ENABLED"
              }
            ]
          },
          "meta": {
            "page": {
              "count": 1,
              "offset": 0,
              "size": 20
            }
          }
        }
      },
      "get.ocadostores.delivery.products.full": {
        "value": {
          "data": {
            "products": [
              {
                "barcodes": null,
                "brand": {
                  "name": "Simple Truth"
                },
                "deletedAt": null,
                "description": "<p><strong>Perfectly Simple Cereal</strong></p><ul><li>Nuts &amp; Seeds Provide a Hearty Combination of Fats &amp; Proteins</li><li>A Pleasant Flavor &amp; Crunch</li><li>Dried Fruit Adds a Touch of Wholesome Sweetness</li></ul>",
                "images": [
                  {
                    "default": true,
                    "perspective": "FRONT",
                    "resolution": {
                      "sizes": [
                        {
                          "descriptor": "medium",
                          "url": "https://www.kroger.com/product/images/medium/front/4003997802369"
                        },
                        {
                          "descriptor": "large",
                          "url": "https://www.kroger.com/product/images/large/front/4003997802369"
                        }
                      ]
                    }
                  }
                ],
                "krogerId": "4003997802369",
                "metaData": {
                  "alcoholic": false,
                  "size": "1 Count",
                  "package": {
                    "length": "3.55 [in_i]",
                    "width": "8.85 [in_i]",
                    "height": "13.4 [in_i]",
                    "weight": "4.2 [lb_av]",
                    "shape": "Cylindrical"
                  },
                  "gtin14": "00052100071039",
                  "nutrition": [
                    "LIVE_NATURALLY"
                  ],
                  "snapEligible": false,
                  "restricted": true
                },
                "name": "Simple Truth Gluten Free Paleo Muesli Cups",
                "primaryCategory": {
                  "name": "Cereals & Granola",
                  "parentCategory": {
                    "name": "Grocery",
                    "parentCategory": {
                      "name": "Natural & Organic",
                      "metaData": {
                        "code": "50"
                      }
                    },
                    "metaData": {
                      "code": "25"
                    }
                  },
                  "metaData": {
                    "code": "00002"
                  }
                },
                "secondaryCategories": [
                  {
                    "name": "Granola",
                    "parentCategory": {
                      "name": "Cereal & Granola",
                      "metaData": {
                        "code": "15"
                      },
                      "parentCategory": {
                        "name": "Breakfast",
                        "metaData": {
                          "code": "30"
                        }
                      }
                    },
                    "metaData": {
                      "code": "00004"
                    }
                  }
                ],
                "slug": "simple-truth-gluten-free-paleo-muesli-cups",
                "soldBy": "EACH",
                "status": "ENABLED",
                "storeSpecificData": [
                  {
                    "location": null,
                    "modality": [
                      "DELIVERY"
                    ],
                    "price": {
                      "nationalPrice": {
                        "promo": {
                          "description": "description",
                          "expiredDate": {
                            "value": "2025-08-11T15:33:48Z",
                            "timezone": "UTC"
                          },
                          "nfor": 1,
                          "nforPrice": "USD 20.00",
                          "type": "PROMO",
                          "unitPrice": "USD 20.00"
                        },
                        "regular": {
                          "description": "description",
                          "expiredDate": {
                            "value": "2025-08-11T15:33:48Z",
                            "timezone": "UTC"
                          },
                          "nfor": 1,
                          "nforPrice": "USD 21.99",
                          "type": "REGULAR",
                          "unitPrice": "USD 21.99"
                        }
                      }
                    },
                    "stock": 0,
                    "storeId": "540FC0004",
                    "metaData": {
                      "minOrderQty": 1,
                      "maxOrderQty": 10
                    }
                  }
                ],
                "postalCodes": {
                  "postalCode": "32789",
                  "prices": [
                    {
                      "promo": {
                        "description": "description",
                        "expiredDate": {
                          "value": "2025-08-11T15:33:48Z",
                          "timezone": "UTC"
                        },
                        "nfor": 1,
                        "nforPrice": "USD 20.00",
                        "type": "PROMO",
                        "unitPrice": "USD 20.00"
                      },
                      "regular": {
                        "description": "description",
                        "expiredDate": {
                          "value": "2025-08-11T15:33:48Z",
                          "timezone": "UTC"
                        },
                        "nfor": 1,
                        "nforPrice": "USD 21.99",
                        "type": "REGULAR",
                        "unitPrice": "USD 21.99"
                      }
                    }
                  ]
                }
              }
            ]
          },
          "meta": {
            "page": {
              "count": 1,
              "offset": 0,
              "size": 20
            }
          }
        }
      },
      "get.ocadostores.delivery.products.compact": {
        "value": {
          "data": {
            "products": [
              {
                "barcodes": null,
                "brand": {
                  "name": "Simple Truth"
                },
                "deletedAt": null,
                "description": "<p><strong>Perfectly Simple Cereal</strong></p><ul><li>Nuts &amp; Seeds Provide a Hearty Combination of Fats &amp; Proteins</li><li>A Pleasant Flavor &amp; Crunch</li><li>Dried Fruit Adds a Touch of Wholesome Sweetness</li></ul>",
                "images": [
                  {
                    "default": true,
                    "perspective": "FRONT",
                    "resolution": {
                      "sizes": [
                        {
                          "descriptor": "medium",
                          "url": "https://www.kroger.com/product/images/medium/front/4003997802369"
                        },
                        {
                          "descriptor": "large",
                          "url": "https://www.kroger.com/product/images/large/front/4003997802369"
                        }
                      ]
                    }
                  }
                ],
                "krogerId": "4003997802369",
                "metaData": {
                  "alcoholic": true,
                  "size": "1 Count",
                  "package": {
                    "length": "3.55 [in_i]",
                    "width": "8.85 [in_i]",
                    "height": "13.4 [in_i]",
                    "weight": "4.2 [lb_av]",
                    "shape": "Cylindrical"
                  },
                  "gtin14": "00052100071039",
                  "nutrition": [
                    "LIVE_NATURALLY"
                  ],
                  "snapEligible": true,
                  "restricted": false
                },
                "name": "Simple Truth Gluten Free Paleo Muesli Cups",
                "primaryCategory": {
                  "name": "Cereals & Granola",
                  "parentCategory": {
                    "name": "Grocery",
                    "parentCategory": {
                      "name": "Natural & Organic",
                      "metaData": {
                        "code": "50"
                      }
                    },
                    "metaData": {
                      "code": "25"
                    }
                  },
                  "metaData": {
                    "code": "00002"
                  }
                },
                "secondaryCategories": [
                  {
                    "name": "Granola",
                    "parentCategory": {
                      "name": "Cereal & Granola",
                      "metaData": {
                        "code": "15"
                      },
                      "parentCategory": {
                        "name": "Breakfast",
                        "metaData": {
                          "code": "30"
                        }
                      }
                    },
                    "metaData": {
                      "code": "00004"
                    }
                  }
                ],
                "slug": "simple-truth-gluten-free-paleo-muesli-cups",
                "soldBy": "EACH",
                "status": "ENABLED"
              }
            ]
          },
          "meta": {
            "page": {
              "count": 1,
              "offset": 0,
              "size": 20
            }
          }
        }
      },
      "getById.delivery.products.full": {
        "value": {
          "data": {
            "products": {
              "id": 1,
              "name": "Paper Pencil Plastic Wrap",
              "slug": "paper-pencil-plastic-wrap",
              "description": "Stationary",
              "barcodes": [
                "0005508600241"
              ],
              "primaryCategory": {
                "id": 15,
                "name": "Pen",
                "slug": "pen",
                "description": "A stationary",
                "parentCategory": {
                  "id": 12,
                  "name": "Pen",
                  "slug": "pen",
                  "description": "string",
                  "images": [
                    {
                      "perspective": "FRONT",
                      "default": true,
                      "resolution": {
                        "sizes": {
                          "descriptor": "medium",
                          "url": "http://www.example.com/image.jpg"
                        }
                      }
                    }
                  ],
                  "status": "ENABLED"
                },
                "images": [
                  {
                    "perspective": "FRONT",
                    "default": true,
                    "resolution": {
                      "sizes": {
                        "descriptor": "medium",
                        "url": "http://www.example.com/image.jpg"
                      }
                    }
                  }
                ],
                "status": "ENABLED"
              },
              "storeSpecificData": [
                {
                  "storeId": "70100485",
                  "stock": 1,
                  "price": {
                    "nationalPrice": {
                      "regular": {
                        "unitPrice": "USD 5.00",
                        "nforPrice": "USD 4.00",
                        "nfor": 6,
                        "type": "PROMO",
                        "description": "Offer price",
                        "expiredDate": {
                          "value": "2025-08-11T15:33:48Z",
                          "timezone": "UTC"
                        }
                      },
                      "promo": {
                        "unitPrice": "USD 5.00",
                        "nforPrice": "USD 4.00",
                        "nfor": 6,
                        "type": "PROMO",
                        "description": "Offer price",
                        "expiredDate": {
                          "value": "2025-08-11T15:33:48Z",
                          "timezone": "UTC"
                        }
                      }
                    },
                    "storePrice": {
                      "regular": {
                        "unitPrice": "USD 5.00",
                        "nforPrice": "USD 4.00",
                        "nfor": 6,
                        "type": "PROMO",
                        "description": "Offer price",
                        "expiredDate": {
                          "value": "2025-08-11T15:33:48Z",
                          "timezone": "UTC"
                        }
                      },
                      "promo": {
                        "unitPrice": "USD 4.99",
                        "nforPrice": "USD 3.99",
                        "nfor": 6,
                        "type": "PROMO",
                        "description": "Offer price",
                        "expiredDate": {
                          "value": "2025-08-11T15:33:48Z",
                          "timezone": "UTC"
                        }
                      }
                    }
                  },
                  "location": {
                    "aisle": "1",
                    "shelf": "2",
                    "position": "3"
                  },
                  "modality": "DELIVERY"
                }
              ],
              "soldBy": "EACH",
              "images": [
                {
                  "default": true,
                  "perspective": "FRONT",
                  "resolution": {
                    "sizes": [
                      {
                        "descriptor": "medium",
                        "url": "http://www.example.com/image.jpg"
                      }
                    ]
                  }
                }
              ],
              "krogerId": "0001629144204",
              "status": "ENABLED",
              "createdAt": {
                "value": "2020-07-21T10:53:40Z",
                "timezone": "UTC"
              },
              "updatedAt": {
                "value": "2020-07-21T10:53:40Z",
                "timezone": "UTC"
              },
              "deletedAt": null,
              "metaData": {
                "availability": false,
                "alcoholic": false,
                "feeAmt": "USD 1.00",
                "size": "1 lb",
                "wineOrSpirits": false
              }
            }
          }
        }
      },
      "getById.delivery.products.compact": {
        "value": {
          "data": {
            "products": {
              "id": 1,
              "name": "Britania Treat",
              "slug": "britania-treat-1",
              "description": "Buiscuit",
              "barcodes": [
                "0004902245736"
              ],
              "soldBy": "EACH",
              "images": [
                {
                  "default": true,
                  "perspective": "FRONT",
                  "resolution": {
                    "sizes": [
                      {
                        "descriptor": "medium",
                        "url": "http://www.example.com/image.jpg"
                      }
                    ]
                  }
                }
              ],
              "primaryCategory": {
                "id": 22
              },
              "krogerId": "0007301071136",
              "status": "ENABLED",
              "createdAt": {
                "value": "2020-07-21T10:53:40Z",
                "timezone": "UTC"
              },
              "updatedAt": {
                "value": "2020-07-21T10:53:40Z",
                "timezone": "UTC"
              },
              "deletedAt": null,
              "metaData": {
                "availability": false,
                "alcoholic": false,
                "feeAmt": "USD 1.00",
                "size": "1 lb",
                "wineOrSpirits": false
              }
            }
          }
        }
      },
      "getById.ship.products.full": {
        "value": {
          "data": {
            "products": {
              "barcodes": null,
              "brand": {
                "name": "Simple Truth"
              },
              "deletedAt": null,
              "description": "<p><strong>Perfectly Simple Cereal</strong></p><ul><li>Nuts &amp; Seeds Provide a Hearty Combination of Fats &amp; Proteins</li><li>A Pleasant Flavor &amp; Crunch</li><li>Dried Fruit Adds a Touch of Wholesome Sweetness</li></ul>",
              "images": [
                {
                  "default": true,
                  "perspective": "FRONT",
                  "resolution": {
                    "sizes": [
                      {
                        "descriptor": "medium",
                        "url": "https://www.kroger.com/product/images/medium/front/4003997802369"
                      },
                      {
                        "descriptor": "large",
                        "url": "https://www.kroger.com/product/images/large/front/4003997802369"
                      }
                    ]
                  }
                }
              ],
              "krogerId": "4003997802369",
              "metaData": {
                "alcoholic": false,
                "size": "1 Count",
                "package": {
                  "length": "3.55 [in_i]",
                  "width": "8.85 [in_i]",
                  "height": "13.4 [in_i]",
                  "weight": "4.2 [lb_av]",
                  "shape": "Cylindrical"
                },
                "gtin14": "00052100071039"
              },
              "name": "Simple Truth Gluten Free Paleo Muesli Cups",
              "primaryCategory": {
                "name": "Cereals & Granola",
                "parentCategory": {
                  "name": "Grocery",
                  "parentCategory": {
                    "name": "Natural & Organic",
                    "metaData": {
                      "code": "50"
                    }
                  },
                  "metaData": {
                    "code": "25"
                  }
                },
                "metaData": {
                  "code": "00002"
                }
              },
              "secondaryCategories": [
                {
                  "name": "Granola",
                  "parentCategory": {
                    "name": "Cereal & Granola",
                    "metaData": {
                      "code": "15"
                    },
                    "parentCategory": {
                      "name": "Breakfast",
                      "metaData": {
                        "code": "30"
                      }
                    }
                  },
                  "metaData": {
                    "code": "00004"
                  }
                }
              ],
              "slug": "simple-truth-gluten-free-paleo-muesli-cups",
              "soldBy": "EACH",
              "status": "ENABLED",
              "storeSpecificData": [
                {
                  "location": null,
                  "modality": [
                    "SHIP"
                  ],
                  "price": {
                    "nationalPrice": {
                      "promo": {
                        "description": "description",
                        "expiredDate": {
                          "value": "2025-08-11T15:33:48Z",
                          "timezone": "UTC"
                        },
                        "nfor": 1,
                        "nforPrice": "USD 20.00",
                        "type": "PROMO",
                        "unitPrice": "USD 20.00"
                      },
                      "regular": {
                        "description": "description",
                        "expiredDate": {
                          "value": "2025-08-11T15:33:48Z",
                          "timezone": "UTC"
                        },
                        "nfor": 1,
                        "nforPrice": "USD 21.99",
                        "type": "REGULAR",
                        "unitPrice": "USD 21.99"
                      }
                    }
                  },
                  "stock": 1,
                  "storeId": "309DC309",
                  "metaData": {
                    "minOrderQty": 5
                  }
                }
              ]
            }
          }
        }
      },
      "getById.ship.products.compact": {
        "value": {
          "data": {
            "products": {
              "barcodes": null,
              "brand": {
                "name": "Simple Truth"
              },
              "deletedAt": null,
              "description": "<p><strong>Perfectly Simple Cereal</strong></p><ul><li>Nuts &amp; Seeds Provide a Hearty Combination of Fats &amp; Proteins</li><li>A Pleasant Flavor &amp; Crunch</li><li>Dried Fruit Adds a Touch of Wholesome Sweetness</li></ul>",
              "images": [
                {
                  "default": true,
                  "perspective": "FRONT",
                  "resolution": {
                    "sizes": [
                      {
                        "descriptor": "medium",
                        "url": "https://www.kroger.com/product/images/medium/front/4003997802369"
                      },
                      {
                        "descriptor": "large",
                        "url": "https://www.kroger.com/product/images/large/front/4003997802369"
                      }
                    ]
                  }
                }
              ],
              "krogerId": "4003997802369",
              "metaData": {
                "alcoholic": false,
                "size": "1 Count",
                "package": {
                  "length": "3.55 [in_i]",
                  "width": "8.85 [in_i]",
                  "height": "13.4 [in_i]",
                  "weight": "4.2 [lb_av]",
                  "shape": "Cylindrical"
                },
                "gtin14": "00052100071039"
              },
              "name": "Simple Truth Gluten Free Paleo Muesli Cups",
              "primaryCategory": {
                "name": "Cereals & Granola",
                "parentCategory": {
                  "name": "Grocery",
                  "parentCategory": {
                    "name": "Natural & Organic",
                    "metaData": {
                      "code": "50"
                    }
                  },
                  "metaData": {
                    "code": "25"
                  }
                },
                "metaData": {
                  "code": "00002"
                }
              },
              "secondaryCategories": [
                {
                  "name": "Granola",
                  "parentCategory": {
                    "name": "Cereal & Granola",
                    "metaData": {
                      "code": "15"
                    },
                    "parentCategory": {
                      "name": "Breakfast",
                      "metaData": {
                        "code": "30"
                      }
                    }
                  },
                  "metaData": {
                    "code": "00004"
                  }
                }
              ],
              "slug": "simple-truth-gluten-free-paleo-muesli-cups",
              "soldBy": "EACH",
              "status": "ENABLED"
            }
          }
        }
      },
      "products.full": {
        "value": {
          "data": {
            "products": [
              {
                "id": 1,
                "name": "Paper Pencil Plastic Wrap",
                "slug": "paper-pencil-plastic-wrap",
                "description": "Stationary",
                "barcodes": [
                  "100889",
                  "674892"
                ],
                "primaryCategory": {
                  "id": 15,
                  "name": "Pen",
                  "slug": "pen",
                  "description": "A stationary",
                  "parentCategory": {
                    "id": 12,
                    "name": "Pen",
                    "slug": "pen",
                    "description": "string",
                    "images": [
                      {
                        "perspective": "FRONT",
                        "default": true,
                        "resolution": {
                          "height": "42",
                          "width": "46",
                          "sizes": {
                            "size": "medium",
                            "url": "http://www.example.com/image.jpg"
                          }
                        }
                      }
                    ],
                    "status": "ENABLED"
                  },
                  "images": [
                    {
                      "perspective": "FRONT",
                      "default": true,
                      "resolution": {
                        "height": "42",
                        "width": "46",
                        "sizes": {
                          "size": "medium",
                          "url": "http://www.example.com/image.jpg"
                        }
                      }
                    }
                  ],
                  "status": "ENABLED"
                },
                "storeSpecificData": [
                  {
                    "storeId": 1,
                    "stock": 5,
                    "price": {
                      "nationalPrices": {
                        "regular": {
                          "unitPrice": 5,
                          "nForPrice": 4,
                          "nfor": 6,
                          "type": "promo",
                          "defaultDescription": "Offer price",
                          "expirationDate": "2020-08-18T01:54:17.848Z",
                          "currency": "string"
                        },
                        "promo": {
                          "unitPrice": 5,
                          "nForPrice": 4,
                          "nfor": 6,
                          "type": "promo",
                          "defaultDescription": "Offer price",
                          "expirationDate": "2020-08-18T01:54:17.848Z",
                          "currency": "string"
                        }
                      },
                      "storePrices": {
                        "regular": {
                          "unitPrice": 5,
                          "nForPrice": 4,
                          "nfor": 6,
                          "type": "promo",
                          "defaultDescription": "Offer price",
                          "expirationDate": "2020-08-18T01:54:17.848Z",
                          "currency": "string"
                        },
                        "promo": {
                          "unitPrice": 5,
                          "nForPrice": 4,
                          "nfor": 6,
                          "type": "promo",
                          "defaultDescription": "Offer price",
                          "expirationDate": "2020-08-18T01:54:17.848Z",
                          "currency": "string"
                        }
                      }
                    },
                    "location": {
                      "aisle": "aisle",
                      "shelf": "shelf",
                      "position": "position"
                    },
                    "modality": "PICK_UP"
                  }
                ],
                "soldBy": "unit",
                "images": [
                  {
                    "default": true,
                    "perspective": "FRONT",
                    "resolution": {
                      "height": "42",
                      "width": "46",
                      "sizes": [
                        {
                          "size": "medium",
                          "url": "http://www.example.com/image.jpg"
                        }
                      ]
                    }
                  }
                ],
                "krogerId": "120070",
                "status": "ENABLED",
                "createdAt": {
                  "value": "2020-07-21T10:53:40Z",
                  "timezone": "UTC"
                },
                "updatedAt": {
                  "value": "2020-07-21T10:53:40Z",
                  "timezone": "UTC"
                },
                "deletedAt": null,
                "metaData": {
                  "availability": false,
                  "alcoholic": false,
                  "feeAmt": "",
                  "size": "1 lb",
                  "wineOrSpirits": false
                }
              }
            ]
          },
          "meta": {
            "page": {
              "count": 1,
              "offset": 0,
              "size": 20
            }
          }
        }
      },
      "products.compact": {
        "value": {
          "data": {
            "products": [
              {
                "id": 1,
                "name": "Britania Treat",
                "slug": "britania-treat-1",
                "description": "Buiscuit",
                "barcodes": [
                  "100889",
                  "674892"
                ],
                "soldBy": "EACH",
                "images": [
                  {
                    "default": true,
                    "perspective": "FRONT",
                    "resolution": {
                      "height": "42",
                      "width": "46",
                      "sizes": [
                        {
                          "size": "medium",
                          "url": "http://www.example.com/image.jpg"
                        }
                      ]
                    }
                  }
                ],
                "krogerId": "120070",
                "status": "ENABLED",
                "createdAt": {
                  "value": "2020-07-21T10:53:40Z",
                  "timezone": "UTC"
                },
                "updatedAt": {
                  "value": "2020-07-21T10:53:40Z",
                  "timezone": "UTC"
                },
                "deletedAt": null,
                "metaData": {
                  "metaData": null,
                  "availability": false,
                  "alcoholic": false,
                  "feeAmt": "",
                  "size": "1 lb",
                  "wineOrSpirits": false
                }
              }
            ]
          },
          "meta": {
            "page": {
              "count": 1,
              "offset": 0,
              "size": 20
            }
          }
        }
      },
      "order.CreateShipOrderRequest": {
        "value": {
          "modalityType": "SHIP",
          "origin": "b2b-partner",
          "buyer": {
            "dateOfBirth": "1985-10-01",
            "address": {
              "name": "John Doe",
              "company": "Kroger",
              "residential": true,
              "addressLines": [
                "4613 Marburg Ave",
                "Unit 100"
              ],
              "cityTown": "Cincinnati",
              "stateProvince": "OH",
              "postalCode": "45209",
              "carrierRoute": "4592",
              "deliveryPoint": "43",
              "countryCode": "US",
              "phone": "+18005550198",
              "email": "john.doe@example.com",
              "taxId": "34-232332333"
            }
          },
          "fulfillment": {
            "contact": {
              "firstName": "John",
              "lastName": "Doe",
              "phone": "+18005550198",
              "address": {
                "name": "John Doe",
                "company": "Kroger",
                "residential": true,
                "addressLines": [
                  "4613 Marburg Ave",
                  "Unit 100"
                ],
                "cityTown": "Cincinnati",
                "stateProvince": "OH",
                "postalCode": "45209",
                "carrierRoute": "4592",
                "deliveryPoint": "43",
                "countryCode": "US",
                "phone": "+18005550198",
                "email": "john.doe@example.com",
                "taxId": "34-232332333"
              }
            },
            "service": {
              "type": "CONTACTLESS",
              "code": "STANDARD_SHIPPING",
              "cost": "USD 5.00"
            }
          },
          "lineItems": [
            {
              "item": {
                "gtin13": "0007106343767",
                "quantity": 3,
                "instructions": "The expiration date must be at least a week out",
                "originalPrice": {
                  "regular": {
                    "price": "USD 12.00"
                  },
                  "sale": {
                    "price": "USD 10.00"
                  }
                }
              }
            }
          ],
          "payment": {
            "id": "ffffffff-4f63-4227-a243-5252d6504899",
            "status": "COMPLETED",
            "amount": "USD 38.00",
            "type": "CREDIT_CARD_PAY",
            "tax": "USD 3.00",
            "billingAddress": {
              "name": "John Doe",
              "company": "Kroger",
              "residential": true,
              "addressLines": [
                "4613 Marburg Ave",
                "Unit 100"
              ],
              "cityTown": "Cincinnati",
              "stateProvince": "OH",
              "postalCode": "45209",
              "carrierRoute": "4592",
              "deliveryPoint": "43",
              "countryCode": "US",
              "phone": "+18005550198",
              "email": "john.doe@example.com",
              "taxId": "34-232332333"
            }
          },
          "additionalInfo": null
        }
      },
      "order.CreateShipOrderResponse": {
        "value": {
          "data": {
            "checkouts": {
              "id": "22752487002062812",
              "modalityType": "SHIP",
              "versionKey": "010000000ed73c7b0a322ef0b20000",
              "created": {
                "value": "2020-10-17T20:00:00Z",
                "timezone": "UTC"
              },
              "modified": {
                "value": "2020-10-17T20:00:00Z",
                "timezone": "UTC"
              },
              "status": "ACTIVE",
              "summary": {
                "itemCount": 3,
                "total": {
                  "item": "USD 36.00",
                  "fee": "USD 5.00",
                  "amount": "USD 43.00",
                  "gratutity": "USD 00.00",
                  "discount": "USD 1.00",
                  "tax": "USD 3.00"
                }
              },
              "additionalInfo": null
            }
          }
        }
      },
      "order.ShipOrderSummary": {
        "value": {
          "data": {
            "checkouts": {
              "modalityType": "SHIP",
              "status": "DRAFT",
              "summary": {
                "itemCount": 3,
                "total": {
                  "item": "USD 36.00",
                  "fee": "USD 5.00",
                  "amount": "USD 43.00",
                  "gratutity": "USD 00.00",
                  "discount": "USD 1.00",
                  "tax": "USD 3.00"
                }
              }
            }
          }
        }
      },
      "order.APIError.badRequest": {
        "value": {
          "errors": [
            {
              "code": "Missing Parameter",
              "reason": "Parameter modalityType is required for this request",
              "datetime": {
                "value": "2020-10-22T07:15:08Z",
                "timezone": "UTC"
              }
            }
          ]
        }
      },
      "order.APIError.notFound": {
        "value": {
          "errors": [
            {
              "code": "Entity Not Found",
              "reason": "No 'Route' found for Id: 'POST /order-service/v1/checkouts/1'",
              "datetime": {
                "value": "2020-10-22T07:15:08Z",
                "timezone": "UTC"
              }
            }
          ]
        }
      },
      "order.InvalidMethodAndValidToken": {
        "value": {
          "message": "no Route matched with those values"
        }
      },
      "order.APIError.serverError": {
        "value": {
          "errors": [
            {
              "code": "Internal Server Error",
              "reason": "The call failed to execute. Try again later or contact support.",
              "datetime": {
                "value": "2020-10-22T07:15:08Z",
                "timezone": "UTC"
              }
            }
          ]
        }
      },
      "get.products.details": {
        "value": {
          "data": [
            {
              "upc": "0081801301354",
              "name": "Simple Truth™ Paso Robles Cabernet Sauvignon",
              "description": "Our organic Cabernet Sauvignon grapes are grown on one of California's largest organic vineyards, in the hills of Paso Robles on the Central Coast. With its wide day-to-night temperature swings and fossil-rich marine limestones, this growing region provides unique stressors that produce deep, intense flavors with structure and elegance.",
              "brand": {
                "name": "Simple Truth",
                "metadata": {
                  "marketingName": "Simple Truth"
                }
              },
              "categories": [
                {
                  "department": {
                    "code": "08",
                    "name": "Beer, Wine & Liquor"
                  },
                  "commodity": {
                    "code": "120",
                    "name": "Red Wine"
                  },
                  "subCommodity": {
                    "code": "00571",
                    "name": "Cabernet Sauvignon Wine"
                  }
                }
              ],
              "metadata": {
                "gtin14": "00818013013548",
                "size": "750 mL",
                "alcoholic": true,
                "snapEligible": false,
                "package": {
                  "length": "3.02 [in_i]",
                  "width": "3.02 [in_i]",
                  "height": "12.04 [in_i]",
                  "weight": "2.8 [lb_av]"
                },
                "temperature": {
                  "indicator": "Ambient"
                },
                "restrictedItem": true,
                "ageRestrictionFlag": true
              },
              "images": [
                {
                  "default": false,
                  "perspective": "LEFT",
                  "sizes": [
                    {
                      "url": "https://www.kroger.com/product/images/xlarge/left/0081801301354",
                      "descriptor": "xlarge"
                    },
                    {
                      "url": "https://www.kroger.com/product/images/large/left/0081801301354",
                      "descriptor": "large"
                    },
                    {
                      "url": "https://www.kroger.com/product/images/medium/left/0081801301354",
                      "descriptor": "medium"
                    },
                    {
                      "url": "https://www.kroger.com/product/images/small/left/0081801301354",
                      "descriptor": "small"
                    },
                    {
                      "url": "https://www.kroger.com/product/images/thumbnail/left/0081801301354",
                      "descriptor": "thumbnail"
                    }
                  ]
                }
              ]
            }
          ],
          "meta": {
            "page": {
              "offset": 0,
              "size": 20,
              "hasMore": false
            }
          }
        }
      },
      "get.products-inventory": {
        "value": {
          "data": [
            {
              "upc": "0081801301354",
              "name": "Simple Truth™ Paso Robles Cabernet Sauvignon",
              "stockLevelUpdatedAt": {
                "value": "2022-01-02T50:53:40Z",
                "timezone": "UTC"
              },
              "fulfillmentUpdatedAt": {
                "value": "2022-01-01T59:53:40Z",
                "timezone": "UTC"
              },
              "priceUpdatedAt": {
                "value": "2022-01-01T10:53:40Z",
                "timezone": "UTC"
              },
              "updatedAt": {
                "value": "2020-01-02T50:53:40Z",
                "timezone": "UTC"
              },
              "locations": [
                {
                  "id": "02600895",
                  "inventory": [
                    {
                      "sellerID": "KR001",
                      "sellerName": "Kroger",
                      "stock": {
                        "availableToSell": 6,
                        "level": "HIGH"
                      },
                      "instock": true,
                      "prices": [
                        {
                          "soldBy": "UNIT",
                          "regular": {
                            "currency": "USD",
                            "nfor": [
                              {
                                "quantity": 1,
                                "price": 19.88
                              }
                            ],
                            "unit": 19.88
                          },
                          "promo": {
                            "currency": "USD",
                            "effectiveDate": {
                              "value": "2023-03-12T00:00:00Z",
                              "timezone": "UTC"
                            },
                            "expiredDate": {
                              "value": "2023-03-15T00:00:00Z",
                              "timezone": "UTC"
                            },
                            "nfor": [
                              {
                                "quantity": 1,
                                "price": 16.88
                              }
                            ],
                            "unit": 16.88
                          }
                        }
                      ]
                    }
                  ],
                  "aisleLocations": [
                    {
                      "aisle": "5",
                      "aisleDescription": "AISLE 5",
                      "aisleSide": "L",
                      "bayNumber": "001",
                      "numberOfFacings": "2",
                      "shelf": "2",
                      "position": "8"
                    }
                  ],
                  "fulfillment": {
                    "delivery": true,
                    "ship": false,
                    "pickup": true,
                    "instore": true
                  }
                }
              ]
            }
          ],
          "meta": {
            "page": {
              "offset": 0,
              "size": 20,
              "hasMore": false
            }
          }
        }
      },
      "get.products-inventory.locations": {
        "value": {
          "data": [
            {
              "upc": "0081801301354",
              "name": "Simple Truth™ Paso Robles Cabernet Sauvignon",
              "locations": [
                {
                  "id": "02600895",
                  "inventory": [
                    {
                      "sellerID": "KR001",
                      "sellerName": "Kroger",
                      "stock": {
                        "availableToSell": 6,
                        "level": "HIGH"
                      },
                      "instock": true,
                      "prices": [
                        {
                          "soldBy": "UNIT",
                          "regular": {
                            "currency": "USD",
                            "nfor": [
                              {
                                "quantity": 1,
                                "price": 19.88
                              }
                            ],
                            "unit": 19.88
                          },
                          "promo": {
                            "currency": "USD",
                            "effectiveDate": {
                              "value": "2023-03-12T00:00:00Z",
                              "timezone": "UTC"
                            },
                            "expiredDate": {
                              "value": "2023-03-15T00:00:00Z",
                              "timezone": "UTC"
                            },
                            "nfor": [
                              {
                                "quantity": 1,
                                "price": 16.88
                              }
                            ],
                            "unit": 16.88
                          }
                        }
                      ]
                    }
                  ],
                  "aisleLocations": [
                    {
                      "aisle": "5",
                      "aisleDescription": "AISLE 5",
                      "aisleSide": "L",
                      "bayNumber": "001",
                      "numberOfFacings": "2",
                      "shelf": "2",
                      "position": "8"
                    }
                  ],
                  "fulfillment": {
                    "delivery": true,
                    "ship": false,
                    "pickup": true,
                    "instore": true
                  }
                }
              ]
            }
          ],
          "meta": {
            "page": {
              "offset": 0,
              "size": 20,
              "hasMore": false
            }
          }
        }
      },
      "get.products.metadata": {
        "value": {
          "data": [
            {
              "upc": "0081801301354",
              "name": "Simple Truth™ Paso Robles Cabernet Sauvignon",
              "metadata": {
                "gtin14": "00818013013548",
                "size": "750 mL",
                "alcoholic": true,
                "snapEligible": false,
                "package": {
                  "length": "3.02 [in_i]",
                  "width": "3.02 [in_i]",
                  "height": "12.04 [in_i]",
                  "weight": "2.8 [lb_av]"
                },
                "temperature": {
                  "indicator": "Ambient"
                },
                "restrictedItem": true,
                "ageRestrictionFlag": true
              }
            }
          ],
          "meta": {
            "page": {
              "offset": 0,
              "size": 20,
              "hasMore": false
            }
          }
        }
      }
    },
    "securitySchemes": {
      "CustomerContext": {
        "type": "oauth2",
        "description": "When making an API request that is either returning personalized customer \ndata or acting on behalf of a customer, the customer's consent \nis required using the [Authorization Code Grant Type](#authorization-code-grant).\n",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://api.kroger.com/v1/connect/oauth2/authorize",
            "tokenUrl": "https://api.kroger.com/v1/connect/oauth2/token",
            "scopes": {
              "profile.name": "Grants read access to profile information. This scope returns only the ID, first name, and last name associated with the profile.",
              "profile.basic": "Grants read access to profile information. This scope returns only the email, name, address, and phone number associated with the profile.",
              "profile.loyalty": "Grants read access to profile loyalty information. This scope includes only the loyalty card number.",
              "profile.full": "Grants read access to profile information only. This scope includes profile.basic and profile.loyalty.",
              "product.personalized": "Grants read access to personalized product information.",
              "product.basic": "Grants read access to general product information.",
              "cart.basic": "Grants read access to the basic version of the cart.",
              "cart.basic:rw": "Grants read and write access to the basic version of the cart.",
              "urn:com:kroger:partner:catalog:products:read": "Grants read access to product catalog information.",
              "N/A": "No scope required."
            }
          }
        }
      },
      "ClientContext": {
        "type": "oauth2",
        "description": "When making API requests that do not require customer consent, you can use \nthe [Client Credentials Grant Type](#client-credentials-grant) to authenticate your OAuth2 \napplication.\n",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://api.kroger.com/v1/connect/oauth2/token",
            "scopes": {
              "profile.exists": "Grants read access to verify if a profile exists.",
              "product.basic": "Grants read access to general product information.",
              "delivery.basic": "Grants read access to courier delivery information.",
              "delivery.basic:rw": "Grants read and write access to courier delivery information.",
              "urn:com:kroger:partner:catalog:products:read": "Grants read access to product catalog information.",
              "urn:com:kroger:partner:order:checkout:write": "Allows partners to create new ship orders and view the created order details.",
              "urn:com:kroger:partner:unattended-pickup:order-events:write": "Grants write access to unattended locker order status.",
              "N/A": "No scope required."
            }
          }
        }
      }
    }
  },
  "x-tagGroups": [
    {
      "name": "Authorization Endpoints",
      "tags": [
        "OAuth2"
      ]
    },
    {
      "name": "API Reference",
      "tags": [
        "Identity",
        "Carts",
        "Catalog",
        "Catalog V2",
        "Products",
        "Locations",
        "Deliveries",
        "Ship Order",
        "Locker Pickup"
      ]
    }
  ]
}