/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { order_CreateShipOrderRequest } from '../models/order_CreateShipOrderRequest';
import type { order_CreateShipOrderResponse } from '../models/order_CreateShipOrderResponse';

import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export class ShipOrderService {

    /**
     * Create ship order
     * This endpoint is used to support a two-step process for submitting a paid order to Kroger for shipping:
     * 1. Pass `option.calculate=summary` as a query parameter to get the appropriate tax for the order.
     * 2. After calculating the order cost (including the tax returned in step 1) and getting payment from the customer,
     * submit the full order to Kroger with no query parameters.
     *
     * The service does not currently validate the tax amount and total order payment in step 2,
     * so it's important to get the correct value from step 1.
     * @param xCorrelationId Unique identifier to track the request.
     * @param xIdempotencyKey A UUID generated by the consumer to ensure that the request is not executed more than once.
     * @param requestBody
     * @param optionCalculate Pass this parameter with the `summary` value to get the correct tax amount for an order.
     * <br><br> Note: Payment details are optional when this option is used.
     * @returns order_CreateShipOrderResponse OK
     * @throws ApiError
     */
    public static postPartnerOrderCheckouts(
        xCorrelationId: string,
        xIdempotencyKey: string,
        requestBody: order_CreateShipOrderRequest,
        optionCalculate?: string,
    ): CancelablePromise<order_CreateShipOrderResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/partner/order/checkouts',
            headers: {
                'X-Correlation-ID': xCorrelationId,
                'X-Idempotency-Key': xIdempotencyKey,
            },
            query: {
                'option.calculate': optionCalculate,
            },
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Bad Request`,
                401: `Unauthorized`,
                403: `Forbidden`,
                404: `Not Found`,
                500: `Internal Server Error`,
            },
        });
    }

}
